<?xml version="1.0" encoding="UTF-8"?>
<chapter id="svn.intro">

  <!-- @ENGLISH {{{
  <title>Introduction</title>
  @ENGLISH }}} -->
  <title>Введение</title>
  <chapterinfo>
    <othername id="svn.intro.architecture.dia-1.prepositional-case"
      role="title-variant">рисунке 1.1, &laquo;Архитектура
        Subversion&raquo;</othername>
  </chapterinfo>
  <!-- See also svn.preface.organization -->

  <simplesect>
    <!-- @ENGLISH {{{
    <para>Version control is the art of managing changes to
      information.  It has long been a critical tool for programmers,
      who typically spend their time making small changes to software
      and then undoing those changes the next day.  But the usefulness
      of version control software extends far beyond the bounds of the
      software development world.  Anywhere you can find people using
      computers to manage information that changes often, there is
      room for version control.  And that's where Subversion comes
      into play.</para>
    @ENGLISH }}} -->
    <para>Управление версиями &mdash; это искусство управления изменяющейся
      информацией. Долгое время оно было жизненно важным инструментом
      программистов, которые обычно проводят время, внося небольшие
      изменения в программы, а в один прекрасный момент делают откат
      изменений, возвращаясь к предыдущей версии. Однако, полезность
      систем управления версиями выходит далеко за пределы мира
      разработчиков программного обеспечения. Управление версиями
      требуется повсюду, где можно встретить людей, использующих
      компьютер для работы с постоянно изменяющейся информацией. Именно
      тогда на сцену выходит Subversion.</para>

    <!-- @ENGLISH {{{
    <para>This chapter contains a high-level introduction to
      Subversion&mdash;what it is; what it does; how to get it.</para>
    @ENGLISH }}} -->
    <para>В этой главе даётся общее введение в Subversion. Здесь
      поясняется, что это такое, что она делает и как её получить.</para>

  </simplesect>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.whatis">

    <!-- @ENGLISH {{{
    <title>What is Subversion?</title>
    @ENGLISH }}} -->
    <title>Что такое Subversion?</title>

    <!-- @ENGLISH {{{
    <para>Subversion is a free/open-source version control system.
      That is, Subversion manages files and directories over time.  A
      tree of files is placed into a central
      <firstterm>repository</firstterm>.  The repository is much like
      an ordinary file server, except that it remembers every change
      ever made to your files and directories.  This allows you to
      recover older versions of your data, or examine the history of
      how your data changed.  In this regard, many people think of a
      version control system as a sort of <quote>time
      machine</quote>.</para>
    @ENGLISH }}} -->
    <para>Subversion &mdash; это свободная система управления версиями с
      открытым исходным кодом. Subversion позволяет управлять файлами и
      каталогами во времени. Дерево файлов помещается в центральное
      <firstterm>хранилище</firstterm>, которое похоже на обычный сервер
      файлов с тем отличием, что оно запоминает каждое изменение,
      внесённое в файл или каталог. Это позволяет восстановить ранние
      версии данных, исследовать историю изменений данных. Благодаря
      этому, многие считают систему управления версиями своеобразной
      <quote>машиной времени</quote>.</para>

    <!-- @ENGLISH {{{
    <para>Subversion can access its repository across networks, which
      allows it to be used by people on different computers.  At some
      level, the ability for various people to modify and manage the
      same set of data from their respective locations fosters
      collaboration.  Progress can occur more quickly without a single
      conduit through which all modifications must occur.  And because
      the work is versioned, you need not fear that quality is the
      trade-off for losing that conduit&mdash;if some incorrect change
      is made to the data, just undo that change.</para>
    @ENGLISH }}} -->
    <para>Subversion обращается к хранилищу по сети, что позволяет
      использовать её на разных компьютерах. Возможность совместной
      работы с одним и тем же набором данных поощряет сотрудничество. При
      отсутствии единственного контролирующего звена, через которое
      должны проходить все изменения, работа становится более
      эффективной. При этом не нужно опасаться, что отказ от контролирующего
      звена повлияет на качество, ведь благодаря сохранению истории версий,
      даже если в данные будут внесены ошибочные изменения, всегда можно
      сделать откат изменений к прежнему состоянию.</para>

    <!-- @ENGLISH {{{
    <para>Some version control systems are also software configuration
      management (SCM) systems.  These systems are specifically
      tailored to manage trees of source code, and have many features
      that are specific to software development&mdash;such as natively
      understanding programming languages, or supplying tools for
      building software.  Subversion, however, is not one of these
      systems.  It is a general system that can be used to manage
      <emphasis>any</emphasis> collection of files.  For you, those
      files might be source code&mdash;for others, anything from
      grocery shopping lists to digital video mixdowns and
      beyond.</para>
    @ENGLISH }}} -->
    <para>Некоторые системы управления версиями выступают также в
      качестве систем управления конфигурацией программного обеспечения
      (SCM<footnote><para>Software Configuration
          Management</para></footnote>). Такие системы специально
      созданы для управления деревьями исходного кода и обладают
      множеством особенностей, непосредственно относящихся к разработке
      программного обеспечения: они понимают языки программирования и
      предоставляют инструменты для сборки программ. Subversion не
      является такой системой, она представляет собой систему общего
      назначения, которую можно использовать для управления
      <emphasis>любым</emphasis> набором файлов. Ваши файлы могут быть
      исходным кодом, а для кого-то это будет что-то иное, например
      списки покупок в продовольственном магазине или сведённые цифровые
      видеоролики.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.history">

    <!-- @ENGLISH {{{
    <title>Subversion's History</title>
    @ENGLISH }}} -->
    <title>История Subversion</title>

    <!-- @ENGLISH {{{
    <para>In early 2000, CollabNet,
      Inc. (<ulink url="http://www.collab.net"/>) began seeking
      developers to write a replacement for CVS.  CollabNet offers a
      collaboration software suite called CollabNet Enterprise Edition
      (CEE)
      <footnote>
        <para>There's also a CollabNet Team Edition (CTE)
          offering aimed at smaller groups.</para>
      </footnote>
      of which one component is version control.  Although
      CEE used CVS as its initial version control system, CVS's
      limitations were obvious from the beginning, and CollabNet knew
      it would eventually have to find something better.
      Unfortunately, CVS had become the <foreignphrase>de
      facto</foreignphrase> standard in the open source world largely
      because there <emphasis>wasn't</emphasis> anything better, at
      least not under a free license.  So CollabNet determined to
      write a new version control system from scratch, retaining the
      basic ideas of CVS, but without the bugs and misfeatures.</para>
    @ENGLISH }}} -->
    <para>В начале 2000 года компания CollabNet, Inc. (<ulink
      url="http://www.collab.net"/>) решила начать
      разработку программного обеспечения, призванного прийти на смену
      CVS, и стала искать людей, способных решить эту задачу. CollabNet
      предлагает комплекс программных средств для совместной работы,
      известный под названием CollabNet Enterprise Edition (CEE)
      <footnote><para>Кроме того, еще существует CollabNet Team
      Edition (CTE), предназначенный главным образом для небольших групп
      разработчиков.</para></footnote>, одним из компонентов которого
      является средство для управления версиями. В качестве такого
      средства в CEE использовалась CVS, хотя её недостатки были
      очевидны с самого начала, и для CollabNet было ясно, что рано или
      поздно придётся искать замену. К сожалению, CVS стала стандартом
      <foreignphrase>де-факто</foreignphrase> в мире программного
      обеспечения с открытым исходным кодом, главным образом потому, что
      ничего лучшего в то время <emphasis>не существовало</emphasis>, по
      крайней мере среди программ со свободной лицензией. И тогда
      CollabNet решила написать новую систему управления версиями с
      нуля, сохранив основные идеи CVS, но без ошибок и неудобств,
      присущих CVS.</para>

    <!-- @ENGLISH {{{
    <para>In February 2000, they contacted Karl Fogel, the author of
      <citetitle>Open Source Development with CVS</citetitle>
      (Coriolis, 1999), and asked if he'd like to work on this new
      project.  Coincidentally, at the time Karl was already
      discussing a design for a new version control system with his
      friend Jim Blandy.  In 1995, the two had started Cyclic
      Software, a company providing CVS support contracts, and
      although they later sold the business, they still used CVS every
      day at their jobs.  Their frustration with CVS had led Jim to
      think carefully about better ways to manage versioned data, and
      he'd already come up with not only the name
      <quote>Subversion</quote>, but also with the basic design of the
      Subversion repository.  When CollabNet called, Karl immediately
      agreed to work on the project, and Jim got his employer, Red Hat
      Software, to essentially donate him to the project for an
      indefinite period of time.  CollabNet hired Karl and Ben
      Collins-Sussman, and detailed design work began in May.  With
      the help of some well-placed prods from Brian Behlendorf and
      Jason Robbins of CollabNet, and Greg Stein (at the time an
      independent developer active in the WebDAV/DeltaV specification
      process), Subversion quickly attracted a community of active
      developers.  It turned out that many people had had the same
      frustrating experiences with CVS, and welcomed the chance to
      finally do something about it.</para>
    @ENGLISH }}} -->
    <para>В феврале 2000 года CollabNet связалась с автором книги
      <citetitle>Open Source Development with
        CVS</citetitle><footnote><para><quote>Разработка программного
            обеспечения с открытым исходным кодом с помощью
            CVS</quote></para></footnote> Карлом Фогелем [Karl
      Fogel] и предложила ему принять участие в этом новом проекте.
      Интересно, что Карл тогда уже обсуждал проект новой системы
      управления версиями со своим другом Джимом Блэнди [Jim Blandy].
      Ещё в 1995 году они создали компанию Cyclic Software, которая
      занималась поддержкой пользователей CVS, и хотя позднее этот
      бизнес был продан, друзья продолжали использовать CVS в
      повседневной работе. Их разочарование в CVS заставило Джима
      серьёзно задуматься о том, как организовать управление версиями
      лучше, и он не только придумал название <quote>Subversion</quote>,
      но и разработал основные принципы устройства хранилища Subversion.
      Карл немедленно согласился на предложение CollabNet, а
      работодатель Джима, RedHat Software, пожертвовал своим сотрудником
      для этого проекта, предоставив ему возможность работать над
      Subversion в течение неограниченного времени. CollabNet взяла на
      работу Карла и Бена Коллинза-Сассмана [Ben Collins-Sussman], и в
      мае началась работа по проектированию системы. В результате
      нескольких безошибочных шагов, предпринятых Брайаном Белендорфом [Brian
      Behlendorf] и Джейсоном Роббинсом [Jason Robbins] из CollabNet и
      Грегом Стайном, на тот момент независимым разработчиком, активно
      участвующим в создании спецификации WebDAV/DeltaV, вокруг
      Subversion быстро образовалось сообщество активных разработчиков.
      Оказалось, что многие люди испытывали похожее чувство
      разочарования от CVS, и они  с радостью приветствовали появившуюся
      наконец возможность изменить положение вещей.</para>

    <!-- @ENGLISH {{{
    <para>The original design team settled on some simple goals.  They
      didn't want to break new ground in version control methodology,
      they just wanted to fix CVS.  They decided that Subversion would
      match CVS's features, and preserve the same development model,
      but not duplicate CVS's most obvious flaws.  And although it did
      not need to be a drop-in replacement for CVS, it should be
      similar enough that any CVS user could make the switch with
      little effort.</para>
    @ENGLISH }}} -->
    <para>Команда первых инженеров решила остановиться на достижении
      ряда простых целей. Они не собирались изобретать велосипед в
      подходах к управлению версиями, скорее им просто хотелось
      исправить CVS. Эта команда решила, что Subversion должна
      соответствовать CVS  по набору возможностей, сохранив ту же самую
      модель разработки, но без очевидных недостатков CVS. Хотя перед
      ними не стояла задача сделать систему, полностью идентичную CVS,
      было ясно, что они должны быть достаточно похожи друг на друга,
      чтобы любой пользователь CVS мог перейти на новую систему без
      особых затруднений.</para>

    <!-- @ENGLISH {{{
    <para>After fourteen months of coding, Subversion became
      <quote>self-hosting</quote> on August 31, 2001.  That is,
      Subversion developers stopped using CVS to manage Subversion's
      own source code, and started using Subversion instead.</para>
    @ENGLISH }}} -->
    <para>И вот, 31 августа 2001 года, спустя четырнадцать месяцев
      с начала работы, команда прекратила использовать CVS и перешла на
      Subversion для управления версиями собственного исходного
      кода &mdash; Subversion стала <quote>самодостаточной</quote>.</para>

    <!-- @ENGLISH {{{
    <para>While CollabNet started the project, and still funds a large
      chunk of the work (it pays the salaries of a few full-time
      Subversion developers), Subversion is run like most open-source
      projects, governed by a loose, transparent set of rules that
      encourage meritocracy.  CollabNet's copyright license is fully
      compliant with the Debian Free Software Guidelines.  In other
      words, anyone is free to download, modify, and redistribute
      Subversion as he pleases; no permission from CollabNet or anyone
      else is required.</para>
    @ENGLISH }}} -->
    <para>Хотя CollabNet стоит у истоков проекта и продолжает
      финансировать основную часть работы, оплачивая полный рабочий день
      нескольких ведущих разработчиков, Subversion развивается подобно
      большинству проектов разработки программного обеспечения с
      открытым исходным кодом, управляясь свободным и прозрачным набором
      правил, поощряющих меритократию. Лицензия CollabNet полностью
      соответствует принципам свободного программного обеспечения
      Debian &mdash; любой человек свободен устанавливать, изменять и
      распространять Subversion так, как ему заблагорассудится; для
      этого не требуется разрешение от CollabNet или кого-либо
      ещё.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.features">

    <!-- @ENGLISH {{{
    <title>Subversion's Features</title>
    @ENGLISH }}} -->
    <title>Возможности Subversion</title>

    <!-- @ENGLISH {{{
    <para>When discussing the features that Subversion brings to the
      version control table, it is often helpful to speak of them in
      terms of how they improve upon CVS's design.  If you're not
      familiar with CVS, you may not understand all of these features.
      And if you're not familiar with version control at all, your
      eyes may glaze over unless you first read <xref
      linkend="svn.basic"/>, in which we provide a gentle introduction
      to version control in general.</para>
    @ENGLISH }}} -->
    <para>Обсуждать возможности Subversion удобнее всего в разрезе
      её улучшений по сравнению с CVS. Суть некоторых рассматриваемых
      здесь возможностей может быть не совсем понятна читателям, которые
      плохо знакомы с CVS. Если же вы совсем не имеете представления об
      управлении версиями, то вам лучше сначала прочитать <xref
        linkend="svn.basic" endterm="svn.basic.accusative-case"/>, где
      даётся доступное введение в управление версиями.
    </para>

    <!-- @ENGLISH {{{
    <para>Subversion provides:</para>
    @ENGLISH }}} -->
    <para>Subversion предоставляет следующие возможности:</para>

    <!-- @ENGLISH {{{
    <variablelist>
      <varlistentry>
        <term>Directory versioning</term>
        <listitem>
          <para>CVS only tracks the history of individual files, but
            Subversion implements a <quote>virtual</quote> versioned
            filesystem that tracks changes to whole directory trees
            over time.  Files <emphasis>and</emphasis> directories are
            versioned.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <variablelist>
        <varlistentry>
          <term>Управление версиями каталогов</term>
          <listitem>
            <para>CVS следит только за историей отдельных файлов, тогда
              как Subversion использует <quote>виртуальную</quote>
              файловую систему с возможностями управления версиями,
              которая способна отслеживать изменения во времени целых
              деревьев каталогов. Под управление версиями попадают файлы
              <emphasis>и</emphasis> каталоги.</para>
          </listitem>
        </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>True version history</term>
        <listitem>
          Since CVS is limited to file versioning, operations
            such as copies and renames&mdash;which might happen to
            files, but which are really changes to the contents of
            some containing directory&mdash;aren't supported in CVS.
            Additionally, in CVS you cannot replace a versioned file
            with some new thing of the same name without the new item
            inheriting the history of the old&mdash;perhaps completely
            unrelated&mdash;file.  With Subversion, you can add,
            delete, copy, and rename both files and directories.  And
            every newly added file begins with a fresh, clean
            history all its own.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Настоящая история версий</term>
        <listitem>
          <para>CVS ограничивается управлением версиями файлов, поэтому
            такие операции, как копирование и переименование, хотя и
            относящиеся к файлам, но по существу являющиеся изменениями
            каталогов, содержащих эти файлы, в CVS не поддерживаются.
            Кроме того, в CVS вы не можете заменить файл, помещённый под
            управление версиями, другим файлом с тем же именем, но
            совершенно иным содержанием, возможно никак не связанным со
            старым объектом, без наследования таким элементом всей
            истории изменений. Subversion делает возможным добавление,
            удаление, копирование и переименование как файлов, так и
            каталогов. При этом каждый вновь добавленный файл начинает
            жизнь с чистого листа, сохраняя собственную историю
            изменений.</para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Atomic commits</term>
        <listitem>
          <para>A collection of modifications either goes into the
            repository completely, or not at all.  This allows
            developers to construct and commit changes as logical
            chunks, and prevents problems that can occur when only a
            portion of a set of changes is successfully sent to the
            repository.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Атомарные закрепления изменений</term>
        <listitem>
          <para>Каждый набор изменений либо попадает в хранилище
            целиком, либо не попадает туда вовсе. Это позволяет
            разработчикам создавать и закреплять изменения логически
            оправданными кусками, предотвращая тем самым проблемы,
            которые могут возникать в тех случаях, когда только часть
            необходимых изменений помещается в хранилище успешно.</para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Versioned metadata</term>
        <listitem>
          <para>Each file and directory has a set of
            properties&mdash;keys and their values&mdash;associated
            with it.  You can create and store any arbitrary key/value
            pairs you wish.  Properties are versioned over time, just
            like file contents.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Метаданные с версиями</term>
        <listitem>
          <para>Каждый файл и каталог имеет собственный набор свойств,
            представленных в виде названия и значения. Вы можете
            создавать и сохранять любые необходимые пары названий
            свойств и их значений. Свойства файлов точно так же
            находятся под управлением версиями, как и их
            содержимое.</para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Choice of network layers</term>
        <listitem>
          <para>Subversion has an abstracted notion of repository
            access, making it easy for people to implement new network
            mechanisms.  Subversion can plug into the Apache HTTP
            Server as an extension module.  This gives Subversion a
            big advantage in stability and interoperability, and
            instant access to existing features provided by that
            server&mdash;authentication, authorization, wire
            compression, and so on.  A more lightweight, standalone
            Subversion server process is also available.  This server
            speaks a custom protocol which can be easily tunneled over
            SSH.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Выбор средств доступа к хранилищу по сети</term>
        <listitem>
          <para>В Subversion используется абстракция доступа к
            хранилищу, что позволяет реализовывать самые разные сетевые
            механизмы доступа. Subversion может быть подключена к
            серверу HTTP Apache в виде модуля, что даёт ей огромное
            преимущество с точки зрения устойчивости работы и способности
            к взаимодействию, а также предоставляет прямой доступ к
            существующим возможностям этого сервера, включая
            установление личности, проверку прав доступа и сжатие
            информации при передаче. Кроме того, имеется лёгкий
            самостоятельный сервер Subversion, который использует
            собственный протокол взаимодействия с клиентами и может
            легко туннелировать данные через SSH.</para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Consistent data handling</term>
        <listitem>
          <para>Subversion expresses file differences using a binary
            differencing algorithm, which works identically on both
            text (human-readable) and binary (human-unreadable) files.
            Both types of files are stored equally compressed in the
            repository, and differences are transmitted in both
            directions across the network.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Единый способ работы с данными</term>
        <listitem>
          <para>Subversion обнаруживает различия между файлами с помощью
            специального бинарного алгоритма, который одинаково работает
            как с текстовыми, так и с бинарными файлами. Файлы
            записываются в хранилище в сжатом виде независимо от их
            типа, а различия между отдельными версиями могут
            передаваться по сети в обоих направлениях.</para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Efficient branching and tagging</term>
        <listitem>
          <para>The cost of branching and tagging need not be
            proportional to the project size.  Subversion creates
            branches and tags by simply copying the project, using a
            mechanism similar to a hard-link.  Thus these operations
            take only a very small, constant amount of time.
          </para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Эффективные ветки и метки</term>
        <listitem>
          <para>Плата за использование веток и меток не должна быть
            пропорциональна размеру проекта. Subversion создаёт ветки и
            метки путём простого копирования проекта, используя
            механизм, похожий на жёсткие ссылки в файловых системах.
            Благодаря этому, операции по созданию веток и меток занимают
            немного времени.
          </para>
        </listitem>
      </varlistentry>

      <!-- @ENGLISH {{{
      <varlistentry>
        <term>Hackability</term>
        <listitem>
          <para>Subversion has no historical baggage; it is
            implemented as a collection of shared C libraries with
            well-defined APIs.  This makes Subversion extremely
            maintainable and usable by other applications and
            languages.</para>
        </listitem>
      </varlistentry>
      @ENGLISH }}} -->
      <varlistentry>
        <term>Дружелюбность по отношению к разработчикам</term>
        <listitem>
          <para>Subversion не имеет исторического багажа. Она
            реализована в виде набора динамических библиотек на языке C,
            API которых хорошо известен. Это делает Subversion
            чрезвычайно удобной для сопровождения системой, пригодной
            для взаимодействия с другими приложениями и языками
            программирования.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.architecture">

    <!-- @ENGLISH {{{
    <title>Subversion's Architecture</title>
    @ENGLISH }}} -->
    <title>Архитектура Subversion</title>

    <!-- @ENGLISH {{{
    <para><xref linkend="svn.intro.architecture.dia-1"/> illustrates what one might
      call a <quote>mile-high</quote> view of Subversion's
      design.</para>
    @ENGLISH }}} -->
    <para>Общий взгляд на устройство Subversion показан на <xref
        linkend="svn.intro.architecture.dia-1"
        endterm="svn.intro.architecture.dia-1.prepositional-case"/>.</para>

    <figure id="svn.intro.architecture.dia-1">
      <!-- @ENGLISH {{{
      <title>Subversion's Architecture</title>
      @ENGLISH }}} -->
      <title>Архитектура Subversion</title>
      <graphic fileref="images/ch01dia1.png"/>
    </figure>

    <!-- @ENGLISH {{{
    <para>On one end is a Subversion repository that holds all of your
      versioned data.  On the other end is your Subversion client
      program, which manages local reflections of portions of that
      versioned data (called <quote>working copies</quote>).  Between
      these extremes are multiple routes through various Repository
      Access (RA) layers.  Some of these routes go across computer
      networks and through network servers which then access the
      repository.  Others bypass the network altogether and access the
      repository directly.</para>
    @ENGLISH }}} -->
    <para>На одной стороне схемы изображено хранилище Subversion, в
      котором хранится информация с версиями. На противоположной стороне
      показана программа-клиент Subversion, которая управляет локальными
      отражениями различных фрагментов этих данных (также называемыми
      <quote>рабочими копиями</quote>). Между этими сторонами проложены
      различные маршруты, проходящие через разные слои доступа к
      хранилищу<footnote><para>Repository Access (RA)
          layers</para></footnote>. Некоторые из этих маршрутов
      используют компьютерные сети и сетевые сервера, чтобы достичь
      хранилища, в то время как другие маршруты в сети не нуждаются и
      ведут к хранилищу напрямую.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.install">

    <!-- @ENGLISH {{{
    <title>Installing Subversion</title>
    @ENGLISH }}} -->
    <title>Установка Subversion</title>

    <!-- @ENGLISH {{{
    <para>Subversion is built on a portability layer called
      APR&mdash;the Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      as one of its network server programs, its dependence on APR
      <emphasis>does not</emphasis> mean that Apache is a required
      component.  APR is a standalone library useable by any
      application.  It does mean, however, that like Apache,
      Subversion clients and servers run on any operating system that
      the Apache httpd server runs on: Windows, Linux, all flavors of
      BSD, Mac OS X, Netware, and others.</para>
    @ENGLISH }}} -->
    <para>Subversion построена на портабельном слое под названием
      APR (the Apache Portable Runtime library). Библиотека APR предоставляет
      все интерфейсы, необходимые для функционирования Subversion под
      управлением различных операционных систем: доступ к жесткому диску,
      доступ к сети, управление памятью, и тому подобное. Не смотря на то,
      что Subversion может использовать Apache как сервер, ее зависимость
      от Apache <emphasis>не означает</emphasis> того, что Apache
      является необходимым компонентом. APR представляет собой отдельную
      библиотеку, которую может использовать любое приложение. Кроме прочего,
      это означает, что как и Apache, Subversion клиенты и серверы работают
      на любой операционной системе на которой работает httpd сервер Apache:
      Windows, Linux, все разновидности BSD, MacOS X, Netware и другие.
    </para>

    <!-- @ENGLISH {{{
    <para>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's website
      (<ulink url="http://subversion.tigris.org"/>) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion.</para>
    @ENGLISH }}} -->
    <para>Наиболее простой способ получить Subversion - скачать бинарный
      пакет, собранный для вашей операционной системы. Как правило, эти
      пакеты присланные волонтерами, доступны для загрузки с веб-сайта
      Subversion (<ulink url="http://subversion.tigris.org"/>). Сайт обычно
      содержит графический инсталлятор для пользователей операционных
      систем Microsoft. Если вы используете Unix-подобную ОС то для получения
      Subversion вы можете использовать пакетную систему, специфичную для
      вашей системы (RPM, DEB, ports tree и т. д.).
    </para>

    <!-- @ENGLISH {{{
    <para>Alternately, you can build Subversion directly from source
      code.  From the Subversion website, download the latest
      source-code release.  After unpacking it, follow the
      instructions in the <filename>INSTALL</filename> file to build
      it.  Note that a released source package contains everything you
      need to build a command-line client capable of talking to a
      remote repository (in particular, the apr, apr-util, and neon
      libraries).  But optional portions of Subversion have many other
      dependencies, such as Berkeley DB and possibly Apache httpd.  If
      you want to do a complete build, make sure you have all of the
      packages documented in the <filename>INSTALL</filename> file.
      If you plan to work on Subversion itself, you can use your
      client program to grab the latest, bleeding-edge source code.
      This is documented in <xref
      linkend="svn.developer.contrib.get-code"/>.</para>
    @ENGLISH }}} -->
    <para>В качестве альтернативного варианта вы можете построить Subversion
      прямо из исходного кода. Закачайте с web-сайта Subversion последний
      source-code релиз. После его распаковки для его сборки
      следуйте инструкциям в файле <filename>INSTALL</filename>. Обратите
      внимание, что такой пакет содержит все необходимое для сборки CLI-клиента
      способного работать с удаленным хранилищем (обычно это библиотеки apr,
      apr-util и  neon). Однако некоторые опциональные части Subversion имеют
      много других зависимостей, таких как Berkeley DB и возможно Apache httpd.
      Если вы хотите выполнить полную сборку, убедитесь, что у вас есть все
      пакеты, указанные в файле <filename>INSTALL</filename>. Если вы хотите
      самостоятельно поработать над Subversion вы можете при помощи вашей
      клиентской программы вытащить самую последнюю версию исходного кода. Как
      это сделать описано в <xref linkend="svn.developer.contrib.get-code"/>.
    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.components">

    <!-- @ENGLISH {{{
    <title>Subversion's Components</title>
    @ENGLISH }}} -->
    <title>Компоненты Subversion</title>

    <!-- @ENGLISH {{{
    <para>Subversion, once installed, has a number of different
      pieces.  The following is a quick overview of what you get.
      Don't be alarmed if the brief descriptions leave you scratching
      your head&mdash;there are <emphasis>plenty</emphasis> more pages
      in this book devoted to alleviating that confusion.</para>
    @ENGLISH }}} -->
    <para>Установленная Subversion имеет определенное количество компонентов.
      Ниже перечисленное - краткий обзор того, что вы получаете. Не тревожьтесь
      если краткие описания заставляют вас чесать затылок, в этой книге есть
      еще <emphasis>много</emphasis> страниц, посвященных облегчению
      этого беспорядка.
    </para>

    <variablelist>
      <varlistentry>
        <term>svn</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>The command-line client program.</para>
          @ENGLISH }}} -->
          <para>CLI-клиент.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnversion</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A program for reporting the state (in terms of
            revisions of the items present) of a working copy.</para>
          @ENGLISH }}} -->
          <para>Программа показывающая состояние (в пределах ревизий
            существующих элементов) рабочей копии.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnlook</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A tool for inspecting a Subversion repository.</para>
          @ENGLISH }}} -->
          <para>Инструмент для контроля Subversion хранилища.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnadmin</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A tool for creating, tweaking or repairing a Subversion
            repository.</para>
          @ENGLISH }}} -->
          <para>Инструмент для создания, настройки или восстановления
            Subversion хранилища.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svndumpfilter</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A program for filtering Subversion repository dump
            streams.</para>
          @ENGLISH }}} -->
          <para>Программа для фильтрации дамповых потоков
            Subversion хранилища.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mod_dav_svn</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A plug-in module for the Apache HTTP Server, used to
            make your repository available to others over a
            network.</para>
          @ENGLISH }}} -->
          <para>Подключаемый модуль для HTTP сервера Apache, использующийся
            для предоставления сетевого доступа к вашему хранилищу.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnserve</term>
        <listitem>
          <!-- @ENGLISH {{{
          <para>A custom standalone server program, runnable as a
            daemon process or invokable by SSH; another way to make
            your repository available to others over a network.</para>
          @ENGLISH }}} -->
          <para>Собственный отдельный сервер, запускается как
            процесс-демон и доступен посредством SSH; еще один способ
            для предоставления сетевого доступа к хранилищу.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <!-- @ENGLISH {{{
    <para>Assuming you have Subversion installed correctly, you should
      be ready to start.  The next two chapters will walk you through
      the use of <command>svn</command>, Subversion's command-line client
      program.</para>
    @ENGLISH }}} -->
    <para>При условии корректно установленной Subversion вы готовы к старту.
      Следующие две главы описывают использование <command>svn</command>,
      CLI-клиента Subversion.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.quickstart">

    <!-- @ENGLISH {{{
    <title>A Quick Start</title>
    @ENGLISH }}} -->
    <title>Быстрый старт</title>

    <!-- @ENGLISH {{{
    <para>Some people have trouble absorbing a new technology by
      reading the sort of <quote>top down</quote> approach provided by
      this book.  This section is a very short introduction to
      Subversion, and is designed to give <quote>bottom up</quote>
      learners a fighting chance.  If you prefer to learn by
      experimentation, the following demonstration will get you up and
      running.  Along the way, we give links to the relevant chapters
      of this book.</para>
    @ENGLISH }}} -->
    <para>Некоторые испытывают трудности поглощения новой технологии
      читая приближение <quote>с верху вниз</quote>, предлагаемое этой
      книгой. Этот раздел представляет собой очень короткое введение в
      Subversion и предназначен для того, что бы помочь изучающим
      <quote>снизу вверх</quote>. Если вы из тех, кто предпочитает
      учиться на экспериментах то последующая демонстрация поможет
      вам начать. По ходу дела мы давали ссылки на соответствующие
      главы книги.
    </para>

    <!-- @ENGLISH {{{
    <para>If you're new to the entire concept of version control or to
      the <quote>copy-modify-merge</quote> model used by both CVS and
      Subversion, then you should read <xref linkend="svn.basic"/>
      before going any further.</para>
    @ENGLISH }}} -->
    <para>Если вы не совсем знакомы с концепциями контроля версий или
      моделью <quote>копирование-изменение-слияние</quote>, используемой
      как CVS так и Subversion, перед тем как идти дальше, вам нужно
      прочитать <xref linkend="svn.basic"/>.</para>

    <note>
      <!-- @ENGLISH {{{
      <para>The following example assumes that you have
        <command>svn</command>, the Subversion command-line client,
        and <command>svnadmin</command>, the administrative tool,
        ready to go.  It also assumes you are using Subversion 1.2 or
        later (run <command>svn -&#64738;-version</command> to check.)</para>
      @ENGLISH }}} -->
      <para>Последующий пример предполагает наличие у вас работающих
        Subversion клиента для командной строки <command>svn</command> и
        инструмента администрирования <command>svnadmin</command>.
        Кроме этого он рассчитан на то, что вы используете Subversion
        версии 1.2 или более поздней (для того, чтобы это проверить,
        выполните <command>svn --version</command>).</para>
    </note>

    <!-- @ENGLISH {{{
    <para>Subversion stores all versioned data in a central
      repository.  To begin, create a new repository:</para>
    @ENGLISH }}} -->
    <para>Subversion хранит всю версионированную информацию в
      центральном хранилище. Для начала, создадим новое
      хранилище:</para>

    <screen>
$ svnadmin create /path/to/repos
$ ls /path/to/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>

    <!-- @ENGLISH {{{
    <para>This command creates a new directory
      <filename>/path/to/repos</filename> which contains a Subversion
      repository.  This new directory contains (among other things) a
      collection of database files.  You won't see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see
      <xref linkend="svn.reposadmin"/>.</para>
    @ENGLISH }}} -->
    <para>Эта команда создает новую директорию
      <filename>/path/to/repos</filename> содержащую Subversion
      хранилище. Убедитесь, что эта директория находится на локальном
      диске, <emphasis>не</emphasis> на сетевой шаре. Преимущественно в
      эта новая директория (кроме прочего) содержит набор файлов базы данных.
      Вы не увидите своих версионированных файлов если вы загляните внутрь.
      Больше информации о создании и поддержке хранилища ищите в
      <xref linkend="svn.reposadmin"/>.</para>

    <!-- @ENGLISH {{{
    <para>Subversion has no concept of a <quote>project</quote>.  The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  The merits of each approach are discussed
      in <xref linkend="svn.reposadmin.projects.chooselayout"/>.
      Either way, the repository only manages files and directories,
      so it's up to humans to interpret particular directories
      as <quote>projects</quote>.  So while you might see references
      to projects throughout this book, keep in mind that we're only
      ever talking about some directory (or collection of directories)
      in the repository.</para>
    @ENGLISH }}} -->
    <para>У Subversion нет понятия <quote>проект</quote>. Хранилище
      является просто виртуальной версионированной файловой системой,
      большое дерево файлов, которое может содержать все, что угодно.
      Одни администраторы предпочитают держать в хранилище только
      один проект, другие держать в хранилище множество проектов,
      размещая их в отдельных директориях. Достоинства каждого из
      подходов рассмотрены в  <xref
      linkend="svn.reposadmin.projects.chooselayout"/>. В любом случае,
      хранилище управляет только файлами и директориями, оставляя
      за человеком право интерпретировать отдельные директории
      как <quote>проекты</quote>. Поэтому, если в тексте книги вы
      встретите упоминание проекта, помните, что имеется в виду
      просто директория (или несколько директорий) хранилища.</para>

    <!-- @ENGLISH {{{
    <para>In this example, we assume that you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing them into a single directory
      called <filename>myproject</filename> (or whatever you wish).
      For reasons that will be clear later (see
      <xref linkend="svn.branchmerge"/>), your project's tree
      structure should contain three top-level directories
      named <filename>branches</filename>,
      <filename>tags</filename>, and
      <filename>trunk</filename>.  The <filename>trunk</filename>
      directory should contain all of your data,
      while <filename>branches</filename>
      and <filename>tags</filename> directories are empty:</para>
    @ENGLISH }}} -->
    <para>В этом примере мы подразумеваем наличие у вас какого то проекта
      (набора файлов или директорий), который вы хотите импортировать в
      только что созданное Subversion хранилище. Начните с объединения их
      в отдельной директории названой <filename>myproject</filename>
      (или как-то иначе). По причинам, которые будут ясны позже (см.
      <xref linkend="svn.branchmerge"/>), ваше дерево проекта должно содержать
      три директории верхнего уровня с названиями
      <filename>branches</filename>, <filename>tags</filename> и
      <filename>trunk</filename>. Вся ваша информация должна находиться в
       директории <filename>trunk</filename>, а директории
      <filename>branches</filename> и <filename>tags</filename> должны быть
      пустыми:</para>

    <screen>
/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     &hellip;
</screen>

    <!-- @ENGLISH {{{
    <para>The <filename>branches</filename>, <filename>tags</filename>,
      and <filename>trunk</filename> subdirectories aren't actually
      required by Subversion.  They're merely a popular convention
      that you'll most likely want to use later on.</para>

    <para>Once you have your tree of data ready to go, import it into
      the repository with the <command>svn import</command> command
      (see <xref linkend="svn.tour.other.import"/>):</para>
    @ENGLISH }}} -->
    <para>Использовать поддиректории <filename>branches</filename>,
      <filename>tags</filename> и <filename>trunk</filename> не 
      обязательно. Просто такой подход чаще всего используется и
      вероятнее всего в дальнейшем вы будете использовать именно
      его.</para>

    <para>Как только вы получите готовое дерево данных, импортируйте его
      в хранилище при помощи команды <command>svn import</command>
      (см. <xref linkend="svn.tour.other.import"/>):</para>

    <screen>
$ svn import /tmp/myproject file:///path/to/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
&hellip;
Committed revision 1.
$
</screen>

    <!-- @ENGLISH {{{
    <para>Now the repository contains this tree of data.  As mentioned
      earlier, you won't see your files by directly peeking into the
      repository;  they're all stored within a database.  But the
      repository's imaginary filesystem now contains a top-level
      directory named <filename>myproject</filename>, which in turn
      contains your data.</para>
    @ENGLISH }}} -->
    <para>Теперь в хранилище находится это дерево данных. Как было
      отмечено ранее, вы не увидите своих файлов если загляните в
      хранилище напрямую; все хранится в базе данных. Однако сейчас
      воображаемая файловая системы хранилища имеет директорию верхнего
      уровня с названием <filename>myproject</filename> которая
      содержит вашу информацию.</para>

    <!-- @ENGLISH {{{
    <para>Note that the original <filename>/tmp/myproject</filename>
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  In order to
      start manipulating repository data, you need to create a new
      <quote>working copy</quote> of the data, a sort of private
      workspace.  Ask Subversion to <quote>check out</quote> a working
      copy of the <filename>myproject/trunk</filename> directory in
      the repository:</para>
    @ENGLISH }}} -->
    <para>Обратите внимание на то, что первоначальная директория
      <filename>/tmp/project</filename> остается без изменений;
      Subversion о ней не знает. (Фактически, при желании, вы можете даже
      удалить этот каталог.) Чтобы начать работать с информацией хранилища
      вам нужно создать новую <quote>рабочую копию</quote> информации,
      своего рода частное рабочее пространство. Попросите Subversion
      создать рабочую копию директории <filename>myproject/trunk</filename>
      хранилища:</para>

    <screen>
$ svn checkout file:///path/to/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
&hellip;
Checked out revision 1.
</screen>

    <!-- @ENGLISH {{{
    <para>Now you have a personal copy of part of the repository in a
      new directory named <filename>myproject</filename>.  You can edit
      the files in your working copy and then commit those changes
      back into the repository.</para>
    @ENGLISH }}} -->
    <para>Сейчас у вас в новой директории <filename>myproject</filename>
      есть личная копия части хранилища. В рабочей копии вы можете
      редактировать файлы, а затем зафиксировать внесенные изменения
      в хранилище.</para>

    <itemizedlist>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Enter your working copy and edit a file's
          contents.</para>
        @ENGLISH }}} -->
        <para>Откройте свою рабочую копию и отредактируйте
          содержимое файлов.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn diff</command> to see unified diff
          output of your changes.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn diff</command> чтобы увидеть
          объединенный diff внесенных изменений.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn commit</command> to commit the new
          version of your file to the repository.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn commit</command> для фиксации
          новой версии ваших файлов в хранилище.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn update</command> to bring your working
          copy <quote>up-to-date</quote> with the repository.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn update</command> для приведения
          рабочей копии в <quote>актуальное</quote> состояние по
          отношению к хранилищу.</para>
      </listitem>
    </itemizedlist>

    <!-- @ENGLISH {{{
    <para>For a full tour of all the things you can do with your
      working copy, read <xref linkend="svn.tour"/>.</para>
    @ENGLISH }}} -->
    <para>Для получения полного списка возможных действий с рабочей копией
      прочтите <xref linkend="svn.tour"/>.</para>

    <!-- @ENGLISH {{{
    <para>At this point, you have the option of making your repository
      available to others over a network.  See <xref
      linkend="svn.serverconfig"/> to learn about the different sorts of
      server processes available and how to configure them.</para>
    @ENGLISH }}} -->
    <para>После этого вы можете сделать ваше хранилище доступным
      для других через сеть. См. <xref linkend="svn.serverconfig"/> для
      знакомства с различными типами доступных серверных процессов
      и методами их настройки.</para>

  </sect1>


</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
vim: tw=78:ft=svnbook
-->

