<?xml version="1.0" encoding="UTF-8"?>
<chapter id="svn.tour">

  <!-- @ENGLISH {{{
  <title>Guided Tour</title>
  @ENGLISH }}} -->
  <title>Экскурсия по Subversion</title>
  <!-- See also svn.preface.organization -->

  <simplesect>

    <!-- @ENGLISH {{{
    <para>Now we will go into the details of using Subversion.  By the
      time you reach the end of this chapter, you will be able to
      perform almost all the tasks you need to use Subversion in a
      normal day's work.  You'll start with an initial checkout of
      your code, and walk through making changes and examining those
      changes.  You'll also see how to bring changes made by others
      into your working copy, examine them, and work through any
      conflicts that might arise.</para>
    @ENGLISH }}} -->
    <para>Теперь перейдем к более тесной работе с Subversion. К тому
      моменту, когда вы дойдёте до конца этой главы, вы сможете
      выполнить практически все задачи, возникающие при повседневном
      использовании Subversion. Вы начнете с
      первоначального создания рабочей копии вашего кода и пройдете
      через внесение изменений и проверку этих изменений. Вы познакомитесь
      с тем, как внедрить изменения, сделанные другими, в вашу рабочую копию
      и проверить их, а также сможете решить возможные конфликты.</para>

    <!-- @ENGLISH {{{
    <para>Note that this chapter is not meant to be an exhaustive list
      of all Subversion's commands&mdash;rather, it's a conversational
      introduction to the most common Subversion tasks you'll
      encounter.  This chapter assumes that you've read and understood
      <xref linkend="svn.basic"/> and are familiar with the general
      model of Subversion.  For a complete reference of all commands,
      see <xref linkend="svn.ref"/>.</para>
    @ENGLISH }}} -->
    <para>Обратите внимание на то, что эта глава не ставит цели быть
      всеобъемлющим списком всех команд Subversion &mdash; скорее это
      описательное введение в наиболее вероятные задачи, с которыми вы можете
      столкнуться. Эта глава предполагает, что вы прочитали и поняли <xref
      linkend="svn.basic"/> и хорошо разобрались с общей моделью Subversion.
      За подробным описанием всех команд обратитесь в <xref
      linkend="svn.ref"/>.</para>

  </simplesect>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
    <!-- @ENGLISH {{{
    <title>Help!</title>
    @ENGLISH }}} -->
    <title>Читайте справку!</title>

    <!-- @ENGLISH {{{
    <para>Before reading on, here is the most important command you'll
      ever need when using Subversion: <command>svn help</command>.
      The Subversion command-line client is
      self-documenting&mdash;at any time, a quick <command>svn help
      &lt;subcommand&gt;</command> will describe the syntax, switches,
      and behavior of the <command>subcommand</command>.</para>
    @ENGLISH }}} -->
    <para>Перед тем как продолжить, запомните самую главную из всех команд
      Subversion: <command>svn help</command>. Клиент для командной строки
      Subversion является самодокуметируемым &mdash; в любой момент команда
      <command>svn help &lt;subcommand&gt;</command> покажет описание
      синтаксиса, параметров и поведения подкоманды
      <command>subcommand</command>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.import">
    <!-- @ENGLISH {{{
    <title>Import</title>
    @ENGLISH }}} -->
    <title>Импорт</title>

    <!-- @ENGLISH {{{
    <para>You use <command>svn import</command> to import a new
      project into a Subversion repository.  While this is most likely
      the very first thing you will do when you set up your Subversion
      server, it's not something that happens very often.  For a
      detailed description of import, see <xref
      linkend="svn.tour.other.import"/> later in this chapter.</para>
    @ENGLISH }}} -->
    <para>Для импортирования нового проекта в Subversion-хранилище
      используется <command>svn import</command>. В то время как,
      вероятно, это первое, что вы делаете при настройке Subversion-сервера,
      выполняется это не так часто. Подробное описание этой команды см.
      <xref linkend="svn.tour.other.import"/> далее в этой главе.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.revs">
    <!-- @ENGLISH {{{
    <title>Revisions: Numbers, Keywords, and Dates, Oh My!</title>
    @ENGLISH }}} -->
    <title>Правки: Номера, Ключевые слова и Даты, Oh My!</title>

    <!-- @ENGLISH {{{
    <para>Before we go on, you should know a bit about how to identify
      a particular revision in your repository.  As you learned in
      <xref linkend="svn.basic.in-action.revs"/>, a revision is a
      <quote>snapshot</quote> of the repository at a particular moment
      in time.  As you continue to commit and grow your repository,
      you need a mechanism for identifying these snapshots.</para>
    @ENGLISH }}} -->
    <para>Перед тем как продолжить, вам нужно немного узнать о том, как
      идентифицировать отдельную правку в хранилище. Как вы узнали в
      <xref linkend="svn.basic.in-action.revs"/> правка представляет собой
      <quote>снимок</quote> хранилища в конкретный момент времени.
      По мере продолжения фиксаций и увеличения хранилища вам потребуется
      механизм для идентифицированния этих снимков.</para>

    <!-- @ENGLISH {{{
    <para>You specify these revisions by using the
      <option>&ndash;-revision</option> (<option>-r</option>) switch plus
      the revision you want (<command>svn &ndash;-revision REV</command>) or
      you can specify a range by separating two revisions with a colon
      (<command>svn &ndash;-revision REV1:REV2</command>).  And Subversion
      lets you refer to these revisions by number, keyword, or
      date.</para>
    @ENGLISH }}} -->
    <para>Для указания этих правок используется ключ
      <option>--revision</option> (<option>-r</option>) плюс нужная
      правка; также можно указать диапазон правок, разделяя начало и конец
      диапазона двоеточием: 
      (<command>svn --revision REV1:REV2</command>). Subversion
      позволяет обращаться к правкам по номеру, ключевому слову или
      дате.</para>

    <!-- =============================================================== -->
    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.numbers">
      <!-- @ENGLISH {{{
      <title>Revision Numbers</title>
      @ENGLISH }}} -->
      <title>Номера правок</title>

      <!-- @ENGLISH {{{
      <para>When you create a new Subversion repository, it begins its
        life at revision zero and each successive commit increases the
        revision number by one.  After your commit completes, the
        Subversion client informs you of the new revision
        number:</para>
      @ENGLISH }}} -->
      <para>Когда вы создаете новое хранилище Subversion, оно получает
        номер правки "ноль", каждая последующая фиксация увеличивает
        этот номер на единицу. Каждый раз по завершении фиксации клиент
        Subversion сообщает вам новый номер правки:</para>

      <screen>
$ svn commit --message "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>

      <!-- @ENGLISH {{{
      <para>If at any point in the future you want to refer to that
        revision (we'll see how and why we might want to do that later
        in this chapter), you can refer to it as
        <quote>3</quote>.</para>
      @ENGLISH }}} -->
      <para>В будущем, в любой момент времени, если вам нужно будет сослаться
        на эту правку (как и почему может возникнуть такая необходимость,
        будет видно дальше по тексту) вы можете сослаться на нее как на
        <quote>3</quote>.</para>

    </sect2>

    <!-- =============================================================== -->
    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.keywords">
      <!-- @ENGLISH {{{
      <title>Revision Keywords</title>
      @ENGLISH }}} -->
      <title>Ключевые слова правок</title>

      <!-- @ENGLISH {{{
      <para>The Subversion client understands a number of
        <firstterm>revision keywords</firstterm>.  These keywords
        can be used instead of integer arguments to the
        <option>&ndash;-revision</option> switch, and are resolved into
        specific revision numbers by Subversion:</para>
      @ENGLISH }}} -->
      <para>Subversion клиент понимает определенное количество
        <firstterm>ключевых слов правок</firstterm>. Эти ключевые слова
        могут быть использованы в место цифровых аргументов в параметре
        <option>--revision</option> и будут преобразованы Subversion
        в конкретные номера правок:</para>

      <note>
        <!-- @ENGLISH {{{
        <para>Each directory in your working copy contains an
          administrative subdirectory called
          <filename>.svn</filename>.  For every file in a directory,
          Subversion keeps a copy of each file in the administrative
          area.  This copy is an unmodified (no keyword expansion, no
          end-of-line translation, no nothing) copy of the file as it
          existed in the last revision (called the <quote>BASE</quote>
          revision) that you updated it to in your working copy.  We
          refer to this file as the <firstterm>pristine
          copy</firstterm> or <firstterm>text-base</firstterm> version
          of your file, and it's always an exact byte-for-byte copy of
          the file as it exists in the repository.</para>
        @ENGLISH }}} -->
        <para>В каждом каталоге рабочей копии есть служебный
          подкаталог <filename>.svn</filename>. Для каждого файла в
          каталоге Subversion сохраняет копию этого файла в
          служебной папке. Эта копия является немодифицированной
          (без раскрытия ключевых слов, без преобразования концовок строк,
          без чего-либо другого) копией файла какой он есть в последней
          правке (называемой <quote>BASE</quote>) до которой вы обновили
          его в вашей рабочей копии. Мы обращаемся к этому файлу, как
          к <firstterm>первоисточнику</firstterm> или
          <firstterm>базовой</firstterm> версии вашего файла; он всегда
          является точной побайтовой копией файла, находящегося в
          хранилище.</para>
        </note>

      <variablelist>

        <varlistentry>
          <term>HEAD</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>The latest (or <quote>youngest</quote>) revision in
              the repository.</para>
            @ENGLISH }}} -->
            <para>Последняя (или <quote>самая новая</quote>) правка
              хранилища</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>BASE</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>The revision number of an item in a working copy.
              If the item has been locally modified, the <quote>BASE
              version</quote> refers to the way the item appears
              without those local modifications.</para>
            @ENGLISH }}} -->
            <para>Номер правки элемента рабочей копии. Если элемент
              редактировался, то <quote>BASE версия</quote> соответствует тому,
              как элемент выглядел до редактирования.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>COMMITTED</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>The most recent revision prior to, or equal to,
              <literal>BASE</literal>, in which an item changed.</para>
            @ENGLISH }}} -->
            <para>Правка, в которой элемент последний раз редактировался
              (предшествующая либо равная <literal>BASE</literal>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>PREV</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>The revision immediately <emphasis>before</emphasis>
              the last revision in which an item changed.
              (Technically, <literal>COMMITTED</literal> - 1.)</para>
            @ENGLISH }}} -->
            <para>Правка, <emphasis>предшествующая</emphasis> последней
              правке, в которой элемент был изменен. (Технически,
              <literal>COMMITTED</literal> - 1.)</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <note>
        <!-- @ENGLISH {{{
        <para><literal>PREV</literal>, <literal>BASE</literal>, and
          <literal>COMMITTED</literal> can be used to refer to local
          paths, but not to URLs.</para>
        @ENGLISH }}} -->
        <para><literal>PREV</literal>, <literal>BASE</literal> и
          <literal>COMMITTED</literal> могут использоваться при обращении по
          локальным путям, но не по URL.</para>
      </note>

      <!-- @ENGLISH {{{
      <para>Here are some examples of revision keywords in action.
        Don't worry if the commands don't make sense yet; we'll be
        explaining these commands as we go through the chapter:</para>
      @ENGLISH }}} -->
      <para>Ниже приведено несколько примеров использования ключевых слов
        правок. Не волнуйтесь, если смысл команд пока не понятен; в дальнейшем
        мы объясним эти команды:</para>

      <screen>
$ svn diff --revision PREV:COMMITTED foo.c
<!-- @ENGLISH {{{
# shows the last change committed to foo.c
@ENGLISH }}} -->
# показать последнее изменение зафиксированное для foo.c

$ svn log --revision HEAD
<!-- @ENGLISH {{{
# shows log message for the latest repository commit
@ENGLISH }}} -->
# показать лог для последней фиксации хранилища

$ svn diff --revision HEAD
<!-- @ENGLISH {{{
# compares your working file (with local changes) to the latest version
# in the repository
@ENGLISH }}} -->
# сравнить ваш рабочый файл (с учетом локальных изменений)
# с последней правкой в хранилище

$ svn diff --revision BASE:HEAD foo.c
<!-- @ENGLISH {{{
# compares your <quote>pristine</quote> foo.c (no local changes) with the 
# latest version in the repository
@ENGLISH }}} -->
# сравнить ваш <quote>исходный</quote> foo.c (без учета локальных
# изменений) с последней версией в хранилище

$ svn log --revision BASE:HEAD
<!-- @ENGLISH {{{
# shows all commit logs since you last updated
@ENGLISH }}} -->
# показать все логи фиксаций со времени вашего последнего обновления

$ svn update --revision PREV foo.c
<!-- @ENGLISH {{{
# rewinds the last change on foo.c
# (foo.c's working revision is decreased)
@ENGLISH }}} -->
# отменить последние изменения в foo.c
# (рабочая правка foo.c понижается)
</screen>

      <!-- @ENGLISH {{{
      <para>These keywords allow you to perform many common (and
        helpful) operations without having to look up specific
        revision numbers or remember the exact revision of your
        working copy.</para>
      @ENGLISH }}} -->
      <para>Эти ключевые слова позволят вам выполнять многие часто
        используемые (и полезные) операции без необходимости обращаться к
        конкретным номерам правок или точно помнить номер правке своей рабочей
        копии.</para>

    </sect2>

    <!-- =============================================================== -->
    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.dates">
      <!-- @ENGLISH {{{
      <title>Revision Dates</title>
      @ENGLISH }}} -->
      <title>Даты правок</title>

      <!-- @ENGLISH {{{
      <para>Anywhere that you specify a revision number or revision
        keyword, you can also specify a date
        inside curly braces <quote>{}</quote>.  You can even access
        a range of changes in the repository using both dates and
        revisions together!</para>
      @ENGLISH }}} -->
      <para>Везде, где вы указываете номер правки или ключевое слово,
        вы так же можете использовать и дату, указав ее в фигурных скобках
        <quote>{}</quote>. Вы даже можете получить доступ к диапазону
        изменений в хранилище, указывая даты и номера
        правок одновременно!</para>

      <!-- @ENGLISH {{{
      <para>Here are examples of the date formats that Subversion
        accepts.  Remember to use quotes around any date that contains
        spaces.</para>
      @ENGLISH }}} -->
      <para>Вот примеры форматов, используемых для указания даты,
        которые принимает Subversion. Не забывайте использовать кавычки
        при написании даты, содержащей пробелы.</para>

      <screen>
$ svn checkout --revision {2002-02-17}
$ svn checkout --revision {15:30}
$ svn checkout --revision {15:30:00.200000}
$ svn checkout --revision {"2002-02-17 15:30"}
$ svn checkout --revision {"2002-02-17 15:30 +0230"}
$ svn checkout --revision {2002-02-17T15:30}
$ svn checkout --revision {2002-02-17T15:30Z}
$ svn checkout --revision {2002-02-17T15:30-04:00}
$ svn checkout --revision {20020217T1530}
$ svn checkout --revision {20020217T1530Z}
$ svn checkout --revision {20020217T1530-0500}
&hellip;
</screen>

      <!-- @ENGLISH {{{
      <para>When you specify a date as a revision, Subversion finds
        the most recent revision of the repository as of that
        date:</para>
      @ENGLISH }}} -->
      <para>Когда вы указываете в качестве правки дату, Subversion
        найдет правку наиболее соответствующую запрошенной дате:</para>

      <screen>
$ svn log --revision {2002-11-28}
------------------------------------------------------------------------
r12 | ira | 2002-11-27 12:31:51 -0600 (Wed, 27 Nov 2002) | 6 lines
&hellip;
</screen>

      <sidebar>
        <!-- @ENGLISH {{{
        <title>Is Subversion a Day Early?</title>
        @ENGLISH }}} -->
        <title>Is Subversion a Day Early?</title>

        <!-- @ENGLISH {{{
        <para>If you specify a single date as a revision without
          specifying a time of day (for example
          <literal>2002-11-27</literal>), you may think that Subversion
          should give you the last revision that took place on the
          27th of November.  Instead, you'll get back a revision from
          the 26th, or even earlier.  Remember that Subversion will
          find the <emphasis>most recent revision of the
          repository</emphasis> as of the date you give.  If you give
          a date without a timestamp, like
          <literal>2002-11-27</literal>, Subversion assumes a time of
          00:00:00, so looking for the most recent revision won't
          return anything on the day of the 27th.</para>
        @ENGLISH }}} -->
        <para>Указав при обращении к правке только дату, без указания
          времени (например, <literal>2002-11-27</literal>), возможно
          вы подумаете, что Subversion выдаст вам последнюю правку за 27
          ноября. А вместо этого можете получить правку за 26 число или
          даже более раннюю. Помните, что Subversion будет искать
          <emphasis>наиболее отвечающую</emphasis> указанной вами дате
          правку хранилища. Если вы укажите дату без указания времени,
          например <literal>2002-11-27</literal>, Subversion примет за
          временную метку 00:00:00 и таким образом поиск ближайшей к 27
          числу ревизии не даст ничего относящегося к 27 ноября.</para>

        <!-- @ENGLISH {{{
        <para>If you want to include the 27th in your search, you can
          either specify the 27th with the time (<literal>{"2002-11-27
          23:59"}</literal>), or just specify the next day
          (<literal>{2002-11-28}</literal>).</para>
        @ENGLISH }}} -->
        <para>Если вам необходимо найти именно 27 число, вы можете либо
          указать 27 число с временной меткой (<literal>{"2002-11-27
          23:59"}</literal>) либо просто использовать в запросе следующий
          день (<literal>{2002-11-28}</literal>).</para>

      </sidebar>

      <!-- @ENGLISH {{{
      <para>You can also use a range of dates.  Subversion will find
        all revisions between both dates, inclusive:</para>
      @ENGLISH }}} -->
      <para>Кроме того, вы можете использовать диапазоны дат. Subversion
        найдет все правки между обеими датами включительно:</para>

      <screen>
$ svn log --revision {2002-11-20}:{2002-11-29}
&hellip;
</screen>

      <!-- @ENGLISH {{{
      <para>As we pointed out, you can also mix dates and revisions:</para>
      @ENGLISH }}} -->
      <para>Как мы уже говорили, вы можете использовать даты и номера
        правок одновременно:</para>

      <screen>
$ svn log --revision {2002-11-20}:4040
</screen>

      <!-- @ENGLISH {{{
      <para>Users should be aware of a subtlety that can become quite
        a stumbling-block when dealing with dates in Subversion.  Since
        the timestamp of a revision is stored as a property of the
        revision&mdash;an unversioned, modifiable
        property&mdash;revision timestamps can be changed to represent
        complete falsifications of true chronology, or even removed
        altogether.  This will wreak havoc on the internal
        date-to-revision conversion that Subversion performs.</para>
      @ENGLISH }}} -->
      <para>Пользователи должны осознавать тонкость, которая может стать
        камнем преткновения при работе с Subversion. Так как временная метка
        правки сохраняется как свойство правки &mdash; как неотслеживаемое,
        изменяемое свойство правки &mdash; временная метка правки может
        быть изменена, что приведет к искажению истинной хронологии, или даже
        полной ее потере. Такие действия нарушат работу внутреннего механизма
        перевода даты в номер правки используемого Subversion.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
    <!-- @ENGLISH {{{
    <title>Initial Checkout</title>
    @ENGLISH }}} -->
    <title>Создание рабочей копии</title>

    <!-- @ENGLISH {{{
    <para>Most of the time, you will start using a Subversion
      repository by doing a <firstterm>checkout</firstterm> of your
      project.  Checking out a repository creates a copy of it on your
      local machine.  This copy contains the <literal>HEAD</literal>
      (latest revision) of the Subversion repository that you specify
      on the command line:</para>
    @ENGLISH }}} -->
    <para>Как правило, работа с хранилищем Subversion начинается с
      <firstterm>создания рабочей копии</firstterm> проекта.
      При создании рабочей копии на локальной машине создается копия
      хранилища. Эта копия содержит <literal>HEAD</literal> (последнюю
      правку) хранилища, указанного вами в командной строке:</para>


    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk
A  trunk/subversion.dsw
A  trunk/svn_check.dsp
A  trunk/COMMITTERS
A  trunk/configure.in
A  trunk/IDEAS
&hellip;
Checked out revision 2499.
</screen>

    <sidebar>
      <!-- @ENGLISH {{{
     <title>What's in a Name?</title>
      @ENGLISH }}} -->
      <title></title>

      <!-- @ENGLISH {{{
      <para>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
      @ENGLISH }}} -->
      <para>Subversion очень старается не ограничивать количество типов данных,
        которые можно поместить под контроль системы. Содержимое файлов и
        значения свойств хранятся и передаются в бинарном формате.
        О том, как объяснить Subversion, что для отдельного файла
        <quote>текстовые</quote> операции не имеют смысла, вы узнаете в разделе
        <xref linkend="svn.advanced.props.special.mime-type"/>. Однако есть
        ситуации, когда Subversion накладывает некоторые ограничения на хранимую
        информацию.</para>

      <!-- @ENGLISH {{{
      <para>Subversion internally handles certain bits of
        data&mdash;for example, property names, path names, and log
        messages&mdash;as UTF-8 encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
      @ENGLISH }}} -->
      <para>Внутри Subversion определенная информация &mdash; например,
        имена свойств, пути и лог-сообщения &mdash; обрабатывается как текст
        в кодировке UTF-8. Однако это вовсе не означает обязательного
        использования UTF-8 при работе с Subversion. В случае если
        преобразования между UTF-8 и локальной кодировкой на компьютере
        могут быть выполнены (что справедливо для большинства испульзуемых
        сегодня кодировок), как правило, Subversion-клиент выполняет эти
        преобразования легко и прозрачно для пользователя.
      </para>

      <!-- @ENGLISH {{{
      <para>In addition, path names are used as XML attribute values
        in WebDAV exchanges, as well in as some of Subversion's
        housekeeping files.  This means that path names can only
        contain legal XML (1.0) characters.  Subversion also prohibits
        TAB, CR, and LF characters in path names, so they aren't
        broken up in diffs, or in the output of commands like <xref
        linkend="svn.ref.svn.c.log"/> or <xref
        linkend="svn.ref.svn.c.status"/>.</para>
      @ENGLISH }}} -->
      <para>Кроме того, имена путей при WebDAV тразакциях используются как
        значения XML-атрибутов, также как и в некоторых собственных файлах
        Subversion. Это значит, что при указании путей могут
        использоваться только корректные для XML (1.0) символы. Так же при 
        указании путей Subversion запрещает использовать символы TAB, CR 
        и LF, что бы они не повреждали файлы различий и не искжали вывод 
        таких команд как <xref linkend="svn.ref.svn.c.log"/> или <xref
        linkend="svn.ref.svn.c.status"/>.</para>

      <!-- @ENGLISH {{{
      <para>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8, and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&mdash;it will automatically escape legal
        path characters as needed in URLs you type to create
        <quote>legally correct</quote> versions for internal
        use.</para>
      @ENGLISH }}} -->
      <para>Вам может показаться, что нужно помнить очень много
        всего, однако на практике эти ограничения не вызывают 
        сложностей. Если ваши локальные установки совместимы с UTF-8 и 
        вы не используете специальных символов при указании путей, то
        проблем при работе с Subversion у вас не возникнет. Клиент для 
        командной строки немного в этом помогает &mdash; он автоматически 
        корректирует недопустимые символы, встречающиеся в набранных URL,
        <quote>юридически правильными</quote> версиями для внутреннего 
        использования.</para>

      <!-- @ENGLISH {{{
      <para>Experienced users of Subversion have also developed a set
        of best-practice conventions for laying out paths in the
        repository.  While these aren't strict requirements like the
        syntax described above, they help to organize frequently
        performed tasks.  The <literal>/trunk</literal> part of URLs
        you'll find throughout this book is one of these conventions;
        we'll talk a lot more about it and related recommendations in
        <xref linkend="svn.branchmerge"/>.</para>
      @ENGLISH }}} -->
      <para>Кроме этого, опытные пользователи Subversion разработали 
        набор правил хорошего тона для организации структуры хранилища.
        Хотя эти правила и не являются такими же строгими требованиями, как 
        описанный выше синтаксис, они помогают при выполнении типовых 
        задач. Используемая по тексту книги часть пути
        <literal>/trunk</literal> является одним из таких правил; 
        подробнее об этой и других подобных рекомендациях мы поговорим в
        <xref linkend="svn.branchmerge"/>.</para>

    </sidebar>

    <!-- @ENGLISH {{{
    <para>Although the above example checks out the trunk directory,
      you can just as easily check out any deep subdirectory of a
      repository by specifying the subdirectory in the checkout
      URL:</para>
    @ENGLISH }}} -->
    <para>Хотя в приведенном примере рабочая копия создается на
      основе корневого каталога, вы можете легко создать рабочую копию на
      основе подкаталога любой степени вложенности, указав при
      создании рабочей копии подкаталог в URL:</para>

    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk/doc/book/tools
A  tools/readme-dblite.html
A  tools/fo-stylesheet.xsl
A  tools/svnbook.el
A  tools/dtd
A  tools/dtd/dblite.dtd
&hellip;
Checked out revision 2499.
</screen>

    <!-- @ENGLISH {{{
    <para>Since Subversion uses a <quote>copy-modify-merge</quote>
      model instead of <quote>lock-modify-unlock</quote> (see <xref
      linkend="svn.basic"/>), you're already able to start making
      changes to the files and directories in your working copy.  Your
      working copy is just like any other collection of files and
      directories on your system.  You can edit and change them, move
      them around, you can even delete the entire working copy and
      forget about it.</para>
    @ENGLISH }}} -->
    <para>Так как Subversion использует модель
      <quote>копирование-изменение-слияние</quote> вместо модели
      <quote>блокирование-изменение-разблокирование</quote> (см.
      <xref linkend="svn.basic"/>) вы уже можете начинать вносить
      изменения в файлы и каталоги своей рабочей копии. Ваша рабочая
      копия ничем не отличается от любого другого набора файлов на вашей
      системе. Вы можете редактировать и менять их, перемещать, вы даже
      можете полностью удалить рабочую копию и забыть о ней.</para>

      <note>
        <!-- @ENGLISH {{{
        <para>While your working copy is <quote>just like any other
          collection of files and directories on your system</quote>,
          you need to let Subversion know if you're going to be
          rearranging anything inside of your working copy.  If you
          want to copy or move an item in a working copy, you should
          use <command>svn copy</command> or <command>svn
          move</command> instead of the copy and move commands
          provided by your operating system.  We'll talk more about
          them later in this chapter.</para>
        @ENGLISH }}} -->
        <para>Несмотря на то, что рабочая копия выглядит <quote>как и любой
          другой набор файлов на вашей системе</quote> вы должны поставить в
          известность Subversion, если вы будете что-либо реорганизовывать в
          рабочей копии. Если вы хотите скопировать или переместить элемент в
          рабочей копии вы должны использовать команду <command>svn
          copy</command> или <command>svn move</command> вместо аналогичных
          команд, предлагаемых операционной системой. Мы поговорим о них
          позже в этой главе.</para>
      </note>

    <!-- @ENGLISH {{{
    <para>Unless you're ready to commit a new file or directory, or
      changes to existing ones, there's no need to further notify the
      Subversion server that you've done anything.</para>
    @ENGLISH }}} -->
    <para>Исключение составляют случаи, когда вы готовы зафиксировать новый
      файл или каталог, либо внести изменения в один из существующих. Для
      этих операций вы не обязаны дополнительно извещать Subversion-сервер
      о своих действиях.</para>

    <sidebar>
      <!-- @ENGLISH {{{
      <title>What's with the <filename>.svn</filename> directory?</title>
      @ENGLISH }}} -->
      <title>А как насчет каталога <filename>.svn</filename>?</title>

      <!-- @ENGLISH {{{
      <para>Every directory in a working copy contains an
        administrative area, a subdirectory named
        <filename>.svn</filename>.  Usually, directory listing
        commands won't show this subdirectory, but it is nevertheless
        an important directory.  Whatever you do, don't delete or
        change anything in the administrative area!  Subversion
        depends on it to manage your working copy.</para>
      @ENGLISH }}} -->
      <para>Каждый каталог в рабочей копии содержит служебную
        область, подкаталог с названием <filename>.svn</filename>.
        Обычно, команды используемые для вывода содержимого каталогов не
        показывают этот подкаталог, но в любом случае, это очень важный
        каталог. Что бы вы не делали, не удаляйте или не меняйте ничего в
        служебной области! Subversion использует ее при управлении
        рабочей копией.</para>

    </sidebar>

    <!-- @ENGLISH {{{
    <para>While you can certainly check out a working copy with the
      URL of the repository as the only argument, you can also specify
      a directory after your repository URL.  This places your working
      copy in the new directory that you name.  For example:</para>
    @ENGLISH }}} -->
    <para>Несмотря на то, что вы конечно можете создать рабочую копию,
      указав только один аргумент в виде URL хранилища, вы можете
      после URL хранилища указать каталог. Тогда ваша рабочая копия
      будет находиться в новом каталоге с указанным вами именем.
      Например:</para>

    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk subv
A  subv/subversion.dsw
A  subv/svn_check.dsp
A  subv/COMMITTERS
A  subv/configure.in
A  subv/IDEAS
&hellip;
Checked out revision 2499.
</screen>

    <!-- @ENGLISH {{{
    <para>That will place your working copy in a directory named
      <literal>subv</literal> instead of a directory named
      <literal>trunk</literal> as we did previously.</para>
    @ENGLISH }}} -->
    <para>Эта команда создаст рабочую копию в каталоге с именем
      <literal>subv</literal>, вместо каталога <literal>trunk</literal>
      как мы делали раньше.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
    <!-- @ENGLISH {{{
    <title>Basic Work Cycle</title>
    @ENGLISH }}} -->
    <title>Простейший рабочий цикл</title>

    <!-- @ENGLISH {{{
    <para>Subversion has numerous features, options, bells and
      whistles, but on a day-to-day basis, odds are that you will only
      use a few of them.  In this section we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
    @ENGLISH }}} -->
    <para>Subversion имеет множество возможностей, опций и украшательств, но
      в ежедневной работе используются только некоторые из них. В этом
      разделе мы пройдемся по наиболее часто выполняемым в течение рабочего
      дня задачам.</para>

    <!-- @ENGLISH {{{
    <para>The typical work cycle looks like this:</para>
    @ENGLISH }}} -->
    <para>Типичный рабочий цикл выглядит примерно так:</para>

    <itemizedlist>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Update your working copy</para>
        @ENGLISH }}} -->
        <para>Обновление рабочей копии</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
        </itemizedlist>

      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>Make changes</para>
        @ENGLISH }}} -->
        <para>Внесение изменений</para>
        <itemizedlist>
          <listitem>
            <para><command>svn add</command></para>
          </listitem>
          <listitem>
            <para><command>svn delete</command></para>
          </listitem>
          <listitem>
            <para><command>svn copy</command></para>
          </listitem>
          <listitem>
            <para><command>svn move</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>Examine your changes</para>
        @ENGLISH }}} -->
        <para>Анализ изменений</para>
        <itemizedlist>
          <listitem>
            <para><command>svn status</command></para>
          </listitem>
          <listitem>
            <para><command>svn diff</command></para>
          </listitem>
          <listitem>
            <para><command>svn revert</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>Merge others' changes into your working copy</para>
        @ENGLISH }}} -->
        <para>Слияние изменений, выполненных другими, с вашей рабочей
          копией</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
          <listitem>
            <para><command>svn resolved</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <!-- @ENGLISH {{{
        <para>Commit your changes</para>
        @ENGLISH }}} -->
        <para>Фиксация изменений</para>
        <itemizedlist>
          <listitem>
            <para><command>svn commit</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
      <!-- @ENGLISH {{{
      <title>Update Your Working Copy</title>
      @ENGLISH }}} -->
      <title>Обновление рабочей копии</title>

      <!-- @ENGLISH {{{
      <para>When working on a project with a team, you'll want to
        update your working copy to receive any changes made since
        your last update by other developers on the project.  Use
        <command>svn update</command> to bring your working copy into
        sync with the latest revision in the repository.</para>
      @ENGLISH }}} -->
      <para>При командной работе над проектом обновление рабочей копии
        необходимо для получения любых изменений, внесенных с момента
        вашего последнего обновления другими разработчиками проекта.
        Используйте <command>svn update</command> для синхронизации вашей
        рабочей копии с последней правкой в хранилище.</para>

      <screen>
$ svn update
U  foo.c
U  bar.c
Updated to revision 2.
</screen>

      <!-- @ENGLISH {{{
      <para>In this case, someone else checked in modifications to
        both <filename>foo.c</filename> and <filename>bar.c</filename>
        since the last time you updated, and Subversion has updated
        your working copy to include those changes.</para>
      @ENGLISH }}} -->
      <para>В данном случае, кто-то другой зафиксировал изменения в файлах
        <filename>foo.c</filename> и <filename>bar.c</filename> после
        вашего последнего обновления, и Subversion обновила вашу рабочую копию
        включив эти изменения.</para>

      <!-- @ENGLISH {{{
      <para>Let's examine the output of <command>svn update</command>
        a bit more.  When the server sends changes to your working
        copy, a letter code is displayed next to each item to let you
        know what actions Subversion performed to bring your working
        copy up-to-date:</para>
      @ENGLISH }}} -->
      <para>Рассмотрим выводимую командой <command>svn update</command> информацию
        чуть подробнее. Когда сервер отправляет изменения в вашу рабочую копию
        для каждого элемента выводится латинская буква &mdash; код, определяющий,
        какое действие выполнила Subversion для приведения ваше рабочей копии в
        актуальное состояние:</para>

      <variablelist>

        <varlistentry>
          <term><computeroutput>U      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File <filename>foo</filename> was
              <computeroutput>U</computeroutput>pdated (received changes
              from the server).</para>
            @ENGLISH }}} -->
            <para>Файл <filename>foo</filename> был
              <computeroutput>U</computeroutput>pdated &mdash; обновлен
              (получил изменения с сервера).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>A      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File or directory <filename>foo</filename> was
              <computeroutput>A</computeroutput>dded to your working
              copy.</para>
            @ENGLISH }}} -->
            <para>Файл или директория <filename>foo</filename> были
              <computeroutput>A</computeroutput>dded &mdash; добавлены в
              рабочую копию.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>D      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File or directory <filename>foo</filename> was
              <computeroutput>D</computeroutput>eleted from your working
              copy.</para>
            @ENGLISH }}} -->
            <para>Файл или директория <filename>foo</filename> были
              <computeroutput>D</computeroutput>eleted &mdash; удалены
              из рабочей копии.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>R      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File or directory <filename>foo</filename> was
              <computeroutput>R</computeroutput>eplaced in your working
              copy; that is, <filename>foo</filename> was deleted, and a
              new item with the same name was added.  While they may have
              the same name, the repository considers them to be distinct
              objects with distinct histories.</para>
            @ENGLISH }}} -->
            <para>Файл или директория <filename>foo</filename> была
              <computeroutput>R</computeroutput>eplaced &mdash; заменена
              в рабочей копии; это значит, что <filename>foo</filename>
              был удален, а новый элемент с таким же именем был добавлен.
              Не смотря на то, что они могут иметь одинаковое имя,
              хранилище рассматривает их как разные объекты с
              отдельной историей.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>G      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File <filename>foo</filename> received new changes
              from the repository, but your local copy of the file had
              your modifications.  Either the changes did not intersect,
              or the changes were exactly the same as your local
              modifications, so Subversion has successfully
              mer<computeroutput>G</computeroutput>ed the repository's
              changes into the file without a problem.</para>
            @ENGLISH }}} -->
            <para>Файл <filename>foo</filename> получил новые изменения
              из хранилища, однако ваша локальная копия содержит ваши
              изменения. Либо изменения не пересекаются, либо они точно такие
              же как ваши локальные изменения поэтому Subversion успешно
              выполнила mer<computeroutput>G</computeroutput>ed &mdash;
              слияние изменений хранилища с файлом.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>C      foo</computeroutput></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>File <filename>foo</filename> received
              <computeroutput>C</computeroutput>onflicting changes from
              the server.  The changes from the server directly overlap
              your own changes to the file.  No need to panic, though.
              This overlap needs to be resolved by a human (you); we
              discuss this situation later in this chapter.</para>
            @ENGLISH }}} -->
            <para>Файл <filename>foo</filename> получил от сервера
              <computeroutput>C</computeroutput>onflicting &mdash;
              конфликтующие изменения. Изменения с сервера пересекаются с
              вашими изменениями фала. Однако паниковать не стоит. Это
              перекрытие нуждается в разрешении человеком (вами); мы обсудим
              эту ситуацию позже в этой главе.</para>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
      <!-- @ENGLISH {{{
      <title>Make Changes to Your Working Copy</title>
      @ENGLISH }}} -->
      <title>Внесение изменений в рабочую копию</title>

      <!-- @ENGLISH {{{
      <para>Now you can get to work and make changes in your
        working copy.  It's usually most convenient to decide on a
        particular change (or set of changes) to make, such as writing
        a new feature, fixing a bug, etc.  The Subversion commands
        that you will use here are <command>svn add</command>,
        <command>svn delete</command>, <command>svn copy</command>,
        and <command>svn move</command>.  However, if you are merely
        editing files that are already in Subversion, you may not need
        to use any of these commands until you commit.  Changes you can
        make to your working copy:</para>
      @ENGLISH }}} -->
      <para>Теперь вы можете вносить изменения в рабочую копию. Самый
        подходящий момент внести нужные изменения (или набор изменений),
        например, добавление новой возможности, исправление ошибки и т. д.
        Команды Subversion которыми вы будете здесь пользоваться &mdash; это
        <command>svn add</command>, <command>svn delete</command>,
        <command>svn copy</command> и <command>svn move</command>.
        Однако если вы просто редактируете файлы которые уже в Subversion
        ни одна из этих команд вам не нужна. Изменения которые вы можете
        сделать в вашей рабочей:</para>

      <variablelist>

        <varlistentry>
          <!-- @ENGLISH {{{
          <term>File changes</term>
          @ENGLISH }}} -->
          <term>Изменения файлов</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>This is the simplest sort of change.  You don't need
              to tell Subversion that you intend to change a file;
              just make your changes.  Subversion will be able to
              automatically detect which files have been
              changed.</para>
            @ENGLISH }}} -->
            <para>Это самый простой вид изменений. Вам не нужно сообщать
              Subversion о своем намерении изменить файл; просто берите
              и вносите изменения. Subversion сможет автоматически
              определить измененные файлы.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <!-- @ENGLISH {{{
          <term>Tree changes</term>
          @ENGLISH }}} -->
          <term>Изменения в структуре</term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>You can ask Subversion to <quote>mark</quote> files
              and directories for scheduled removal, addition,
              copying, or moving.  While these changes may take place
              immediately in your working copy, no additions or
              removals will happen in the repository until you commit
              them.</para>
            @ENGLISH }}} -->
            <para>Вы можете попросить Subversion <quote>отметить</quote>
              файлы и директории для удаления, добавления, копирования или
              перемещения. Не смотря на то, что эти изменения сразу же
              отразятся в рабочей копии, ни добавления, ни удаления
              не произойдут в хранилище пока вы их не зафиксируете.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <!-- @ENGLISH {{{
      <para>To make file changes, use your text editor, word
        processor, graphics program, or whatever tool you would
        normally use.  Subversion handles binary files just as easily
        as it handles text files&mdash;and just as efficiently
        too.</para>
      @ENGLISH }}} -->
      <para>Для внесения изменений в файлы используете свой текстовый
        редактор, текстовый процессор, графическую программу или любой
        другой инструмент который вы обычно используете. Subversion
        обрабатывает бинарные файлы так же легко как и текстовые -
        и настолько же эффективно.</para>

      <!-- @ENGLISH {{{
      <para>Here is an overview of the four Subversion subcommands
        that you'll use most often to make tree changes (we'll cover
        <command>svn import</command> and <command>svn mkdir</command>
        later).</para>
      @ENGLISH }}} -->
      <para>Вот обзор четырех подкоманд Subversion которые вы будете
        использовать наиболее часто при внесении изменений в структуру
        (команды <command>svn import</command> и <command>svn
        mkdir</command> мы рассмотрим позже).</para>

      <!-- @ENGLISH {{{
      <warning>
        <para>While you can edit your files with whatever tool you
          like, you shouldn't change the structure of your working
          copy without letting Subversion know what you're doing.  Use
          the <command>svn copy</command>, <command>svn
          delete</command>, and <command>svn move</command> commands
          to change the structure of your working copy, and use the
          <command>svn add</command> command to place new files and
          directories under version control.</para> </warning>
       @ENGLISH }}} -->
       <warning>
         <para>Не смотря на то, что файлы вы можете редактировать
           как угодно, не следует менять структуру рабочей копии
           не проинформировав о своих действиях Subversion. Для
           изменения структуры рабочей копии используйте команды
           <command>svn copy</command>, <command>svn delete</command>
           и <command>svn move</command>, а для добавления новых файлов
           и директорий под контроль версий используйте
           <command>svn add</command>.</para>
       </warning>

      <variablelist>

        <varlistentry>
          <term><command>svn add foo</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be added to the repository.
              When you next commit, <filename>foo</filename> will
              become a child of its parent directory.  Note that if
              <filename>foo</filename> is a directory, everything
              underneath <filename>foo</filename> will be scheduled
              for addition.  If you only want to add
              <filename>foo</filename> itself, pass the
              <option>&ndash;-non-recursive</option> (<option>-N</option>)
              switch.</para>
            @ENGLISH }}} -->
            <para>Запланировать файл, директорию или символьную ссылку
              <filename>foo</filename> для добавления в хранилище.
              При следующей фиксации, <filename>foo</filename> станет
              компонентом своей родительской директории. Обратите внимание
              на то, что если <filename>foo</filename> является директорией,
              то все содержащееся в <filename>foo</filename> будет
              запланировано для добавления. Если вы хотите добавить
              отдельно <filename>foo</filename> воспользуйтесь параметром
              <option>--non-recursive</option>
              (<option>-N</option>).</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn delete foo</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be deleted from the
              repository.  If <filename>foo</filename> is a file or
              link, it is immediately deleted from your working copy.
              If <filename>foo</filename> is a directory, it is not
              deleted, but Subversion schedules it for deletion.  When
              you commit your changes, <filename>foo</filename> will
              be removed from your working copy and the repository.
              <footnote><para>Of course, nothing is ever totally
              deleted from the repository&mdash;just from the
              <literal>HEAD</literal> of the repository.  You can get
              back anything you delete by checking out (or updating
              your working copy) a revision earlier than the one in
              which you deleted it.</para></footnote></para>
            @ENGLISH }}} -->
            <para>Запланировать удаление из хранилища файла, директории
              или символьной ссылки <filename>foo</filename>. Если
              <filename>foo</filename> является файлом или ссылкой,
              он сразу же удаляется из вашей рабочей копии. Если
              <filename>foo</filename> является директорией, она не
              удаляется, но Subversion запланирует ее удаление.
              <filename>foo</filename> будет удалена из рабочей копии и
              хранилища при фиксации изменений.<footnote><para>Конечно,
              ничего полностью из хранилища не удаляется &mdash; удаляется
              только из <literal>HEAD</literal> хранилища. Вы можете
              восстановить все, что вы удалили создав рабочую копию (или
              обновив существующую) на основе более ранней правки чем та в
              которой вы удалили элемент.</para></footnote></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn copy foo bar</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Create a new item <filename>bar</filename> as a
              duplicate of <filename>foo</filename>.
              <filename>bar</filename> is automatically scheduled for
              addition.  When <filename>bar</filename> is added to the
              repository on the next commit, its copy history is
              recorded (as having originally come from
              <filename>foo</filename>).  <command>svn copy</command>
              does not create intermediate directories.</para>
            @ENGLISH }}} -->
            <para>Создать новый элемент <filename>bar</filename> как
              копию <filename>foo</filename>. <filename>bar</filename>
              будет автоматически запланирован для добавления.
              Когда при следующей фиксации <filename>bar</filename>
              будет добавлен в хранилище в его истории будет отмечено
              копирование (то, что первоисточником является
              <filename>foo</filename>). <command>svn copy</command> не
              создает промежуточных директорий.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn move foo bar</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>This command is exactly the same as running
              <command>svn copy foo bar; svn delete foo</command>.
              That is, <filename>bar</filename> is scheduled for
              addition as a copy of <filename>foo</filename>, and
              <filename>foo</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories.</para>
            @ENGLISH }}} -->
            <para>Эта команда полностью аналогична выполнению
              <command>svn copy foo bar; svn delete foo</command>.
              Поэтому, <filename>bar</filename> будет запланирован для
              добавления как копия <filename>foo</filename>, а
              <filename>foo</filename> будет запланирован для удаления.
              <command>svn move</command> не создает промежуточных
              директорий.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
        <!-- @ENGLISH {{{
        <title>Changing the Repository Without a Working Copy</title>
        @ENGLISH }}} -->
        <title>Изменение хранилища без участия рабочей копии</title>

        <!-- ### pll - Fri 07 Feb 2003 12:55:07                            -->
        <!-- I find this sidebar rather confusing here, since you really   -->
        <!-- haven't gone through explaining the svn command line syntax   -->
        <!-- anywhere.  Maybe a short section explaining that subversion   -->
        <!-- can be used both in networked and non-networked environments, -->
        <!-- and which types of commands need URLs, etc.  This should      -->
        <!-- probably be in chapter 2 (around the "Subversion in action"   -->
        <!-- though, so that this sidebar makes more sense.                -->

        <!-- @ENGLISH {{{
        <para>Earlier in this chapter, we said that you have to commit
          any changes that you make in order for the repository to
          reflect these changes.  That's not entirely true&mdash;there
          <emphasis>are</emphasis> some use cases that immediately
          commit tree changes to the repository.  This only happens
          when a subcommand is operating directly on a URL, rather
          than on a working-copy path.  In particular, specific uses
          of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can work with URLs.</para>
        @ENGLISH }}} -->
        <para>Ранее в этой главе мы сказали, что вам необходимо
          зафиксировать любые изменения для того, что бы они отразились в
          хранилище. Это не совсем так &mdash; <emphasis>существуют</emphasis>
          некоторые случаи использования, которые сразу же фиксируют в
          хранилище изменения структуры. Это происходит только тогда
          когда подкоманда оперирует напрямую с URL вместо рабочей копии.
          В частности, отдельные применения <command>svn mkdir</command>,
          <command>svn copy</command>, <command>svn move</command> и
          <command>svn delete</command> могут работать с URL.</para>

        <!-- @ENGLISH {{{
        <para>URL operations behave in this manner because commands
          that operate on a working copy can use the working copy as a
          sort of <quote>staging area</quote> to set up your changes
          before committing them to the repository.  Commands that
          operate on URLs don't have this luxury, so when you operate
          directly on a URL, any of the above actions represent an
          immediate commit.</para>
        @ENGLISH }}} -->
        <para>URL операции ведут себя подобным образом из-за того, что
          команды использующие рабочую копию могут использовать ее
          как своего рода <quote>сартовую площадку</quote> для
          устаканивания изменений перед фиксацией их в хранилище. Команды
          оперирующие URL не могут позволить такой роскоши, поэтому,
          когда вы работаете напрямую с URL, любое из приведенных выше действий
          приводит к немедленной фиксации.</para>


      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
      <!-- @ENGLISH {{{
      <title>Examine Your Changes</title>
      @ENGLISH }}} -->
      <title>Анализ изменений</title>

      <!-- @ENGLISH {{{
      <para>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can make a
        more accurate log message.  You may also discover that
        you've inadvertently changed a file, and this gives you a
        chance to revert those changes before committing.
        Additionally, this is a good opportunity to review and
        scrutinize changes before publishing them.  You can see
        exactly what changes you've made by using <command>svn
        status</command>, <command>svn diff</command>, and
        <command>svn revert</command>.  You will usually use the first
        two commands to find out what files have changed in your
        working copy, and then perhaps the third to revert some (or
        all) of those changes.</para>
      @ENGLISH }}} -->
      <para>После внесения изменений вам необходимо зафиксировать их в
        хранилище, но перед тем, как вы это сделаете, не плохо бы посмотреть,
        что, собственно, вы изменили. Проанализировав перед фиксацией свои
        изменения, вы сможете составить более аккуратное лог-сообщение.
        Кроме того, вы можете обнаружить, что вы изменили файл непреднамеренно
        и это даст вам возможность до фиксации вернуть файл к предыдущему
        состоянию. К тому же, это хорошая возможность пересмотреть и проверить
        изменения перед их публикацией. Что бы увидеть все сделанные изменения
        вы можете воспользоваться <command>svn status</command>, <command>svn
        diff</command> и <command>svn revert</command>. Первые две команды вы
        можете использовать для того, что бы найти измененные файлы рабочей
        копии, а затем при помощи третьей, возможно, отменить некоторые (или
        все) изменения.</para>

      <!-- pll - Fri 07 Feb 2003 12:55:07                                   -->
      <!-- I find this following paragraph a little unclear.  Mostly for    -->
      <!-- the same reasons as I found the sidebar above unclear.  There    -->
      <!-- hasn't been much discussion of the Subversion architecture, and  -->
      <!-- therefore, nothing has been clearly stated wrt the fact that the -->
      <!-- repository may not be local.                                     -->

      <!-- @ENGLISH {{{
      <para>Subversion has been optimized to help you with this task,
        and is able to do many things without communicating with the
        repository.  In particular, your working copy contains a
        secret cached <quote>pristine</quote> copy of each version
        controlled file within the <filename>.svn</filename> area.
        Because of this, Subversion can quickly show you how your
        working files have changed, or even allow you to undo your
        changes without contacting the repository.</para>
      @ENGLISH }}} -->
      <para>Subversion была оптимизирована для решения такой задачи
        и способна выполнять множество действий без обращения к
        хранилищу. В частности, в <filename>.svn</filename>-области
        рабочая копия содержит скрытую кешированую <quote>нетронутую</quote>
        копию каждого версионированного файла. Вследствие этого, Subversion
        может быстро показать, как изменились ваши рабочие файлы или
        даже предоставить, не связываясь с хранилищем, возможность сделать
        откат изменений.</para>

      <sect3 id="svn.tour.cycle.examine.status">
        <title><command>svn status</command></title>

        <!-- @ENGLISH {{{
        <para>You'll probably use the <command>svn status</command>
          command more than any other Subversion command.</para>
        @ENGLISH }}} -->
        <para>Наверное, команду <command>svn status</command>
          вы будете использовать чаще чем любую другую команду
          Subversion.</para>

        <sidebar>
          <!-- @ENGLISH {{{
          <title>CVS Users: Hold That Update!</title>
          @ENGLISH }}} -->
          <title>CVS Users: Hold That Update!</title>

          <!-- @ENGLISH {{{
          <para>You're probably used to using <command>cvs
            update</command> to see what changes you've made to your
            working copy.  <command>svn status</command> will give you
            all the information you need regarding what has changed in
            your working copy&mdash;without accessing the repository
            or potentially incorporating new changes published by
            other users.</para>
          @ENGLISH }}} -->
          <para>Вероятно, для того что бы увидеть какие изменения вы сделали
            в рабочей копии,  вы использовали <command>cvs update</command>.
            <command>svn status</command> даст вам всю нужную информацию
            относительно того, что изменилось в рабочей копии &mdash;
            не обращаясь к хранилищу и не сливая новые изменения
            опубликованные другими пользователями.</para>

          <!-- @ENGLISH {{{
          <para>In Subversion, <command>update</command> does just
            that&mdash;it updates your working copy with any changes
            committed to the repository since the last time you've
            updated your working copy.  You'll have to break the habit
            of using the <command>update</command> command to see what
            local modifications you've made.</para>
          @ENGLISH }}} -->
          <para><command>Обновление</command> в Subversion делает именно
            это &mdash; обновляет вашу рабочую копию беря все изменения
            зафиксированные в хранилище с момента последнего обновления рабочей
            копии. Это нарушает традицию использования команды
            <command>update</command> для того, что бы посмотреть сделанные
            локально изменения.</para>

        </sidebar>

        <!-- @ENGLISH {{{
        <para>If you run <command>svn status</command> at the top of
          your working copy with no arguments, it will detect all file
          and tree changes you've made.  Below are examples of
          the different status codes that <command>svn
          status</command> can return.  (Note that the text following
          <literal>#</literal> is not
          actually printed by <command>svn status</command>.)</para>
        @ENGLISH }}} -->
        <para>При запуске <command>svn status</command> без параметров в
          корневой директории рабочей копии, будут найдены все сделанные вами
          файловые и структурные изменения. Ниже приведены примеры различных
          буквенных кодов, возвращаемых <command>svn status</command>.
          (Обратите внимание на то, что текст следующий за
          <literal>#</literal> на самом деле <command>svn status</command> не
          печатает.)</para>

<!-- @ENGLISH {{{
        <screen>
  L     some_dir            # svn left a lock in the .svn area of some_dir
M       bar.c               # the content in bar.c has local modifications
 M      baz.c               # baz.c has property but no content modifications
X       3rd_party           # dir is part of an externals definition
?       foo.o               # svn doesn't manage foo.o
!       some_dir            # svn manages this, but it's missing or incomplete
~       qux                 # versioned as file/dir/link, but type has changed
I       .screenrc           # svn doesn't manage this, and is set to ignore it
A  +    moved_dir           # added with history of where it came from
M  +    moved_dir/README    # added with history and has local modifications
D       stuff/fish.c        # file is scheduled for deletion
A       stuff/loot/bloo.h   # file is scheduled for addition
C       stuff/loot/lump.c   # file has textual conflicts from an update
 C      stuff/loot/glub.c   # file has property conflicts from an update
R       xyz.c               # file is scheduled for replacement
    S   stuff/squawk        # file or dir has been switched to a branch
     K  dog.jpg             # file is locked locally; lock-token present
     O  cat.jpg             # file is locked in the repository by other user
     B  bird.jpg            # file is locked locally, but lock has been broken
     T  fish.jpg            # file is locked locally, but lock has been stolen

</screen>
@ENGLISH }}} -->
        <screen>
  L     some_dir            # svn оставила блокировку в .svn-области для some_dir
M       bar.c               # содержимое bar.c имеет локальные изменения
 M      baz.c               # в baz.c есть изменения в свойствах, а в содержимом нет
X       3rd_party           # директория является частью внешней зависимости
?       foo.o               # svn не управляет foo.o
!       some_dir            # svn управляет этим элементом, но он отсутствует или не поврежден
~       qux                 # элемент версионировался как файл/директория/ссылка, но тип был изменен
I       .screenrc           # svn не управляет этим элементом и настроена на его игнорирование
A  +    moved_dir           # добавлен с историей своего происхождения
M  +    moved_dir/README    # добавлен с историей и имеет локальные изменения
D       stuff/fish.c        # файл запланирован для удаления
A       stuff/loot/bloo.h   # файл запланирован для добавления
C       stuff/loot/lump.c   # файл имеет текстовый конфликт с момента обновления
 C      stuff/loot/glub.c   # файл имеет конфликт в свойствах с момента обновления
R       xyz.c               # файл запланирован для замены
    S   stuff/squawk        # файл или директория были переключены на ветку
     K  dog.jpg             # файл заблокирован локально; присутствует маркер блокирования
     O  cat.jpg             # файл заблокирован в хранилище другим пользователем
     B  bird.jpg            # файл заблокирован локально, но блокировка была нарушена
     T  fish.jpg            # файл заблокирован локально, но блокировка была снята

</screen>

        <!-- @ENGLISH {{{
        <para>In this output format <command>svn status</command>
          prints five columns of characters, followed by several
          whitespace characters, followed by a file or directory name.
          The first column tells the status of a file or directory
          and/or its contents.  The codes printed here are:</para>
        @ENGLISH }}} -->
        <para><command>svn status</command>
          печатает пять колонок букв, затем несколько пробелов,
          затем имя файла или директории. Первая колонка показывает
          статус файла или директории и/или ее содержимого. Коды
          используемые здесь:</para>


        <variablelist>

          <varlistentry>
            <term><computeroutput>A      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка
                <filename>item</filename> была запланирована для
                добавления в хранилище.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy.  You must resolve
                this conflict before committing your changes to the
                repository.</para>
              @ENGLISH }}} -->
              <para>Файл <filename>item</filename> находится в
                состоянии конфликта. Это значит, что изменения,
                полученные от сервера при обновлении пересекаются
                с локальными изменениями имеющимися в рабочей копии.
                Перед фиксацией изменений вам необходимо разрешить
                этот конфликт.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка
                <filename>item</filename> запланированы
                для удаления из хранилища.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The contents of the file <filename>item</filename>
                have been modified.</para>
              @ENGLISH }}} -->
              <para>Содержимое файла <filename>item</filename> было
                изменено.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>R      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled to
                replace <filename>item</filename> in the repository.
                This means that the object is first deleted, then
                another object of the same name is added, all within a
                single revision.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка запланированы
                для замены <filename>item</filename> в хранилище.
                Это значит, что сначала объект был удален, а затем
                другой объект с таким же именем был добавлен, все в одной
                правке.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>X      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The directory <filename>item</filename> is
                unversioned, but is related to a Subversion externals
                definition.  To find out more about externals
                definitions, see <xref
                linkend="svn.advanced.externals"/>.</para>
              @ENGLISH }}} -->
              <para>Директория <filename>item</filename> не версионирована,
                но относится к внешним зависимостям Subversion. Более подробно
                о внешних зависимостях см. в <xref
                linkend="svn.advanced.externals"/>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>?      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> is not under version
                control.  You can silence the question marks by either
                passing the <option>&ndash;-quiet</option>
                (<option>-q</option>) switch to <command>svn
                status</command>, or by setting the
                <literal>svn:ignore</literal> property on the parent
                directory.  For more information on ignored files, see
                <xref linkend="svn.advanced.props.special.ignore" />.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка не находится под
                контролем версий. Вы можете убрать знаки вопроса либо
                воспользовавшись параметром <option>--quiet</option>
                (<option>-q</option>) команды <command>svn status</command>,
                либо установив свойство <literal>svn:ignore</literal>
                родительской директории. Больше информации об игнорировании
                файлов см. в <xref
                linkend="svn.advanced.props.special.ignore" />.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>!      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> is under version control but
                is missing or somehow incomplete.  The item can be
                missing if it's removed using a non-Subversion
                command.  In the case of a directory, it can be
                incomplete if you happened to interrupt a checkout or
                update.  A quick <command>svn update</command> will
                refetch the file or directory from the repository, or
                <command>svn revert file</command> will restore a
                missing file.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка
                <filename>item</filename> находится под контролем версий
                но отсутствует или повреждена как-то по другому. Элемент
                может отсутствовать если был удален используя не-Subversion
                команды. В случае если это директория, она может оказаться
                поврежденной, если вы прервали создание рабочей копии или
                обновление. Быстрый запуск <command>svn update</command>
                заново вытащит файл или директорию из хранилища, либо
                <command>svn revert file</command> восстановит отсутствующий
                файл.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>~      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> is in the repository as one
                kind of object, but what's actually in your working
                copy is some other kind.  For example, Subversion
                might have a file in the repository, but you removed
                the file and created a directory in its place, without
                using the <command>svn delete</command> or
                <command>svn add</command> command.</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка
                <filename>item</filename> в хранилище является объектом
                одного типа, а то, что на самом деле находится в рабочей
                копии является чем-то другим. Например, в хранилище
                Subversion может иметь файл, а вы удалили файл и создали
                вместо него директорию, без использования команды
                <command>svn delete</command> или
                <command>svn add</command>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>I      item</computeroutput></term>
            <listitem>
              <!-- @ENGLISH {{{
              <para>The file, directory, or symbolic link
                <filename>item</filename> is not under version control,
                and Subversion is configured to ignore it during
                <command>svn add</command>, <command>svn import</command>
                and <command>svn status</command> operations.  For more
                information on ignored files, see <xref
                linkend="svn.advanced.props.special.ignore"/>.  Note that this
                symbol only shows up if you pass the
                <option>&ndash;-no-ignore</option> option to <command>svn
                status</command>&mdash;otherwise the file would be
                ignored and not listed at all!</para>
              @ENGLISH }}} -->
              <para>Файл, директория или символьная ссылка
                <filename>item</filename> находится под контролем
                версий и Subversion настроена на его игнорирование
                при операциях <command>svn add</command>, <command>svn
                import</command> и <command>svn status</command>.
                Больше информации об игнорированных файлах см. в
                <xref linkend="svn.advanced.props.special.ignore"/>.
                Обратите внимание на то, что этот символ появляется
                при использовании опции <option>--no-ignore</option>
                для <command>svn status</command> &mdash; иначе
                файл игнорируется и не показывается вообще!</para>
            </listitem>
          </varlistentry>

        </variablelist>

        <!-- @ENGLISH {{{
        <para>The second column tells the status of a file or
          directory's properties (see <xref
          linkend="svn.advanced.props"/> for more information on
          properties).  If an <computeroutput>M</computeroutput>
          appears in the second column, then the properties have been
          modified, otherwise a whitespace will be printed.</para>
        @ENGLISH }}} -->
        <para>Вторая колонка показывает статус свойств файлов и
          директорий (больше о свойствах см. в <xref
          linkend="svn.advanced.props"/>). Если во второй колонке
          показывается <computeroutput>M</computeroutput> свойства
          были изменены, иначе печатается пробел.</para>

        <!-- @ENGLISH {{{
        <para>The third column will only show whitespace or an
          <computeroutput>L</computeroutput> which means that
          Subversion has locked the direcotry's
          <filename>.svn</filename> working area.  You will see an
          <computeroutput>L</computeroutput> if you run <command>svn
          status</command> in a directory where an <command>svn
          commit</command> is in progress&mdash;perhaps when you are
          editing the log message.  If Subversion is not running, then
          presumably Subversion was interrupted and the lock needs to
          be cleaned up by running <command>svn cleanup</command>
          (more about that later in this chapter).</para>
        @ENGLISH }}} -->
        <para>Третья колонка может содержать только пробел или
          <computeroutput>L</computeroutput>, это значит, что у директории
          заблокирована рабочая область <filename>.svn</filename>.
          Вы увидите <computeroutput>L</computeroutput> если запустите
          <command>svn status</command> в директории, в которой выполняется
          <command>svn commit</command> &mdash; например, когда вы
          редактируете лог-сообщение.</para>

        <!-- @ENGLISH {{{
        <para>The fourth column will only show whitespace or a
          <computeroutput>+</computeroutput> which means that the file
          or directory is scheduled to be added or modified with
          additional attached history.  This typically happens when you
          <command>svn move</command> or <command>svn copy</command> a file
          or directory.  If you see
          <computeroutput>A&nbsp;&nbsp;+</computeroutput>, this means
          the item is scheduled for addition-with-history.  It could be
          a file, or the root of a copied directory.
          <computeroutput>+</computeroutput>
          means the item is part of a subtree scheduled for
          addition-with-history, i.e. some parent got copied, and it's
          just coming along for the ride.
          <computeroutput>M&nbsp;&nbsp;+</computeroutput> means the item
          is part of a subtree scheduled for addition-with-history,
          <emphasis>and</emphasis> it has local modifications.  When you
          commit, first the parent will be added-with-history (copied),
          which means this file will automatically exist in the copy.
          Then the local modifications will be uploaded into the
          copy.</para>
        @ENGLISH }}} -->
        <para>Четвертая колонка может содержать только пробел или
          <computeroutput>+</computeroutput>, это означает, что
          элемент был запланирован для <quote>добавления с историей</quote>.
          Это может быть файл или корень скопированной директории.
          <computeroutput>+</computeroutput> означает, что элемент
          является частью поддерева запланированного для
          <quote>добавления с историей</quote>, т. е. одна из родительских
          директорий была скопирована и этот элемент просто ее часть.
          <computeroutput>M&nbsp;&nbsp;+</computeroutput> означает, что
          элемент является частью поддерева запланированного для
          <quote>добавления с историей</quote> <emphasis>and</emphasis>
          имеет локальные изменения. При выполнении фиксации, в начале
          родительская директория будет <quote>добавлена с историей</quote>,
          что означает автоматическое наличие файла в копии.
          После этого в копию будут загружены локальные изменения.</para>

        <!-- @ENGLISH {{{
        <para>The fifth column will only show whitespace or an
          <computeroutput>S</computeroutput>.  This signifies that the
          file or directory has been switched from the path of the
          rest of the working copy (using <command>svn
          switch</command>) to a branch.</para>
        @ENGLISH }}} -->
        <para>Пятая колонка может содержать только пробел или
          <computeroutput>S</computeroutput>. Это символизирует
          то, что файл или директория были переключены с пути остальной
          рабочей копии на ветку (используя <command>svn switch</command>).
        </para>

        <!-- @ENGLISH {{{
        <para>The sixth column shows information about locks, which is
          further explained in <xref linkend="svn.advanced.locking"/>.
          (These are not the same locks as the ones indicated by an
          <computeroutput>L</computeroutput> in the third column;
          see <xref linkend="svn.advanced.locking.meanings"/>.)</para>
        @ENGLISH }}} -->
        <para>Шестая колонка показывает информацию о блокировках,
          которые подробно рассмотрены в <xref
          linkend="svn.advanced.locking"/>. (Это не те блокировки, которые
        отмечаются <computeroutput>L</computeroutput> в третьей колонке;
        см. <xref linkend="svn.advanced.locking.meanings"/>)</para>

        <!-- @ENGLISH {{{
        <para>If you pass a specific path to <command>svn
          status</command>, it gives you information about that item
          alone:</para>
        @ENGLISH }}} -->
        <para>Если вы укажите конкретный путь для <command>svn
          status</command>, вы получите информацию только об этом
          элементе:</para>

        <screen>
$ svn status stuff/fish.c
D      stuff/fish.c
</screen>

        <!-- @ENGLISH {{{
        <para><command>svn status</command> also has a
          <option>&ndash;-verbose</option> (<option>-v</option>) switch,
          which will show you the status of <emphasis>every</emphasis>
          item in your working copy, even if it has not been
          changed:</para>
        @ENGLISH }}} -->
        <para>Кроме того, <command>svn status</command> имеет
          параметр <option>--verbose</option> (<option>-v</option>),
          который покажет вам статус <emphasis>каждого</emphasis>
          элемента в рабочей копии, даже если он не менялся:</para>

        <screen>
$ svn status --verbose
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>

        <!-- @ENGLISH {{{
        <para>This is the <quote>long form</quote> output of
          <command>svn status</command>.  The first column remains
          the same, but the second column shows the working-revision of
          the item.  The third and fourth columns show the revision in
          which the item last changed, and who changed it.</para>
        @ENGLISH }}} -->
        <para>Это <quote>длинная форма</quote> представления вывода
          <command>svn status</command>. Первая колонка та же самая,
          а вот вторая колонка показывает рабочую правку элемента.
          Третья и четвертая колонки показывают правку в которой элемент
          последний раз изменялся и кто делал эти изменения.</para>

        <!-- @ENGLISH {{{
        <para>None of the above invocations to <command>svn
          status</command> contact the repository, they work only
          locally by comparing the metadata in the
          <filename>.svn</filename> directory with the working copy.
          Finally, there is the <option>&ndash;-show-updates</option>
          (<option>-u</option>) switch, which contacts the repository
          and adds information about things that are
          out-of-date:</para>
        @ENGLISH }}} -->
        <para>Ни один из указанных выше вызовов <command>svn
          status</command> не обращается к хранилищу, они работают
          только локально, сравнивая метаданные директории
          <filename>.svn</filename> с рабочей копией. Отметим, что есть
          параметр <option>--show-updates</option> (<option>-u</option>),
          указывающий на соединение с хранилищем и добавляющий
          информацию об устаревании элементов:</para>

        <screen>
$ svn status --show-updates --verbose
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</screen>

        <!-- @ENGLISH {{{
        <para>Notice the two asterisks: if you were to run
          <command>svn update</command> at this point, you would
          receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&mdash;you'll need to update and get the
          server changes on <filename>README</filename> before you
          commit, or the repository will reject your commit for being
          out-of-date.  (More on this subject later.)</para>
        @ENGLISH }}} -->
        <para>Обратите внимание на две звездочки: если сейчас вы
          запустите <command>svn update</command> вы получите изменения
          для <filename>README</filename> и <filename>trout.c</filename>.
          Это очень полезная информация &mdash; перед фиксацией вам необходимо
          обновить и получить изменения с сервера для
          <filename>README</filename>, или же хранилище отклонит вашу фиксацию
          как не соответствующую актуальному состоянию. (Подробнее об этом
          чуть позже.)</para>

      </sect3>

      <sect3 id="svn.tour.cycle.examine.diff">
        <title><command>svn diff</command></title>

        <!-- @ENGLISH {{{
        <para>Another way to examine your changes is with the
          <command>svn diff</command> command.  You can find out
          <emphasis>exactly</emphasis> how you've modified things by
          running <command>svn diff</command> with no arguments, which
          prints out file changes in unified diff
          format:<footnote><para>Subversion uses its internal diff
          engine, which produces unified diff format, by default.  If
          you want diff output in a different format, specify an
          external diff program using <option>&ndash;-diff-cmd</option> and
          pass any flags you'd like to it using the
          <option>&ndash;-extensions</option> switch.  For example, to see
          local differences in file <filename>foo.c</filename> in
          context output format while ignoring whitespace changes, you
          might run <command>svn diff &ndash;-diff-cmd /usr/bin/diff
          &ndash;-extensions '-bc' foo.c</command>.</para>
          </footnote></para>
        @ENGLISH }}} -->
        <para>Еще один механизм для анализа изменений, это команда
          <command>svn diff</command>. Увидеть <emphasis>как
          именно</emphasis> вы изменили элементы можно запустив
          <command>svn diff</command> без аргументов, в результате
          выведутся изменения файлов в виде единого формата представления
          различий:<footnote><para>Subversion использует свой внутренний
          механизм обнаружения различий, который по умолчанию использует для
          вывода единый формат представления различий. Если вы хотите получить
          различия в другом формате, укажите внешнюю программу поиска различий
          используя <option>--diff-cmd</option> и передав любые аргументы,
          которые вы хотите что бы она использовала в параметре
          <option>--extensions</option>. Например, для того что бы увидеть
          контекстные локальные изменения в файле <filename>foo.c</filename>
          игнорируя изменения пустых мест, запустите <command>svn diff
          --diff-cmd /usr/bin/diff --extensions '-bc' foo.c</command>.</para>
          </footnote></para>

        <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c (revision 3)
+++ bar.c (working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README  (revision 3)
+++ README  (working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c  (revision 1)
+++ stuff/fish.c  (working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h (revision 8)
+++ stuff/things/bloo.h (working copy)
+Here is a new file to describe
+things about bloo.
</screen>

        <!-- @ENGLISH {{{
        <para>The <command>svn diff</command> command produces this
          output by comparing your working files against the cached
          <quote>pristine</quote> copies within the
          <filename>.svn</filename> area.  Files scheduled for
          addition are displayed as all added-text, and files
          scheduled for deletion are displayed as all deleted
          text.</para>
        @ENGLISH }}} -->
        <para>Команда <command>svn diff</command> формирует
          свой вывод сравнивая ваши рабочие файлы с кэшированными
          <quote>нетронутыми</quote> копиями из <filename>.svn</filename>
          Весь текст запланированных для добавления файлов показывается
           как добавленный, а весь текст запланированных
          для удаления файлов показывается как удаленный.</para>

        <!-- @ENGLISH {{{
        <para>Output is displayed in <firstterm>unified diff
          format</firstterm>.  That is, removed lines are prefaced
          with a <literal>-</literal> and added lines are prefaced
          with a <literal>+</literal>.  <command>svn diff</command>
          also prints filename and offset information useful to the
          <command>patch</command> program, so you can generate
          <quote>patches</quote> by redirecting the diff output to a
          file:</para>
        @ENGLISH }}} -->
        <para>Вывод происходит в <firstterm>объединенном формате представления
          различий</firstterm>. При этом удаленные строки предваряются
          <literal>-</literal>, а добавленные строки предваряются
          <literal>+</literal>. Кроме этого <command>svn diff</command>
          печатает имена файлов и информацию о сдвиге информации которая
          необходима программе <command>patch</command>, и следовательно
          вы можете получать <quote>патчи</quote> перенаправив вывод
          различий в файл:</para>

        <screen>
$ svn diff &gt; patchfile
</screen>

        <!-- @ENGLISH {{{
        <para>You could, for example, email the patch file to another
          developer for review or testing prior to commit.</para>
        @ENGLISH }}} -->
        <para>Вы можете, например, отправить по электронной почте
          патч-файл другому разработчику для ознакомления или
          тестирования перед фиксацией.</para>

      </sect3>

      <sect3 id="svn.tour.cycle.examine.revert">
        <title><command>svn revert</command></title>

        <!-- @ENGLISH {{{
        <para>Now suppose you see the above diff output, and realize
          that your changes to <filename>README</filename> are a
          mistake; perhaps you accidentally typed that text into the
          wrong file in your editor.</para>
        @ENGLISH }}} -->
        <para>Теперь предположим, просмотрев вывод команды diff
          вы обнаружили, что изменения в <filename>README</filename>
          являются ошибочными; возможно, в своем редакторе, вы случайно
          набрали этот текст, предназначавшийся для другого файла.</para>

        <!-- @ENGLISH {{{
        <para>This is a perfect opportunity to use <command>svn
          revert</command>.</para>
        @ENGLISH }}} -->
        <para>Это как раз возможность воспользоваться
          <command>svn revert</command>.</para>

        <screen>
$ svn revert README
Reverted 'README'
</screen>

        <!-- @ENGLISH {{{
        <para>Subversion reverts the file to its pre-modified state by
          overwriting it with the cached <quote>pristine</quote> copy
          from the <filename>.svn</filename> area.  But also note that
          <command>svn revert</command> can undo
          <emphasis>any</emphasis> scheduled operations&mdash;for
          example, you might decide that you don't want to add a new
          file after all:</para>
        @ENGLISH }}} -->
        <para>Subversion возвращает файл в состояние, предшествующее
          модификации, путем замены файла его кэшированной
          <quote>первоначальной</quote> копией из
          <filename>.svn</filename>-области. Кроме того, обратите внимание,
          что <command>svn revert</command> может отменить
          <emphasis>любые</emphasis> запланированные операции &mdash;
          например, вы можете прийти к решению таки не добавлять новый
          файл:</para>

        <screen>
$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Reverted 'foo'

$ svn status foo
?      foo
</screen>

        <note>
          <!-- @ENGLISH {{{
          <para><command>svn revert</command>
            <replaceable>ITEM</replaceable> has exactly the same
            effect as deleting <replaceable>ITEM</replaceable> from
            your working copy and then running <command>svn update -r
            BASE</command> <replaceable>ITEM</replaceable>.  However,
            if you're reverting a file, <command>svn revert</command>
            has one very noticeable difference&mdash;it doesn't have
            to communicate with the repository to restore your
            file.</para>
          @ENGLISH }}} -->
          <para><command>svn revert</command>
            <replaceable>ITEM</replaceable> будет иметь точно такой же эффект,
            как и удаление <replaceable>ITEM</replaceable> из вашей рабочей
            копии, а затем выполнение <command>svn update -r BASE</command>
            <replaceable>ITEM</replaceable>. Однако, если вы отменяете
            изменения для файла, <command>svn revert</command> будет иметь
            одно значительное отличие &mdash; для восстановления файла
            не происходит соединения с хранилищем.</para>
        </note>

        <!-- @ENGLISH {{{
        <para>Or perhaps you mistakenly removed a file from version
          control:</para>
        @ENGLISH }}} -->
        <para>Или, допустим, вы ошибочно удалили файл из-под контроля
          версий:</para>

        <screen>
$ svn status README
       README

$ svn delete README
D         README

$ svn revert README
Reverted 'README'

$ svn status README
       README
</screen>

      </sect3>

      <sidebar>
          <!-- @ENGLISH {{{
          <title>Look Ma! No Network!</title>
          @ENGLISH }}} -->
          <title>Look Ma! No Network!</title>

        <!-- @ENGLISH {{{
        <para>All three of these commands (<command>svn
          status</command>, <command>svn diff</command>, and
          <command>svn revert</command>) can be used without any
          network access.  This makes it easy to manage your
          changes-in-progress when you are somewhere without a network
          connection, such as travelling on an airplane, riding a
          commuter train or hacking on the beach.</para>
        @ENGLISH }}} -->
        <para>Все эти три команды (<command>svn
          status</command>, <command>svn diff</command> и
          <command>svn revert</command>) могут использоваться
          при полном отсутствии сетевого доступа. Это позволяет
          легко управлять рабочими изменениями когда вы находитесь там
          где нет сетевого соединения, например, находясь в самолете,
          едучи в пригородном поезде или занимаясь хакерством на
          пляже.</para>

        <!-- @ENGLISH {{{
        <para>Subversion does this by keeping private caches of
          pristine versions of each versioned file inside of the
          <filename>.svn</filename> administrative areas.  This allows
          Subversion to report&mdash;and revert&mdash;local
          modifications to those files <emphasis>without network
          access</emphasis>.  This cache (called the
          <quote>text-base</quote>) also allows Subversion to send the
          user's local modifications during a commit to the server as
          a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&mdash;even if you
          have a fast net connection, it's much faster to send only a
          file's changes rather than the whole file to the server.  At
          first glance, this might not seem that important, but
          imagine the repercussions if you try to commit a one line
          change to a 400MB file and have to send the whole file to
          the server!</para>
        @ENGLISH }}} -->
        <para>Для этого Subversion использует отдельную для каждого
          версионированного файла кэшированную в административной области
          <filename>.svn</filename> первоначальную версию. Это позволяет
          Subversion показывать &mdash; и отменять &mdash; локальные
          изменения таких файлов <emphasis>без необходимости сетевого
          доступа</emphasis>. Этот кеш (называемый <quote>текстовой
          базой</quote>), кроме всего прочего, позволяет Subversion
          при фиксации отправлять локальные пользовательские изменения
          в виде сжатой <firstterm>дельты</firstterm> (или
          <quote>различий</quote>) первоначальной версии. Наличие такого
          кеша ужасно выгодно &mdash; даже если у вас высокоскоростное
          соединение намного быстрее отправлять на сервер только изменения
          файла вместо отправки целого файла. На первый взгляд это может
          показаться не таким уж и важным, но представьте себе последствия,
          если вы попытаетесь зафиксировать изменения в одной строчке для
          файла размером 400MБ и отправите на сервер весь файл!</para>

    </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
      <!-- @ENGLISH {{{
      <title>Resolve Conflicts (Merging Others' Changes)</title>
      @ENGLISH }}} -->
      <title>Решение конфликтов (при объединении с чужими изменениями)</title>

      <!-- @ENGLISH {{{
      <para>We've already seen how <command>svn status -u</command>
        can predict conflicts.  Suppose you run <command>svn
        update</command> and some interesting things occur:</para>
      @ENGLISH }}} -->
      <para>Мы уже видели как <command>svn status -u</command>
        может предсказать конфликты. Предположим вы запустили
        <command>svn update</command> и произошло кое-что
        интересное:</para>

      <screen>
$ svn update
U  INSTALL
G  README
C  bar.c
Updated to revision 46.
</screen>

      <!-- @ENGLISH {{{
      <para>The <computeroutput>U</computeroutput> and
        <computeroutput>G</computeroutput> codes are no cause for
        concern; those files cleanly absorbed changes from the
        repository.  The files marked with
        <computeroutput>U</computeroutput> contained no local changes
        but were <computeroutput>U</computeroutput>pdated with changes
        from the repository.  The <computeroutput>G</computeroutput>
        stands for mer<computeroutput>G</computeroutput>ed, which
        means that the file had local changes to begin with, but the
        changes coming from the repository didn't overlap with the local
        changes.</para>
      @ENGLISH }}} -->
      <para>Коды <computeroutput>U</computeroutput> и
        <computeroutput>G</computeroutput> интереса не представляют;
        эти файлы без проблем поглотили изменения из хранилища.
        Файлы, отмеченные <computeroutput>U</computeroutput> локальных
        изменений не содержат и были <computeroutput>U</computeroutput>pdated
        - обновлены изменениями из хранилища. Отмеченные
        <computeroutput>G</computeroutput> были
        mer<computeroutput>G</computeroutput>ed - слиты, это значит, что
        файл имел локальные изменения, но изменения, пришедшие из хранилища,
        не перекрываются с локальными изменениями.</para>

      <!-- @ENGLISH {{{
      <para>But the <computeroutput>C</computeroutput> stands for
        conflict.  This means that the changes from the server overlapped
        with your own, and now you have to manually choose between
        them.</para>
      @ENGLISH }}} -->
      <para>А вот отмеченные <computeroutput>C</computeroutput> имеют конфликт.
        Это значит, что изменения с сервера пересеклись с вашими личными и
        теперь вам нужно вручную сделать между ними выбор.</para>

      <!-- @ENGLISH {{{
      <para>Whenever a conflict occurs, three things typically occur
        to assist you in noticing and resolving that conflict:</para>
      @ENGLISH }}} -->
      <para>Всякий раз когда возникает конфликт, для того, чтобы помочь
        вам заметить и решить этот конфликт, возникают как правило три
        вещи:</para>

      <itemizedlist>

        <listitem>
          <!-- @ENGLISH {{{
          <para>Subversion prints a <computeroutput>C</computeroutput>
            during the update, and remembers that the file is in a
            state of conflict.</para>
          @ENGLISH }}} -->
          <para>Subversion печатает <computeroutput>C</computeroutput>
            во время обновления и запоминает, что файл в состоянии
            конфликта.</para>
        </listitem>

        <listitem>
          <!-- @ENGLISH {{{
          <para>If Subversion considers the file to be of a mergeable
            type, it places <firstterm>conflict
            markers</firstterm>&mdash;special strings of text which
            delimit the <quote>sides</quote> of the
            conflict&mdash;into the file to visibly demonstrate the
            overlapping areas.  (Subversion uses the
            <literal>svn:mime-type</literal> property to decide if a
            file is capable of contextual, line-based merging.  See
            <xref linkend="svn.advanced.props.special.mime-type"/> to learn more.)</para>
          @ENGLISH }}} -->
          <para>Если Subversion считает, что файл объединяемого типа
            она помещает <firstterm>маркеры конфликта</firstterm> &mdash;
            специальные текстовые строки которые отделяют
            <quote>стороны</quote> конфликта &mdash; в файл, для того,
            чтобы визуально показать пересекающиеся области.
            (Subversion использует свойство <literal>svn:mime-type</literal>
            для определения возможности контекстного, построчного слияния.
            См. <xref linkend="svn.advanced.props.special.mime-type"/>
            для более подробной информации.)</para>
        </listitem>

        <listitem>
          <!-- @ENGLISH {{{
          <para>For every conflicted file, Subversion places up to
            three extra unversioned files in your working copy:</para>
          @ENGLISH }}} -->
          <para>Для каждого конфликтного файла Subversion добавляет в
            рабочую копию до трех не версионированных дополнительных
            файлов:</para>

          <variablelist>

            <varlistentry>
              <term><filename>filename.mine</filename></term>
              <listitem>
                <!-- @ENGLISH {{{
                <para>This is your file as it existed in your working
                  copy before you updated your working copy&mdash;that
                  is, without conflict markers.  This file has your
                  latest changes in it and nothing else.  (If
                  Subversion considers the file to be unmergeable,
                  then the <filename>.mine</filename> file isn't
                  created, since it would be identical to the working
                  file.)</para>
                @ENGLISH }}} -->
                <para>Это ваш файл в том виде в каком он был в
                  рабочей копии до обновления &mdash; без маркеров
                  конфликта. Этот файл содержит в себе только ваши изменения
                  и ничего больше. (Если Subversion решает, что файл не
                  объединяемый, тогда файл <filename>.mine</filename>
                  не создается, так как он будет идентичным рабочему
                  файлу.)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>filename.rOLDREV</filename></term>
              <listitem>
                <!-- @ENGLISH {{{
                <para>This is the file that was the
                  <literal>BASE</literal> revision before you updated
                  your working copy.  That is, the file that you
                  checked out before you made your latest
                  edits.</para>
                @ENGLISH }}} -->
                <para>Это файл правки <literal>BASE</literal>, где
                  <literal>BASE</literal> - правка которая была до обновления
                  рабочей копии. То есть это файл который у вас был до
                  внесения изменений.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>filename.rNEWREV</filename></term>
              <listitem>
                <!-- @ENGLISH {{{
                <para>This is the file that your Subversion client
                  just received from the server when you updated your
                  working copy.  This file corresponds to the
                  <literal>HEAD</literal> revision of the
                  repository.</para>
                @ENGLISH }}} -->
                <para>Это файл, который ваш Subversion-клиент
                  только что получил с сервера, когда вы обновили
                  рабочую копию. Этот файл соответствует правке
                  <literal>HEAD</literal> хранилища.</para>
              </listitem>
            </varlistentry>

          </variablelist>

          <!-- @ENGLISH {{{
          <para>Here <literal>OLDREV</literal> is the revision number
            of the file in your <filename>.svn</filename> directory
            and <literal>NEWREV</literal> is the revision number of
            the repository <literal>HEAD</literal>.</para>
          @ENGLISH }}} -->
          <para>Здесь <literal>OLDREV</literal> - это номер правки файла
            в директории <filename>.svn</filename>, а
            <literal>NEWREV</literal> - это номер правки
            <literal>HEAD</literal> хранилища.</para>
        </listitem>

      </itemizedlist>

      <!-- @ENGLISH {{{
      <para>For example, Sally makes changes to the file
        <filename>sandwich.txt</filename> in the repository.  Harry has
        just changed the file in his working copy and checked it in.
        Sally updates her working copy before checking in and she gets
        a conflict:</para>
      @ENGLISH }}} -->
      <para>Например, Салли внесла изменения в файл
        <filename>sandwich.txt</filename> из хранилища. Гарри
        одновременно изменил файл в своей рабочей копии и зафиксировал
        его. Салли обновляет свою рабочую копию перед фиксацией и получает
        конфликт:</para>

      <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>

      <!-- @ENGLISH {{{
      <para>At this point, Subversion will <emphasis>not</emphasis>
        allow you to commit the file <filename>sandwich.txt</filename>
        until the three temporary files are removed.</para>
      @ENGLISH }}} -->
      <para>Теперь Subversion <emphasis>не</emphasis> позволит зафиксировать
        файл <filename>sandwich.txt</filename> пока не будут удалены три
        временных файла.</para>


      <screen>
$ svn commit --message "Add a few more things"
svn: Commit failed (details follow):
svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</screen>

      <!-- @ENGLISH {{{
      <para>If you get a conflict, you need to do one of three
        things:</para>
      @ENGLISH }}} -->
      <para>Если вы получили конфликт, у вас есть три варианта:</para>

        <itemizedlist>

          <listitem>
            <!-- @ENGLISH {{{
            <para>Merge the conflicted text <quote>by hand</quote> (by
              examining and editing the conflict markers within the
              file).</para>
            @ENGLISH }}} -->
            <para>Объединить конфликтующий текст <quote>вручную</quote>
              (путем анализа и редактирования маркеров конфликта в
              файле).</para>
          </listitem>

          <listitem>
            <!-- @ENGLISH {{{
            <para>Copy one of the temporary files on top of your
              working file.</para>
            @ENGLISH }}} -->
            <para>Скопировать один из временных файлов поверх
              своего рабочего файла.</para>
          </listitem>

          <listitem>
            <!-- @ENGLISH {{{
            <para>Run <command>svn revert &lt;filename&gt;</command>
              to throw away all of your local changes.</para>
            @ENGLISH }}} -->
            <para>Выполнить <command>svn revert &lt;filename&gt;</command>
              для того, чтобы убрать все ваши локальные изменения.</para>
          </listitem>

        </itemizedlist>

      <!-- @ENGLISH {{{
      <para>Once you've resolved the conflict, you need to let
        Subversion know by running <command>svn resolved</command>.
        This removes the three temporary files and Subversion no
        longer considers the file to be in a state of
        conflict.<footnote><para>You can always remove the temporary
        files yourself, but would you really want to do that when
        Subversion can do it for you?  We didn't think so.</para>
        </footnote></para>
      @ENGLISH }}} -->
      <para>После того, как вы решили конфликт, вам нужно поставить в
        известность Subversion, выполнив <command>svn resolved</command>.
        Это удаляет три временных файла и Subversion больше не считает,
        что файл находится в состоянии конфликта.
        <footnote><para>Вы можете удалить временные файлы самостоятельно,
        но нужно ли вам это делать, если это может сделать Subversion?
        Нам так не кажется.</para></footnote></para>

      <screen>
$ svn resolved sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>

      <sect3 id="svn.tour.cycle.resolve.byhand">
        <!-- @ENGLISH {{{
        <title>Merging Conflicts by Hand</title>
        @ENGLISH }}} -->
        <title>Объединение конфликтов вручную</title>

        <!-- @ENGLISH {{{
        <para>Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
        @ENGLISH }}} -->
        <para>Объединение конфликтов вручную может показаться пугающим,
          когда вы делаете это в первый раз, но немного попрактиковавшись
          это может стать таким же простым, как езда на велосипеде.</para>

        <!-- @ENGLISH {{{
        <para>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and we're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflicts.
          First, let's take a look at the file:</para>
        @ENGLISH }}} -->
        <para>Вот пример. По недоразумению, вы и ваш соразработчик Салли,
          оба одновременно редактируете файл
          <filename>sandwich.txt</filename>.  Салли зафиксировала свои
          изменения и когда вы выполните обновление своей рабочей копии,
          вы получите конфликт и для решения конфликта вам необходимо
          редактировать <filename>sandwich.txt</filename>. Для начала,
          посмотрим на файл:</para>

        <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>

        <!-- @ENGLISH {{{
        <para>The strings of less-than signs, equal signs, and
          greater-than signs are conflict markers, and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
        @ENGLISH }}} -->
        <para>Строки знаков меньше чем, знаков равенства и знаков
          больше чем являются маркерами конфликта. Перед следующей
          фиксацией, вам необходимо будет убедиться, что они удалены из
          файла. Текст между первыми двумя маркерами состоит из
          ваших изменений конфликтующей области:</para>

        <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>

        <!-- @ENGLISH {{{
        <para>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
        @ENGLISH }}} -->
        <para>Текст между вторым и третьим маркером конфликта &mdash;
          это текст из фиксации Салли:</para>

        <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>

        <!-- @ENGLISH {{{
        <para>Usually you won't want to just delete the conflict
          markers and Sally's changes&mdash;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  So this is where you pick up the phone or walk
          across the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.<footnote><para>And if you
          ask them for it, they may very well ride you out of town on
          a rail.</para></footnote> Once you've agreed on the changes
          you will check in, edit your file and remove the conflict
          markers.</para>
        @ENGLISH }}} -->
        <para>Скорее всего вы не захотите просто удалить маркеры конфликта
          и изменения Салли &mdash; она ужасно удивится, когда дойдет до
          сандвича и не увидит того, что ей нужно. Так, что это тот случай
          когда вы снимаете трубку или пересекаете офис и объясняете Салли,
          что не можете получить из итальянского гастронома квашеную капусту.
          <footnote><para>And if you ask them for it, they may very well
          ride you out of town on a rail.</para></footnote> После того как
          вы согласовали изменения, вам нужно выполнить фиксацию,
          отредактируйте ваш файл и удалите маркеры конфликта.</para>

        <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>

        <!-- @ENGLISH {{{
        <para>Now run <command>svn resolved</command>, and you're
          ready to commit your changes:</para>
        @ENGLISH }}} -->
        <para>Теперь выполните <command>svn resolved</command> и вы
          готовы к фиксации изменений:</para>

        <screen>
$ svn resolved sandwich.txt
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</screen>

        <!-- @ENGLISH {{{
        <para>Remember, if you ever get confused while editing the
          conflicted file, you can always consult the three files that
          Subversion creates for you in your working
          copy&mdash;including your file as it was before you updated.
          You can even use a third-party interactive merging tool to
          examine those three files.</para>
        @ENGLISH }}} -->
        <para>Помните, если вы станете в тупик при редактировании
          конфликтующего файла, вы всегда можете обратиться к трем
          файлам, которые Subversion создает в рабочей копии &mdash;
          включая ваш файл в том виде в каком он был до обновления.
          Для анализа этих трех файлов, вы даже можете воспользоваться
          программами для объединения от сторонних разработчиков.</para>

      </sect3>

      <sect3 id="svn.tour.cycle.resolve.copyover">
        <!-- @ENGLISH {{{
        <title>Copying a File Onto Your Working File</title>
        @ENGLISH }}} -->
        <title>Копирование файла поверх вашего рабочего файла</title>

        <!-- @ENGLISH {{{
        <para>If you get a conflict and decide that you want to throw
          out your changes, you can merely copy one of the temporary
          files created by Subversion over the file in your working
          copy:</para>
        @ENGLISH }}} -->
        <para>Если вы получили конфликт и решили отказаться от своих
          изменений, вы можете просто скопировать один из временных файлов
          созданных Subversion поверх файла в рабочей копии:</para>

        <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ cp sandwich.txt.r2 sandwich.txt
$ svn resolved sandwich.txt
</screen>

      </sect3>

      <sect3 id="svn.tour.cycle.resolve.revert">
        <!-- @ENGLISH {{{
        <title>Punting: Using <command>svn revert</command></title>
        @ENGLISH }}} -->
        <title>Использование <command>svn revert</command></title>

        <!-- @ENGLISH {{{
        <para>If you get a conflict, and upon examination decide that
          you want to throw out your changes and start your edits
          again, just revert your changes:</para>
        @ENGLISH }}} -->
        <para>Если вы получили конфликт и вместо анализированния решаете
          отбросить изменения и начать сначала, просто отмените ваши
          изменения:</para>

        <screen>
$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
</screen>

        <!-- @ENGLISH {{{
        <para>Note that when you revert a conflicted file, you don't
          have to run <command>svn resolved</command>.</para>
        @ENGLISH }}} -->
        <para>Обратите внимание, что когда вы возвращаете файл к предыдущему
        состоянию, вам не нужно выполнять <command>svn
        resolved</command>.</para>

      </sect3>

      <!-- @ENGLISH {{{
      <para>Now you're ready to check in your changes.  Note that
        <command>svn resolved</command>, unlike most of the other
        commands we've dealt with in this chapter, requires an
        argument.  In any case, you want to be careful and only run
        <command>svn resolved</command> when you're certain that you've
        fixed the conflict in your file&mdash;once the temporary files
        are removed, Subversion will let you commit the file even if
        it still contains conflict markers.</para>
      @ENGLISH }}} -->
      <para>Теперь вы готовы к фиксации изменений. Обратите внимание на
        то, что <command>svn resolved</command>, в отличие от большинства
        команд с которыми мы имели дело в этой главе, требует аргумент.
        В любом случае будьте осторожны и выполняйте <command>svn
        resolved</command> тогда, когда убеждены, что исправили конфликт в
        файле &mdash; после того как временные файлы будут удалены, Subversion
        позволит вам зафиксировать файл даже если он все еще содержит маркеры
        конфликта.</para>

    </sect2>

    <!-- =============================================================== -->
    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
      <!-- @ENGLISH {{{
      <title>Commit Your Changes</title>
      @ENGLISH }}} -->
      <title>Фиксация изменений</title>

      <!-- @ENGLISH {{{
      <para>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
      @ENGLISH }}} -->
      <para>Наконец то! Ваши редактирования закончены, вы слили
        все изменения с сервера и вы готовы к тому, чтобы зафиксировать
        их в хранилище.</para>

      <!-- @ENGLISH {{{
      <para>The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a <firstterm>log message</firstterm>,
        describing your change.  Your log message will be attached to
        the new revision you create.  If your log message is brief,
        you may wish to supply it on the command line using the
        <option>-&#64738;-message</option> (or <option>-m</option>)
        option:</para>
      @ENGLISH }}} -->
      <para>Команда <command>svn commit</command> отправляет все ваши
        изменения в хранилище. При фиксации изменений необходимо указать
        описывающие ваши изменения <firstterm>лог сообщение</firstterm>.
        Лог сообщение будет присоединено к созданной правке. Если ваше
        лог сообщение короткое, вы можете указать его в командной строке,
        используя опцию <option>--message</option> (или
        <option>-m</option>):</para>

      <screen>
$ svn commit --message "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>

      <!-- @ENGLISH {{{
      <para>However, if you've been composing your log message as you
        work, you may want to tell Subversion to get the message from
        a file by passing the filename with the
        <option>-&#64738;-file</option> switch:</para>
      @ENGLISH }}} -->
      <para>Однако, если вы составляли лог сообщение во время работы,
        можно указать Subversion взять лог сообщение из файла, передавая
        имя файла в параметре <option>--file</option>:</para>

      <screen>
$ svn commit --file logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</screen>

      <!-- @ENGLISH {{{
      <para>If you fail to specify either the
        <option>-&#64738;-message</option> or <option>-&#64738;-file</option> switch,
        then Subversion will automatically launch your favorite editor
        (see the <literal>editor-cmd</literal> section in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for composing a log
        message.</para>
      @ENGLISH }}} -->
      <para>Если вы не укажите ни опции <option>--message</option> ни
        опции <option>--file</option>, для составления лог сообщения
        Subversion автоматически запустит ваш любимый редактор (см.
        <literal>editor-cmd</literal> в разделе
        <xref linkend="svn.advanced.confarea.opts.config"/>).</para>


      <tip>
        <!-- @ENGLISH {{{
        <para>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete the text and save
          again.</para>
        @ENGLISH }}} -->
        <para>Если в редакторе набирая сообщение решите отменить фиксацию,
          вы можете просто выйти из редактора без сохранения изменений.
          Если вы уже сохранили сообщение, просто удалите текст и
          выполните сохранение еще раз.</para>

        <screen>
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
a)bort, c)ontinue, e)dit
a
$
</screen>
      </tip>

      <!-- @ENGLISH {{{
      <para>The repository doesn't know or care if your changes make
        any sense as a whole; it only checks to make sure that nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files is out-of-date:</para>
      @ENGLISH }}} -->
      <para>Хранилище, в целом, не знает и не заботится о смысле ваших
        изменений; оно только контролирует, что бы никто не изменил
        те же файлы что и вы. Если это все-таки
        <emphasis>случилось</emphasis> вся фиксация будет отклонена с
        сообщением информирующим вас, что один или несколько файлов
        устарели:</para>

      <screen>
$ svn commit --message "Add another rule"
Sending        rules.txt
svn: Commit failed (details follow):
svn: Out of date: 'rules.txt' in transaction 'g'
</screen>

      <!-- @ENGLISH {{{
      <para>At this point, you need to run <command>svn
        update</command>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
      @ENGLISH }}} -->
      <para>Теперь вам нужно выполнить <command>svn update</command>
        разобраться со всеми объединениями и конфликтами и попытаться
        выполнить фиксацию снова.</para>

      <!-- @ENGLISH {{{
      <para>That covers the basic work cycle for using Subversion.
        There are many other features in Subversion that you can use
        to manage your repository and working copy, but you can get by
        quite easily using only the commands that we've discussed so
        far in this chapter.</para>
      @ENGLISH }}} -->
      <para>Мы рассмотрели простейший рабочий цикл при использовании
        Subversion. В Subversion существует много других возможностей
        которые вы можете применять для управления рабочей копией и
        хранилищем, но с помощью команд, которые мы рассмотрели
        в этой главе вы уже можете многое сделать.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
    <!-- @ENGLISH {{{
    <title>Examining History</title>
    @ENGLISH }}} -->
    <title>Анализ истории</title>

    <!-- @ENGLISH {{{
    <para>As we mentioned earlier, the repository is like a time
      machine.  It keeps a record of every change ever committed,
      and allows you to explore this history by examining previous
      versions of files and directories as well as the metadata that
      accompanies them.  With a single Subversion command, you can
      check out the repository (or restore an existing working copy)
      exactly as it was at any date or revision number in the past.
      However, sometimes you just want to <emphasis>peer
      into</emphasis> the past instead of <emphasis>going
      into</emphasis> the past.</para>
    @ENGLISH }}} -->
    <para>Как мы уже говорили, хранилище похоже на машину времени.
      Оно хранит запись о любом когда-либо зафиксированном изменении
      и позволяет вам просмотреть его хронологию путем анализа
      предыдущих версий файлов и директорий, равно как и
      метаданных присоединенных к ним. Одной командой Subversion
      вы можете создать рабочую копию (или восстановить существующую)
      точно в том виде, в котором она была в любой момент времени или номер
      правки в прошлом. Однако, как правило, иногда вам просто нужно
      <emphasis>заглянуть в</emphasis> прошлое, вместо <emphasis>возвращения
      в</emphasis> прошлое.</para>

    <!-- @ENGLISH {{{
    <para>There are several commands that can provide you with
      historical data from the repository:</para>
    @ENGLISH }}} -->
    <para>Существует несколько команд которые могут обеспечить вас
      хронологической информацией из хранилища:</para>

      <variablelist>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Shows you broad information: log messages with date
              and author information attached to revisions, and which
              paths changed in each revision.</para>
            @ENGLISH }}} -->
            <para>Показывает вам развернутую информацию: лог сообщения,
	      присоединенные к правкам, с указаной датой изменений и их
	      автором, а так-же измененные в правке пути файлов.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Shows you the specific details of how a file changed
              over time.</para>
            @ENGLISH }}} -->
            <para>Показывает конкретные детали того, как файл изменился
              с течением времени.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>This is used to retrieve any file as it existed in a
              particular revision number and display it on your
              screen.</para>
            @ENGLISH }}} -->
            <para>Эта команда используется для получения отдельного файла
              в том виде, в каком он был в конкретной ревизии и вывода его
              на экран.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
            <!-- @ENGLISH {{{
            <para>Displays the files in a directory for any given
              revision.</para>
            @ENGLISH }}} -->
            <para>Показывает файлы в директории для любой указанной
              правки.</para>
          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
      <title><command>svn log</command></title>

      <!-- @ENGLISH {{{
      <para>To find information about the history of a file or
        directory, use the <command>svn log</command>
        command. <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision, and,
        if it was provided, the log message that accompanied the
        commit.</para>
      @ENGLISH }}} -->
      <para>Для того, чтобы найти информацию о хронологии файла
        или директории воспользуйтесь командой <command>svn log</command>.
        <command>svn log</command> показывает информацию о том, кто изменял
        файл или директорию, в какой правке это было, дату и время этой правки
        и присоединенное к фиксации лог сообщение, если оно доступно.</para>

      <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 line

Initial import
------------------------------------------------------------------------
</screen>

      <!-- @ENGLISH {{{
      <para>Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order, or just a single revision, pass the
        <option>-&#64738;-revision</option> (<option>-r</option>)
        switch:</para>
      @ENGLISH }}} -->
      <para>Обратите внимание на то, что по умолчанию лог сообщения
        выводятся в <emphasis>обратном хронологическом порядке</emphasis>.
        Если вам нужно увидеть другой диапазон правок в заранее определенном
        порядке или только одну правку, укажите параметр
        <option>--revision</option> (<option>-r</option>):</para>

      <screen>
$ svn log --revision 5:19    # shows logs 5 through 19 in chronological order

$ svn log -r 19:5            # shows logs 5 through 19 in reverse order

$ svn log -r 8               # shows log for revision 8
</screen>

      <!-- @ENGLISH {{{
      <para>You can also examine the log history of a single file or
        directory.  For example:</para>
      @ENGLISH }}} -->
      <para>Кроме того, можно проанализировать историю лог сообщений
        отдельного файла или директории. Например:</para>

      <screen>
$ svn log foo.c
&hellip;
$ svn log http://foo.com/svn/trunk/code/foo.c
&hellip;
</screen>

      <!-- @ENGLISH {{{
      <para>These will display log messages <emphasis>only</emphasis>
        for those revisions in which the working file (or URL)
        changed.</para>

      <para>If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>-&#64738;-verbose</option> (<option>-v</option>) switch.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem, so in verbose mode, <command>svn
        log</command> will include a list of changed paths in a
        revision in its output:</para>
      @ENGLISH }}} -->
      <para>В результате, будут показаны лог сообщения
        <emphasis>только</emphasis> для тех правок, в которых рабочий
        файл (или URL) изменялись.</para>

      <para>Если вам нужно еще больше информации о файле или директории,
        то для <command>svn log</command> есть параметр
        <option>--verbose</option> (<option>-v</option>). Так как
        Subversion позволяет перемещать и копировать файлы и директории,
        важной является возможность отслеживания изменений путей в
        файловой системе, поэтому в режиме расширенного вывода,
        <command>svn log</command> включает перечень измененных в правке
        путей:</para>

      <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2002-07-14 08:15:29 -0500 | 1 line
Changed paths:
M /trunk/code/foo.c
M /trunk/code/bar.h
A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
</screen>

      <!-- @ENGLISH {{{
      <para>
        <command>svn log</command> also takes a <option>-&#64738;-quiet</option>
        (<option>-q</option>) switch, which suppresses the body of the
        log message.  When combined with <option>-&#64738;-verbose</option>, it
        gives just the names of the changed files.</para>
      @ENGLISH }}} -->
      <para>Кроме того<command>svn log</command> имеет параметр 
        <option>--quiet</option> (<option>-q</option>), сокращающий лог
        сообщение. При его объединении с <option>--verbose</option>
        выдаются только имена измененных файлов.</para>

      <sidebar>
        <!-- @ENGLISH {{{
        <title>Why Does <command>svn log</command> Give Me an Empty
          Response?</title>

        <para>After working with Subversion for a bit, most users will
          come across something like this:</para>
        @ENGLISH }}} -->
        <title>Почему <command>svn log</command> ничего не выводит?</title>

        <para>Поработав немного с Subversion, многие пользователи
          сталкиваются с чем-то подобным этому:</para>

        <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>

        <!-- @ENGLISH {{{
        <para>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the top-most URL of your repository, as in <command>svn log -r 2
          http://svn.collab.net/repos/svn</command>.</para>
        @ENGLISH }}} -->
        <para>На первый взгляд это похоже на ошибку. Однако учтите, что
          так как правки привязаны к хранилищу, <command>svn log</command>
          использует путь из хранилища. Если путь просто не указан,
          Subversion по умолчанию будет использовать в качестве целевого
          объекта текущую рабочую директорию. И в результате, если вы
          находитесь в поддиректории рабочей копии и попытаетесь
          посмотреть лог правки в которой ни эта директория, ни ее
          поддиректории не менялись, Subversion покажет пустой лог.
          Если вы хотите знать, что менялось в этой правке, попробуйте
          направить <command>svn log</command> прямо на самый верхний URL
          вашего хранилища, примерно вот так <command>svn log -r 2
          http://svn.collab.net/repos/svn</command>.</para>


      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
      <title><command>svn diff</command></title>

      <!-- @ENGLISH {{{
      <para>We've already seen <command>svn diff</command>
        before&mdash;it displays file differences in unified diff
        format; it was used to show the local modifications made to
        our working copy before committing to the repository.</para>

      <para>In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
      @ENGLISH }}} -->
      <para>Ранее, мы уже познакомились с <command>svn diff</command>
        &mdash; эта команда показывает различия файла в объединенном формате
        представления различий; она использовалась, для того, что бы показать
        локальные изменения внесенные в рабочую копию перед их фиксацией в
        хранилище.</para>

      <para>Вообще, существует <emphasis>три</emphasis> возможных варианта
        использования <command>svn diff</command>:</para>

      <itemizedlist>

        <!-- @ENGLISH {{{
        <listitem>
          <para>Examine local changes</para>
        </listitem>

        <listitem>
          <para>Compare your working copy to the repository</para>
        </listitem>

        <listitem>
          <para>Compare repository to repository</para>
        </listitem>
        @ENGLISH }}} -->
        <listitem>
          <para>Анализ локальных изменений</para>
        </listitem>

        <listitem>
          <para>Сравнение рабочей копии с хранилищем</para>
        </listitem>

        <listitem>
          <para>Сравнение хранилища с хранилищем</para>
        </listitem>

      </itemizedlist>

      <sect3 id="svn.tour.history.diff.local">
        <!-- @ENGLISH {{{
        <title>Examining Local Changes</title>

        <para>As we've seen, invoking <command>svn diff</command> with
          no switches will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>
        @ENGLISH }}} -->
        <title>Анализ локальных изменений</title>

        <para>Как мы уже знаем, запуск <command>svn diff</command> без
          параметров сравнивает рабочие файлы, с кешированными
          в <filename>.svn</filename> <quote>первоначальными</quote>
          копиями:</para>

        <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt (revision 3)
+++ rules.txt (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <sect3 id="svn.tour.history.diff.wcrepos">
        <!-- @ENGLISH {{{
        <title>Comparing Working Copy to Repository</title>

        <para>If a single <option>-&#64738;-revision</option>
          (<option>-r</option>) number is passed, then your
          working copy is compared to the specified revision in the
          repository.</para>
        @ENGLISH }}} -->
        <title>Сравнение рабочей копии с хранилищем</title>

        <para>Если в <option>--revision</option> (<option>-r</option>)
          указан один номер, то рабочая копия сравнивается
          с указанной правкой хранилища.</para>

        <screen>
$ svn diff --revision 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt (revision 3)
+++ rules.txt (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <sect3 id="svn.tour.history.diff.reposrepos">
        <!-- @ENGLISH {{{
        <title>Comparing Repository to Repository</title>

        <para>If two revision numbers, separated by a colon, are
          passed via <option>-&#64738;-revision</option>
          (<option>-r</option>), then the two revisions are directly
          compared.</para>
        @ENGLISH }}} -->
        <title>Сравнение хранилища с хранилищем</title>

        <para>Если через <option>--revision</option> (<option>-r</option>)
          передаются две правки, разделенные двоеточием, то непосредственно
          сравниваются две правки.</para>

        <screen>
$ svn diff --revision 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt (revision 2)
+++ rules.txt (revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>

        <!-- @ENGLISH {{{
        <para>Not only can you use <command>svn diff</command> to
          compare files in your working copy to the repository, but if
          you supply a URL argument, you can examine the differences
          between items in the repository without even having a
          working copy.  This is especially useful if you wish to
          inspect changes in a file when you don't have a working copy
          on your local machine:</para>
        @ENGLISH }}} -->
        <para><command>svn diff</command> можно использовать не только
          для сравнения файлов в рабочей копии, если вы укажите
          в качестве аргумента URL, то сможете анализировать различия между
          элементами, даже не имея рабочей копии. Это полезно в случае,
          если вы хотите проверить изменения в файла тогда когда у вас нет его
          рабочей копии на локальной машине:</para>

        <screen>
$ svn diff --revision 4:5 http://svn.red-bean.com/repos/example/trunk/text/rules.txt
&hellip;
$
</screen>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.cat">
      <title><command>svn cat</command></title>

      <!-- @ENGLISH {{{
      <para>If you want to examine an earlier version of a file and
        not necessarily the differences between two files, you can use
        <command>svn cat</command>:</para>
      @ENGLISH }}} -->
      <para>Если вы хотите проанализировать ранние версии файла, а не
        различия между двумя файлами, можно воспользоваться
        <command>svn cat</command>:</para>

      <screen>
$ svn cat --revision 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>

      <!-- @ENGLISH {{{
      <para>You can also redirect the output directly into a
        file:</para>
      @ENGLISH }}} -->
      <para>Или вы можете перенаправить вывод прямо в файл:</para>

      <screen>
$ svn cat --revision 2 rules.txt &gt; rules.txt.v2
$
</screen>

      <!-- @ENGLISH {{{
      <para>You're probably wondering why we don't just use
        <command>svn update -&#64738;-revision</command> to update the file to
        the older revision.  There are a few reasons why we might
        prefer to use <command>svn cat</command>.</para>

      <para>First, you may want to see the differences between two
        revisions of a file using an external diff program (perhaps a
        graphical one, or perhaps your file is in such a format that
        the output of unified diff is nonsensical).  In this case,
        you'll need to grab a copy of the old revision, redirect it to
        a file, and pass both that and the file in your working copy
        to your external diff program.</para>

      <para>Sometimes it's easier to look at an older version of a
        file in its entirety as opposed to just the differences
        between it and another revision.</para>
      @ENGLISH }}} -->
      <para>Вероятно, вам интересно почему мы не воспользовались
        <command>svn update --revision</command>, что бы обновить
        файл старой правкой. Есть несколько причин, почему нам
        предпочтительнее воспользоваться
        <command>svn cat</command>.</para>

      <para>Во-первых, возможно вы хотите увидеть различия между
        двумя правками одного файла используя внешнюю программу
        просмотра различий (возможно с графическим интерфейсом
        или может быть файл в таком формате, что объединенный вывод
        различий не имеет смысла) В этом случае, вам нужно вытащить
        копию старой правки, перенаправить ее в файл и передать
        этот файл вместе с файлом в рабочей копии внешней программе
        просмотра различий.</para>

      <para>Иногда проще посмотреть полную старую версию файла чем
        только различия между ним и его другой правкой.</para>

      </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.list">
      <title><command>svn list</command></title>

      <!-- @ENGLISH {{{
      <para>The <command>svn list</command> command shows you what
        files are in a repository directory without actually
        downloading the files to your local machine:</para>
      @ENGLISH }}} -->
      <para>Команда <command>svn list</command> показывает содержимое
        директории в хранилище, при этом не закачивая его на локальную
        машину:</para>

      <screen>
$ svn list http://svn.collab.net/repos/svn
README
branches/
clients/
tags/
trunk/
</screen>

      <!-- @ENGLISH {{{
      <para>If you want a more detailed listing, pass the
        <option>-&#64738;-verbose</option> (<option>-v</option>) flag to get
        output like this:</para>
      @ENGLISH }}} -->
      <para>Если вам нужен более детальный листинг, тогда воспользуйтесь
        флагом <option>--verbose</option> (<option>-v</option>) чтобы увидеть
        нечто, подобное этому:</para>

      <screen>
$ svn list --verbose http://svn.collab.net/repos/svn
   2755 harry          1331 Jul 28 02:07 README
   2773 sally               Jul 29 15:07 branches/
   2769 sally               Jul 29 12:07 clients/
   2698 harry               Jul 24 18:07 tags/
   2785 sally               Jul 29 19:07 trunk/
</screen>

       <!-- @ENGLISH {{{
      <para>The columns tell you the revision at which the file or
        directory was last modified, the user who modified it, the size
        if it is a file, the date it was last modified, and the item's
        name.</para>
      @ENGLISH }}} -->
      <para>Колонки показывают правку, в которой файл или директория последний
        раз менялись, имя пользователя делавшего изменения, размер если это
        файл, дату последнего изменения и имя элемента.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.finalword">
      <!-- @ENGLISH {{{
      <title>A Final Word on History</title>

      <para>In addition to all of the above commands, you can use
        <command>svn update</command> and <command>svn
          checkout</command> with the <option>-&#64738;-revision</option> switch
        to take an entire working copy <quote>back in time</quote>
        <footnote><para>See?  We told you that Subversion was a time
        machine.</para></footnote>:</para>
      @ENGLISH }}} -->
      <title>Заключительное слово о истории</title>

      <para>Дополнительно ко всем упомянутым выше командам, можно
        воспользоваться <command>svn update</command> и <command>svn
        checkout</command> с параметром <option>--revision</option>
        для того, что бы переместить рабочую копию <quote>назад во
        времени</quote><footnote><para>Видите? Мы же говорили вам,
        что Subversion это машина времени.</para></footnote>:</para>

      <screen>
$ svn checkout --revision 1729 # Checks out a new working copy at r1729
&hellip;
$ svn update --revision 1729 # Updates an existing working copy to r1729
&hellip;
</screen>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.other">
    <!-- @ENGLISH {{{
    <title>Other Useful Commands</title>

      <para>While not as frequently used as the commands previously
        discussed in this chapter, you will occasionally need these
        commands.</para>
    @ENGLISH }}} -->
    <title>Другие полезные команды</title>

      <para>Притом, что эти команды используются не так часто как те
        которые рассматривались ранее в этой главе, иногда эти команды вам
        все-таки понадобятся.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.other.cleanup">
      <title><command>svn cleanup</command></title>

      <!-- @ENGLISH {{{
      <para>When Subversion modifies your working copy (or any
        information within <filename>.svn</filename>), it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion writes its intentions to a log file.  Next it
        executes the commands in the log file to apply the requested
        change, holding a lock on the relevant part of the working
        copy while it works &mdash; to prevent other Subversion clients
        from accessing the working copy in mid-change.  Finally,
        Subversion removes the log file.  Architecturally, this is
        similar to a journaled filesystem.  If a Subversion operation
        is interrupted (if the process is killed, or if the machine
        crashes, for example), the log files remain on disk.  By
        re-executing the log files, Subversion can complete the
        previously started operation, and your working copy can get
        itself back into a consistent state.</para>

      <para>And this is exactly what <command>svn cleanup</command>
        does: it searches your working copy and runs any leftover
        logs, removing working copy locks in the process.
        If Subversion ever tells you that some part of your working copy
        is <quote>locked</quote>, then this is the command that you
        should run.  Also, <command>svn status</command> will display
        an <literal>L</literal> next to locked items:</para>
      @ENGLISH }}} -->
      <para>Когда Subversion изменяет рабочую копию (или любую информацию
        в области <filename>.svn</filename>) она пытается делать это
        как можно более безопасно. Перед изменением рабочей
        копии Subversion записывает свои намерения в лог файл. Затем
        для выполнения запрошенных изменений она выполняет  команды из лог
        файла, устанавливая блокировку той части рабочей копии, с которой
        работает &mdash; делается это для невозможности работы других
        Subversion-клиентов с рабочей копией, которая находится в
        промежуточном состоянии. После выполнения запрошеных действий
        Subversion удаляет лог файл. Архитектурно, это
        напоминает журналируемую файловую систему. Если работа Subversion
        была прервана (в результате того, что процесс был убит или, например,
        из-за машинного сбоя) лог файлы остаются на диске. Перезапустив
        выполнение лог файлов, Subversion может завершить предварительно
        начатые операции и рабочая копия снова вернется в согласованное
        состояние.</para>

      <para>Что собственно и делает <command>svn cleanup</command>:
        в рабочей копии выполняет поиск и выполнение незавершенных лог файлов,
        удаляя по ходу выполнения блокировки в рабочей копии. Если Subversion
        когда-нибудь говорила вам о том, что часть рабочей копии
        <quote>заблокирована</quote> тогда вам нужно запустить эту команду.
        Кроме того <command>svn status</command> покажет для заблокированных
        элементов букву <literal>L</literal>:</para>

      <screen>
$ svn status
  L    somedir
M      somedir/foo.c

$ svn cleanup
$ svn status
M      somedir/foo.c
</screen>

      <!-- @ENGLISH {{{
      <para>Don't confuse these working copy locks with the ordinary
        locks that Subversion users create when using
        the <quote>lock-modify-unlock</quote> model of concurrent
        version control; see
        <xref linkend="svn.advanced.locking.meanings"/> for
        clarification.</para>
      @ENGLISH }}} -->
      <para>Не путайте эти блокировки рабочей копии с обычными 
        блокировками, устанавливаемыми пользоватлями Subversion,
        использующими модель конкурентного управления версиями
        <quote>lock-modify-unlock</quote>; за более подробным 
        определением обратитесь к <xref
        linkend="svn.advanced.locking.meanings"/></para>

    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.other.import">
      <title><command>svn import</command></title>

      <!-- @ENGLISH {{{
      <para>The <command>svn import</command> command is a quick way
        to copy an unversioned tree of files into a repository,
        creating intermediate directories as necessary.</para>
      @ENGLISH }}} -->
      <para>Команда <command>svn import</command> это быстрый способ
        скопировать не версионированное дерево файлов в хранилище,
        Создавая при необходимости промежуточные директории.</para>

      <screen>
$ svnadmin create /usr/local/svn/newrepos
$ svn import mytree file:///usr/local/svn/newrepos/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
</screen>

      <!-- @ENGLISH {{{
      <para>The previous example copied the contents of directory
        <filename>mytree</filename> under the directory
        <filename>some/project</filename> in the repository:</para>
      @ENGLISH }}} -->
      <para>В предыдущем примере выполняется копирование содержимого
        директории <filename>mytree</filename> в директорию
        <filename>some/project</filename> хранилища:</para>

      <screen>
$ svn list file:///usr/local/svn/newrepos/some/project
bar.c
foo.c
subdir/
</screen>

      <!-- @ENGLISH {{{
      <para>Note that after the import is finished, the original tree
        is <emphasis>not</emphasis> converted into a working copy.  To
        start working, you still need to <command>svn
        checkout</command> a fresh working copy of the tree.</para>
      @ENGLISH }}} -->
      <para>Обратите внимание на то, что после завершения импорта,
        оригинальное дерево файлов <emphasis>не</emphasis>
        конвертируется в рабочую копию. Для того, чтобы начать работать вам
        необходимо создать новую рабочую копию (<command>svn
        checkout</command>) дерева файлов.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
    <!-- @ENGLISH {{{
    <title>Summary</title>

      <para>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref"/> to
        get an idea of all the many different commands that Subversion
        has&mdash;and how you can use them to make your work
        easier.</para>
    @ENGLISH }}} -->
    <title>Подводя итоги</title>

      <para>На настоящий момент мы рассмотрели большинство команд Subversion
        клиента. За исключением тех, которые предназначены для работы с
        ветвлениями и слияниями (см. <xref linkend="svn.branchmerge"/>) и
        свойствами (см. <xref linkend="svn.advanced.props"/>). Кроме этого,
        найдите время просмотреть <xref linkend="svn.ref"/> для того, что бы
        получить представление обо всем многообразии имеющихся у Subversion
        команд &mdash; и о том как с их помощью вы можете упростить свою
        работу.</para>

  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
vim: tw=78:ft=svnbook
-->
