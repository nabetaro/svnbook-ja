<?xml version="1.0" encoding="UTF-8"?>
<appendix id="svn.intro">

  <appendixinfo>
    <othername id="svn.intro.architecture.dia-1.prepositional-case"
      role="title-variant">рисунке 1.1, &laquo;Архитектура
        Subversion&raquo;</othername>
  </appendixinfo>
  <!-- @ENGLISH {{{
  <title>Subversion Quick-Start Guide</title>
  @ENGLISH }}} -->
  <title>Быстрый старт в Subversion</title>
  <!-- See also svn.preface.organization -->


  <!-- @ENGLISH {{{
  <para>Some people have trouble absorbing a new technology by
    reading the sort of <quote>top down</quote> approach provided by
    this book.  This appendix contains a very short introduction to
    Subversion, and is designed to give <quote>bottom up</quote>
    learners a fighting chance.  If you prefer to learn by
    experimentation, the following demonstration will get you up and
    running.  Along the way, we give links to the relevant chapters
    of this book.</para>
  @ENGLISH }}} -->
  <para>Некоторые испытывают трудности поглощения новой технологии
    читая приближение <quote>с верху вниз</quote>, предлагаемое этой
    книгой. Этот раздел представляет собой очень короткое введение в
    Subversion и предназначен для того, что бы помочь изучающим
    <quote>снизу вверх</quote>. Если вы из тех, кто предпочитает
    учиться на экспериментах то последующая демонстрация поможет
    вам начать. По ходу дела мы давали ссылки на соответствующие
    главы книги.
  </para>

  <!-- @ENGLISH {{{
  <para>If you're new to the entire concept of version control or to
    the <quote>copy-modify-merge</quote> model used by both CVS and
    Subversion, then you should read <xref linkend="svn.basic"/>
    before going any further.</para>
  @ENGLISH }}} -->
  <para>Если вы не совсем знакомы с концепциями контроля версий или
    моделью <quote>копирование-изменение-слияние</quote>, используемой
    как CVS так и Subversion, перед тем как идти дальше, вам нужно
    прочитать <xref linkend="svn.basic"/>.</para>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.install">

    <!-- @ENGLISH {{{
    <title>Installing Subversion</title>
    @ENGLISH }}} -->
    <title>Установка Subversion</title>

    <!-- @ENGLISH {{{
    <para>Subversion is built on a portability layer called
      APR&mdash;the Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      as one of its network server programs, its dependence on APR
      <emphasis>does not</emphasis> mean that Apache is a required
      component.  APR is a standalone library useable by any
      application.  It does mean, however, that like Apache,
      Subversion clients and servers run on any operating system that
      the Apache httpd server runs on: Windows, Linux, all flavors of
      BSD, Mac OS X, Netware, and others.</para>
    @ENGLISH }}} -->
    <para>Subversion построена на портабельном слое под названием
      APR (the Apache Portable Runtime library). Библиотека APR предоставляет
      все интерфейсы, необходимые для функционирования Subversion под
      управлением различных операционных систем: доступ к жесткому диску,
      доступ к сети, управление памятью, и тому подобное. Не смотря на то,
      что Subversion может использовать Apache как сервер, ее зависимость
      от Apache <emphasis>не означает</emphasis> того, что Apache
      является необходимым компонентом. APR представляет собой отдельную
      библиотеку, которую может использовать любое приложение. Кроме прочего,
      это означает, что как и Apache, Subversion клиенты и серверы работают
      на любой операционной системе на которой работает httpd сервер Apache:
      Windows, Linux, все разновидности BSD, MacOS X, Netware и другие.
    </para>

    <!-- @ENGLISH {{{
    <para>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's website
      (<ulink url="http://subversion.tigris.org"/>) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion.</para>
    @ENGLISH }}} -->
    <para>Наиболее простой способ получить Subversion - скачать бинарный
      пакет, собранный для вашей операционной системы. Как правило, эти
      пакеты присланные волонтерами, доступны для загрузки с веб-сайта
      Subversion (<ulink url="http://subversion.tigris.org"/>). Сайт обычно
      содержит графический инсталлятор для пользователей операционных
      систем Microsoft. Если вы используете Unix-подобную ОС то для получения
      Subversion вы можете использовать пакетную систему, специфичную для
      вашей системы (RPM, DEB, ports tree и т. д.).
    </para>

    <!-- @ENGLISH {{{
    <para>Alternately, you can build Subversion directly from source
      code.  From the Subversion website, download the latest
      source-code release.  After unpacking it, follow the
      instructions in the <filename>INSTALL</filename> file to build
      it.  Note that a released source package contains everything you
      need to build a command-line client capable of talking to a
      remote repository (in particular, the apr, apr-util, and neon
      libraries).  But optional portions of Subversion have many other
      dependencies, such as Berkeley DB and possibly Apache httpd.  If
      you want to do a complete build, make sure you have all of the
      packages documented in the <filename>INSTALL</filename>
      file.</para>
    @ENGLISH }}} -->
    <para>В качестве альтернативного варианта вы можете построить Subversion
      прямо из исходного кода. Закачайте с web-сайта Subversion последний
      source-code релиз. После его распаковки для его сборки
      следуйте инструкциям в файле <filename>INSTALL</filename>. Обратите
      внимание, что такой пакет содержит все необходимое для сборки CLI-клиента
      способного работать с удаленным хранилищем (обычно это библиотеки apr,
      apr-util и  neon). Однако некоторые опциональные части Subversion имеют
      много других зависимостей, таких как Berkeley DB и возможно Apache httpd.
      Если вы хотите выполнить полную сборку, убедитесь, что у вас есть все
      пакеты, указанные в файле <filename>INSTALL</filename>.</para>

    <para>If you're one of those folks that likes to use bleeding-edge
      software, you can also get the Subversion source code from the
      Subversion repository in which it lives.  Obviously, you'll need
      to already have a Subversion client on hand to do this.  But
      once you do, you can checkout a working copy of the Subversion source
      repository from <ulink url="http://svn.collab.net/repos/svn/trunk/"/>:
      <footnote>
        <para>Note that the URL checked out in the example above
          ends not with <literal>svn</literal>, but with a
          subdirectory thereof called <literal>trunk</literal>.  See
          our discussion of Subversion's branching and tagging model
          for the reasoning behind this.</para>
      </footnote></para>

    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk subversion
A    subversion/HACKING
A    subversion/INSTALL
A    subversion/README
A    subversion/autogen.sh
A    subversion/build.conf
&hellip;
</screen>

    <para>The above command will checkout the bleeding-edge, latest
      version of the Subversion source code into a subdirectory
      named <filename>subversion</filename> in your current working
      directory.  Obviously, you can adjust that last argument as
      you see fit.  Regardless of what you call the new working copy
      directory, though, after this operation completes, you will
      now have the Subversion source code.  Of course, you will
      still need to fetch a few helper libraries (apr, apr-util,
      etc.)&mdash;see the <filename>INSTALL</filename> file in the
      top level of the working copy for details.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.quickstart">

    <!-- @ENGLISH {{{
    <title>High-speed Tutorial</title>
    @ENGLISH }}} -->
    <title>High-speed Tutorial</title>

    <blockquote>
      <para><quote>Please make sure your seat backs are in their full,
        upgright position, and that your tray tables are stored.
        Flight attendants, prepare for take-off&hellip;.</quote></para>
    </blockquote>

    <para>The following is a very high-level tutorial which will walk
      you through some basic Subversion configuration and operation.
      By the time you complete the tutorial, you should have a basic
      understanding of Subversion's typical usage.</para>

    <note>
      <!-- @ENGLISH {{{
      <para>The examples used in this appendix assume that you have
        <command>svn</command>, the Subversion command-line client,
        and <command>svnadmin</command>, the administrative tool,
        ready to go.  It also assumes you are using Subversion 1.2 or
        later (run <command>svn -&#64738;-version</command> to check.)</para>
      @ENGLISH }}} -->
      <para>Примеры, используемые в этом приложении предполагают наличие у
        вас работающих Subversion клиента для командной строки
        <command>svn</command> и инструмента администрирования
        <command>svnadmin</command>. Кроме этого он рассчитан на то, что вы
        используете Subversion версии 1.2 или более поздней (для того, чтобы
        это проверить, выполните <command>svn --version</command>).</para>
    </note>

    <!-- @ENGLISH {{{
    <para>Subversion stores all versioned data in a central
      repository.  To begin, create a new repository:</para>
    @ENGLISH }}} -->
    <para>Subversion хранит всю версионированную информацию в
      центральном хранилище. Для начала, создадим новое
      хранилище:</para>

    <screen>
$ svnadmin create /path/to/repos
$ ls /path/to/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>

    <!-- @ENGLISH {{{
    <para>This command creates a new directory
      <filename>/path/to/repos</filename> which contains a Subversion
      repository.  This new directory contains (among other things) a
      collection of database files.  You won't see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see
      <xref linkend="svn.reposadmin"/>.</para>
    @ENGLISH }}} -->
    <para>Эта команда создает новую директорию
      <filename>/path/to/repos</filename> содержащую Subversion
      хранилище. Убедитесь, что эта директория находится на локальном
      диске, <emphasis>не</emphasis> на сетевой шаре. Преимущественно в
      эта новая директория (кроме прочего) содержит набор файлов базы данных.
      Вы не увидите своих версионированных файлов если вы загляните внутрь.
      Больше информации о создании и поддержке хранилища ищите в
      <xref linkend="svn.reposadmin"/>.</para>

    <!-- @ENGLISH {{{
    <para>Subversion has no concept of a <quote>project</quote>.  The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  The merits of each approach are discussed
      in <xref linkend="svn.reposadmin.projects.chooselayout"/>.
      Either way, the repository only manages files and directories,
      so it's up to humans to interpret particular directories
      as <quote>projects</quote>.  So while you might see references
      to projects throughout this book, keep in mind that we're only
      ever talking about some directory (or collection of directories)
      in the repository.</para>
    @ENGLISH }}} -->
    <para>У Subversion нет понятия <quote>проект</quote>. Хранилище
      является просто виртуальной версионированной файловой системой,
      большое дерево файлов, которое может содержать все, что угодно.
      Одни администраторы предпочитают держать в хранилище только
      один проект, другие держать в хранилище множество проектов,
      размещая их в отдельных директориях. Достоинства каждого из
      подходов рассмотрены в  <xref
      linkend="svn.reposadmin.projects.chooselayout"/>. В любом случае,
      хранилище управляет только файлами и директориями, оставляя
      за человеком право интерпретировать отдельные директории
      как <quote>проекты</quote>. Поэтому, если в тексте книги вы
      встретите упоминание проекта, помните, что имеется в виду
      просто директория (или несколько директорий) хранилища.</para>

    <!-- @ENGLISH {{{
    <para>In this example, we assume that you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing them into a single directory
      called <filename>myproject</filename> (or whatever you wish).
      For reasons that will be clear later (see
      <xref linkend="svn.branchmerge"/>), your project's tree
      structure should contain three top-level directories
      named <filename>branches</filename>,
      <filename>tags</filename>, and
      <filename>trunk</filename>.  The <filename>trunk</filename>
      directory should contain all of your data,
      while <filename>branches</filename>
      and <filename>tags</filename> directories are empty:</para>
    @ENGLISH }}} -->
    <para>В этом примере мы подразумеваем наличие у вас какого то проекта
      (набора файлов или директорий), который вы хотите импортировать в
      только что созданное Subversion хранилище. Начните с объединения их
      в отдельной директории названой <filename>myproject</filename>
      (или как-то иначе). По причинам, которые будут ясны позже (см.
      <xref linkend="svn.branchmerge"/>), ваше дерево проекта должно содержать
      три директории верхнего уровня с названиями
      <filename>branches</filename>, <filename>tags</filename> и
      <filename>trunk</filename>. Вся ваша информация должна находиться в
       директории <filename>trunk</filename>, а директории
      <filename>branches</filename> и <filename>tags</filename> должны быть
      пустыми:</para>

    <screen>
/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     &hellip;
</screen>

    <!-- @ENGLISH {{{
    <para>The <filename>branches</filename>, <filename>tags</filename>,
      and <filename>trunk</filename> subdirectories aren't actually
      required by Subversion.  They're merely a popular convention
      that you'll most likely want to use later on.</para>

    <para>Once you have your tree of data ready to go, import it into
      the repository with the <command>svn import</command> command
      (see <xref linkend="svn.tour.other.import"/>):</para>
    @ENGLISH }}} -->
    <para>Использовать поддиректории <filename>branches</filename>,
      <filename>tags</filename> и <filename>trunk</filename> не 
      обязательно. Просто такой подход чаще всего используется и
      вероятнее всего в дальнейшем вы будете использовать именно
      его.</para>

    <para>Как только вы получите готовое дерево данных, импортируйте его
      в хранилище при помощи команды <command>svn import</command>
      (см. <xref linkend="svn.tour.other.import"/>):</para>

    <screen>
$ svn import /tmp/myproject file:///path/to/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
&hellip;
Committed revision 1.
$
</screen>

    <!-- @ENGLISH {{{
    <para>Now the repository contains this tree of data.  As mentioned
      earlier, you won't see your files by directly peeking into the
      repository;  they're all stored within a database.  But the
      repository's imaginary filesystem now contains a top-level
      directory named <filename>myproject</filename>, which in turn
      contains your data.</para>
    @ENGLISH }}} -->
    <para>Теперь в хранилище находится это дерево данных. Как было
      отмечено ранее, вы не увидите своих файлов если загляните в
      хранилище напрямую; все хранится в базе данных. Однако сейчас
      воображаемая файловая системы хранилища имеет директорию верхнего
      уровня с названием <filename>myproject</filename> которая
      содержит вашу информацию.</para>

    <!-- @ENGLISH {{{
    <para>Note that the original <filename>/tmp/myproject</filename>
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  In order to
      start manipulating repository data, you need to create a new
      <quote>working copy</quote> of the data, a sort of private
      workspace.  Ask Subversion to <quote>check out</quote> a working
      copy of the <filename>myproject/trunk</filename> directory in
      the repository:</para>
    @ENGLISH }}} -->
    <para>Обратите внимание на то, что первоначальная директория
      <filename>/tmp/project</filename> остается без изменений;
      Subversion о ней не знает. (Фактически, при желании, вы можете даже
      удалить этот каталог.) Чтобы начать работать с информацией хранилища
      вам нужно создать новую <quote>рабочую копию</quote> информации,
      своего рода частное рабочее пространство. Попросите Subversion
      создать рабочую копию директории <filename>myproject/trunk</filename>
      хранилища:</para>

    <screen>
$ svn checkout file:///path/to/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
&hellip;
Checked out revision 1.
</screen>

    <!-- @ENGLISH {{{
    <para>Now you have a personal copy of part of the repository in a
      new directory named <filename>myproject</filename>.  You can edit
      the files in your working copy and then commit those changes
      back into the repository.</para>
    @ENGLISH }}} -->
    <para>Сейчас у вас в новой директории <filename>myproject</filename>
      есть личная копия части хранилища. В рабочей копии вы можете
      редактировать файлы, а затем зафиксировать внесенные изменения
      в хранилище.</para>

    <itemizedlist>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Enter your working copy and edit a file's
          contents.</para>
        @ENGLISH }}} -->
        <para>Откройте свою рабочую копию и отредактируйте
          содержимое файлов.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn diff</command> to see unified diff
          output of your changes.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn diff</command> чтобы увидеть
          объединенный diff внесенных изменений.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn commit</command> to commit the new
          version of your file to the repository.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn commit</command> для фиксации
          новой версии ваших файлов в хранилище.</para>
      </listitem>
      <listitem>
        <!-- @ENGLISH {{{
        <para>Run <command>svn update</command> to bring your working
          copy <quote>up-to-date</quote> with the repository.</para>
        @ENGLISH }}} -->
        <para>Выполните <command>svn update</command> для приведения
          рабочей копии в <quote>актуальное</quote> состояние по
          отношению к хранилищу.</para>
      </listitem>
    </itemizedlist>

    <!-- @ENGLISH {{{
    <para>For a full tour of all the things you can do with your
      working copy, read <xref linkend="svn.tour"/>.</para>
    @ENGLISH }}} -->
    <para>Для получения полного списка возможных действий с рабочей копией
      прочтите <xref linkend="svn.tour"/>.</para>

    <!-- @ENGLISH {{{
    <para>At this point, you have the option of making your repository
      available to others over a network.  See <xref
      linkend="svn.serverconfig"/> to learn about the different sorts of
      server processes available and how to configure them.</para>
    @ENGLISH }}} -->
    <para>После этого вы можете сделать ваше хранилище доступным
      для других через сеть. См. <xref linkend="svn.serverconfig"/> для
      знакомства с различными типами доступных серверных процессов
      и методами их настройки.</para>

    <para>### TODO:  Let's make this into a full tutorial, rather than 
      simply referring off to other sections. ###</para>

  </sect1>


</appendix>

<!--
local variables:
sgml-parent-document: ("book.xml" "appendix")
end:
vim: tw=78:ft=svnbook
-->

