<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- originated from English revision 652 -->
<chapter id="svn-ch-1">

  <title>Introducción</title>

  <simplesect>
    <para> El control de versiones es el arte del manejo de los cambios
      en la información. Ha sido durante mucho tiempo una herramienta crítica
      para los programadores, quienes normalmente empleaban su tiempo haciendo
      pequeños cambios en el software y después deshaciendo esos cambios al día
      siguiente. Pero la utilidad del software de control de versiones se
      extiende más allá de los límites del mundo del desarrollo de software.
      Allá donde pueda encontrarse a gente usando ordenadores para manejar
      información que cambia a menudo, hay un hueco para el control de versiones.
      Y aquí es donde entra en juego Subversion.
    </para>

    <para>Este capítulo contiene una introducción <!--TODO: a high-level
      introduction 
      julot: interpreto high level como general
      -->general a Subversion &mdash; qué es; qué hace;
      cómo conseguirlo.
    </para>

  </simplesect>


  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 1 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-1">

    <title>¿Qué es Subversion?</title>
      
    <para>Subversion es un sistema de control de versiones libre y de código 
      fuente abierto. Es decir, Subversion maneja ficheros y directorios
      a través del tiempo. Hay un árbol de ficheros en un <firstterm>
      repositorio</firstterm> central. El repositorio es como un servidor 
      de ficheros ordinario, excepto porque recuerda todos los cambios 
      hechos a sus ficheros y directorios. Ésto le permite recuperar 
      versiones antiguas de sus datos, o examinar el historial de cambios
      de los mismos. En este aspecto, mucha gente piensa en los 
      sistemas de versiones como en una especie de <quote>máquina del tiempo
      </quote>.</para>
    
    <para>Subversion puede acceder al repositorio a través de redes, lo que le
      permite ser usado por personas que se encuentran en distintos ordenadores.
      A cierto nivel, la capacidad para que varias personas puedan modificar y 
      administrar el mismo conjunto de datos desde sus respectivas ubicaciones 
      fomenta la colaboración.
      Se puede progresar mas rápidamente sin un único conducto por el cual
      deban pasar todas las modificaciones.
      Y puesto que el trabajo se encuentra bajo el control de versiones, no hay
      razón para temer por que la calidad del mismo vaya a verse afectada por
      la pérdida de ese conducto único&mdash;si se ha hecho un cambio incorrecto a
      los datos, simplemente deshaga ese cambio.</para>

    <para>Algunos sistemas de control de versiones son también sistemas de
      administración de configuración de software.<!--TODO: also software
      configuration management (SCM) systems.--> Estos sistemas son diseñados
      específicamente <!--TODO:are specifically tailored to manage trees -->
      para la administración de árboles de código fuente, y tienen muchas
      características que son específicas del desarrollo de software&mdash;
      tales como <!--TODO:such as natively understanding programming 
      languages,-->el entendimiento nativo de lenguajes de programación, o 
      el suministro de herramientas para la construcción de software. Sin
      embargo, Subversion no es uno de estos sistemas. Subversion es un 
      sistema general que puede ser usado para administrar <emphasis>
      cualquier</emphasis> <!--TODO:collection of files--> conjunto de 
      ficheros. Para usted, esos ficheros pueden ser código fuente&mdash;
      para otros, cualquier cosa desde la lista de la compra de comestibles 
      hasta combinaciones de vídeo digital y más allá.<!--TODO:for
      others, anything from grocery shopping lists to digital video 
      mixdowns and beyond. Esta frase me ha matado :p--></para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 2 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-2">

    <title>Historia de Subversion</title>

    <para>A principios del 2000, CollabNet, Inc. (<systemitem class="url">http://www.collab.net</systemitem>) 
      comenzó a buscar desarrolladores 
      para escribir un sustituto para CVS. CollabNet ofrece un conjunto de
      herramientas de software colaborativo llamado SourceCast, del cual un componente 
      es el control de versiones. Aunque SourceCast usaba CVS como su
      sistema de control de versiones inicial, las limitaciones de CVS
      se hicieron evidentes desde el 
      principio, y CollabNet sabía que tendría que encontrar algo mejor. 
      Desafortunadamente, CVS se había convertido en el estándar
      <foreignphrase>de facto</foreignphrase> en el mundo del código
      abierto  porque <emphasis> no había </emphasis> 
       nada mejor, al menos no bajo una licencia libre. 
      Así CollabNet decidió escribir un nuevo sistema de control de
      versiones desde cero,  manteniendo las ideas básicas de CVS, pero sin sus 
      fallos y defectos.
    </para>

    <para>En febrero del 2000, contactaron con Karl Fogel, autor de
      <citetitle> Open Source Development with CVS</citetitle>
      (Coriolis, 1999), <!--TODO: Poner el titulo en castellano? JULOT: opino que no
      hace falta-->
      y le preguntaron si le gustaría trabajar en este nuevo proyecto.
      Casualmente, por aquel entonces Karl ya se encontraba discutiendo 
      sobre el diseño de un nuevo sistema de control
      de versiones con su amigo Jim Blandy. En 1995, los dos habían
      fundado Cyclic Software,
      compañía que hacía contratos de soporte de CVS, y aunque después
      vendieron el negocio, seguían usando CVS todos los días en sus
      trabajos. La frustración de ambos con CVS
      había conducido a Jim a pensar cuidadosamente acerca de mejores
      vías para administrar datos versionados <!--TODO:to manage
      versioned data-->, y no sólo tenía ya el nombre de 
      <quote>Subversion</quote>, sino también el 
      diseño básico del repositorio de Subversion. Cuando
      CollabNet llamó, Karl aceptó inmediatamente trabajar en el
      proyecto, y Jim consiguió que su empresa, RedHat Software, 
      básicamente lo donara al proyecto por un período de tiempo
      indefinido. Collabnet contrató a Karl y a Ben
      Collins-Sussman, y el trabajo detallado de diseño comenzó en mayo.
      Con la ayuda de algunos <!--TODO:some well-placed prods-->
      ajustes bien colocados de Brian Behlendorf y Jason Robbins de
      CollabNet, y Greg Stein  (por aquel
      entonces un activo desarrollador independiente del proceso de
      especificación de WebDAV/DeltaV), Subversion atrajo rápidamente a
      una comunidad activa de desarrolladores. Ésto vino a demostrar que
      era mucha la gente que había tenido las mismas frustrantes
      experiencias con CVS, y que había recibido con agrado la oportunidad
      de hacer algo al respecto.
    </para>

    <para>El equipo de diseño original estableció 
      algunos objetivos simples. No querían <!--TODO:
      want to break new ground in version control methodology-->abrir nuevos
      caminos en la metodología del control de versiones, sólo
      querían  corregir CVS. Decidieron que Subversion incorporaría las 
      características de CVS, y que preservarían el mismo
      modelo de desarrollo, pero sin duplicar los defectos obvios de CVS.
      Y aunque no necesitaba ser  un reemplazo exacto de CVS, debía ser lo 
      bastante similar para que cualquier usuario de CVS  pudiera
      hacer el cambio con poco esfuerzo.</para>

    <para>Después de catorce meses de codificación, <!--TODO:of coding...
      no sería mejor "de escribir codigo?"--> Subversion pasó a ser
      <quote>auto-hospedado</quote> el 31 de
      agosto del 2001. Es decir, los desarrolladores de Subversion dejaron
      de usar CVS para la administración del propio código fuente de
      Subversion, y en su lugar empezaron a usar Subversion.
    </para>

    <para>Si bien fue CollabNet quien inició el proyecto, y todavía financia
      una gran parte del trabajo (paga el salario de unos pocos desarrolladores
      a tiempo completo de Subversion), Subversion funciona como la mayoría
      de proyectos de código abierto, dirigido por un <!--TODO: governed
      by a loose, transparent set of rules that encourage meritocracy-->
      conjunto informal de reglas transparentes que fomentan el mérito.
      La licencia copyright de CollabNet es completamente compatible con las
      Directrices de Software Libre de Debian.  En otras palabras,
      cualquier persona es libre de descargar, modificar, y redistribuir
      Subversion como desee; no se requiere ningún permiso de CollabNet o de 
      cualquier otra persona.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 3 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-3">

    <title>Características de Subversion</title>

    <para>Al discutir acerca de las características que Subversion aporta
      al mundo <!--TODO:to the version control table--> del control de
      versiones, a menudo es útil hablar de ellas en términos de cómo han
      mejorado sobre el diseño de CVS. Si no está familiarizado con CVS,
      quizás no entienda todas estas características. Y si no está
      familiarizado con el control de versiones en absoluto, 
      se le pueden nublar los ojos a menos que lea primero <xref
        linkend="svn-ch-2"/>, donde proporcionamos una leve introducción
      al control de versiones en general.
    </para>

    <para>Subversion proporciona:</para>

    <variablelist>
      <varlistentry>
        <term>Versionado de directorios</term> <!--TODO:Directory
           versioning-->
        <listitem>
          <para>CVS solamente lleva el historial de ficheros individuales,
            pero Subversion implementa <!--TODO:a <quote>virtual</quote>
            versioned filesystem that tracks changes to whole directory trees
            over time-->un sistema de ficheros versionado <quote>virtual
            </quote> que sigue los cambios sobre árboles de directorios 
          completos a través del tiempo. Ambos, ficheros y directorios,
          se encuentran bajo el control de versiones.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Verdadero historial de versiones</term>
              <!--TODO:True version history-->
        <listitem>
          <para>Dado que CVS está limitado al versionado de ficheros,
             operaciones como copiar y
            renombrar&mdash;las cuales pueden ocurrir sobre ficheros, pero
            que realmente son cambios al contenido del directorio en el que
            se encuentran&mdash;no son soportadas por CVS. Adicionalmente,
            en CVS no puede reemplazar un fichero versionado con algo nuevo
            que lleve el mismo nombre sin que el nuevo elemento herede el
            historial del fichero antiguo&mdash;que quizás sea completamente
            distinto al anterior. Con
            Subversion, usted puede añadir, borrar, copiar, y renombrar
            ficheros y directorios.  Y cada fichero nuevo añadido comienza con
            un historial nuevo, limpio y completamente suyo.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Envíos atómicos</term>
        <listitem>
          <para>Una colección cualquiera de modificaciones o bien entra por
            completo al repositorio, o bien no lo hace en absoluto. Ésto 
            permite a los desarrolladores construir y enviar los cambios como 
            fragmentos lógicos e impide que ocurran problemas cuando sólo
            una parte de los cambios enviados lo hace con éxito.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Versionado de metadatos</term> <!--TODO:Versioned -->
        <listitem>
          <para>Cada fichero y directorio tiene un conjunto de propiedades
            &mdash;claves y sus valores 
            &mdash;asociado a él. Usted puede crear y almacenar cualquier
            par arbitrario de clave/valor que desee. Las propiedades son
            versionadas a través del tiempo, al igual que el contenido de 
            los ficheros.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Elección de las capas de red</term>
        <listitem>
          <para>
            Subversion tiene una noción abstracta del acceso al
            repositorio, facilitando a las personas implementar
            nuevos mecanismos de red. Subversion puede conectarse 
             al servidor HTTP Apache como un módulo de
            extensión. Ésto proporciona a Subversion una gran ventaja en estabilidad
            e interoperabilidad, y acceso instantáneo a las características
            existentes que ofrece este servidor&mdash;autenticación,
            autorización, compresión de la conexión, etcétera. También tiene 
            disponible un servidor de Subversion independiente, y más ligero.
            Este servidor habla un protocolo propio, el cual puede ser encaminado 
            fácilmente a través de un túnel SSH.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Manipulación consistente de datos</term>
        <listitem>
          <para>Subversion expresa las diferencias del fichero usando un
            algoritmo de diferenciación binario, <!--TODO:binary
            differencing algorithm (aunque suena como si el 
            algoritmo fuera algo de búsqueda binaria, no?)--> 
            que funciona idénticamente con
            ficheros de texto (legibles para humanos) <!--TODO:human-
            -readable--> y ficheros binarios (ilegibles para humanos).
            Ambos tipos de ficheros son almacenados igualmente comprimidos
            en el repositorio, y las diferencias son transmitidas en ambas
            direcciones a través de la red.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Ramificación y etiquetado eficientes</term>
        <listitem>
          <para>
            El coste de ramificación y etiquetado no necesita ser
            proporcional al tamaño del proyecto. Subversion crea ramas y
            etiquetas simplemente copiando el proyecto, usando un mecanismo
            similar al enlace duro.<!--TODO:Poner una N. del T. ilustrando que
            un enlace duro es una copia barata de un archivo o carpeta en un
            sistema Unix :hard-link.--> De este modo estas
            operaciones toman solamente una cantidad de tiempo pequeña y constante.
            <!--TODO:take only a very small, constant amount of
            time.--></para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Hackability</term><!--TODO:Como se traduce esto?
        Cacharreabilidad...?-->
        <listitem>
          <para>Subversion no tiene un equipaje histórico;<!--TODO:baggage-->
            está implementado como una colección de bibliotecas compartidas en
            C con APIs bien definidas. <!--TODO:traducir API? más bien tener un glosario, no?-->
            Ésto hace a Subversion extremadamente fácil de mantener y reutilizable 
            por otras aplicaciones y lenguajes.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 4 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-4">

    <title>Arquitectura de Subversion</title>

    <para><xref linkend="svn-ch-1-dia-1"/> ilustra lo que uno podría titular
      una visión panorámica del diseño de Subversion.
    </para>
    
    <figure id="svn-ch-1-dia-1">
      <title>Arquitectura de Subversion</title>
      <graphic fileref="images/ch01dia1.png"/>
    </figure>

    <para>En un extremo se encuentra un repositorio de
      Subversion que conserva todos los datos versionados. Al otro lado, 
      hay un programa cliente Subversion que administra réplicas
      parciales de esos datos versionados (llamadas <quote>copias de trabajo</quote>).
      Entre estos extremos hay múltiples rutas a través de varias capas de
      acceso al repositorio (AR).<!--TODO:Repository Access (RA)--> Algunas
      de estas rutas incluyen redes de ordenadores y servidores de red que 
      después acceden al repositorio. Otras pasan por alto 
      la red y acceden al repositorio directamente.
    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 5 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-5">

    <title>Instalando Subversion</title>

    <para>Subversion está construido sobre una capa de portabilidad llamada APR
      (la biblioteca Apache Portable Runtime), <!--TODO:traducir este nombre?-->
      lo cual significa que Subversion debería funcionar en cualquier sistema
      operativo donde lo haga el servidor httpd Apache: Windows, Linux, todos
      los sabores de BSD, Mac OS X, Netware y otros.</para>

    <para>La manera más sencilla de obtener Subversion es descargando un
      paquete binario construido para su sistema operativo. El sitio web
      de Subversion (<systemitem
      class="url">http://subversion.tigris.org</systemitem>) dispone a menudo
      de estos paquetes disponibles para su descarga, publicados por
      voluntarios. El sitio web contiene generalmente paquetes que incluyen
      instaladores gráficos para los usuarios de los sistemas operativos de
      Microsoft. Si usted usa un sistema operativo Unix o similar, puede usar el
      sistema nativo de distribución de paquetes de su sistema (RPMs, DEBs,
      el árbol de ports, etc.) para obtener Subversion.</para>

    <para>Alternativamente, usted puede compilar Subversion directamente a partir
      del código fuente. Del sitio web de
      Subversion, descargue la ultima versión <!--TODO: release... o sería
      mejor "publicacion"?--> del código fuente. Después de desempaquetarlo,
      siga las instrucciones del fichero <filename>INSTALL</filename> para
      compilarlo. <!--TODO:ahora me suena mal construir para decir "build",
      algúna alternativa? compilarlo-->Observe que cada paquete de código fuente 
      que se publica contiene todo lo necesario para construir un cliente de línea 
      de comandos capaz de comunicarse con un
      repositorio remoto (en particular, las bibliotecas apr, apr-util y neon).
      Sin embargo, las partes opcionales de Subversion tienen otras muchas dependencias,
      tales como la base de datos Berkeley DB y posiblemente el servidor web Apache. 
      Si usted quiere hacer una compilación completa, asegúrese de tener todos 
      los paquetes documentados
      en el fichero <filename>INSTALL</filename>. Si planea trabajar en el
      propio Subversion,<!--TODO:on Subversion itself--> puede usar su
      programa cliente para obtener la última y más reciente versión del 
      código fuente.
      <!--TODO:to grab the latest, bleeding-edge...no se me ocurría otra
      cosa--> Este procedimiento está documentado en <xref linkend="svn-ch-8-sect-6.2"/>.
    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 6 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-6">

    <title>Componentes de Subversion</title>
    
    <para>Una vez instalado, Subversion se compone de un número diferente 
      de piezas. A continuación se presenta una visión general de estos componentes. 
      No se alarme si las descripciones breves no le dejan las cosas muy claras <!--TODO:scratching
      your head...y esto como se traduce?--> &mdash;hay páginas <emphasis> de sobra
      </emphasis> en este libro dedicadas a aliviarle esa confusión.
    </para>

    <variablelist>
      <varlistentry>
        <term>svn</term>
        <listitem>
          <para>El programa cliente de línea de comandos.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnversion</term>
        <listitem>
          <para>Programa para informar del estado (en términos de revisiones
            de los elementos presentes) de una copia de trabajo.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnlook</term>
        <listitem>
          <para>Una herramienta para inspeccionar un repositorio de
            Subversion.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnadmin</term>
        <listitem>
          <para>Herramienta para crear, modificar o reparar un repositorio de Subversion.</para>
            <!--TODO:A tool for creating, tweaking or repairing.... quizás
            esté mejor "herramienta para la creacion, bla o reparación-->
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svndumpfilter</term>
        <listitem>
          <para>Un programa para filtrar el formato de salida de volcado de repositorios
            Subversion.<!--TODO:A program for filtering
            Subversion repository dumpfile format streams-->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mod_dav_svn</term>
        <listitem>
          <para>Un módulo para el servidor HTTP Apache usado para hacer 
            que su repositorio esté disponible a otros a través de una red.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnserve</term>
        <listitem>
          <para>Un servidor independiente, ejecutable como proceso
            demonio o invocable por SSH; otra manera de hacer que su
            repositorio esté disponible para otros a través de una
            red.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Suponiendo que ha instalado Subversion correctamente, debería
      estar preparado para comenzar. Los próximos dos capítulos le
      guiarán a través del uso de <command>svn</command>, el programa
      cliente de Subversion de línea de comandos.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ======================== SECCIÓN 7 ============================== -->
  <!-- ================================================================= -->
  <sect1 id="svn-ch-1-sect-7">

    <title>Un comienzo rápido</title>
    
    <para>Algunas personas tienen problemas para absorber una nueva
      tecnología leyendo un enfoque del tipo "arriba a abajo" como el
      que ofrece este libro. Esta sección es una introducción muy
      breve a Subversion, y está pensada para dar a los
      principiantes algo con lo que defenderse. <!--TODO:and is designed to give
      "bottom up" learners a fighting chance-->Si usted es de los
      que prefiere aprender experimentando, la siguiente demostración 
      le pondrá en marcha. A lo largo del camino,<!--TODO:Along the way--> le
      iremos dando enlaces a los capítulos relevantes de este libro.</para>

    <para>Si a usted le resulta completamente nuevo el concepto de control 
      de versiones o el modelo <quote>copiar-modificar-mezclar</quote> 
      usado tanto por CVS como por Subversion, debería leer
      <xref linkend="svn-ch-2"/> antes de seguir adelante.</para>
      
    <note>
      <para>El siguiente ejemplo asume que usted tiene preparados
        tanto el cliente de línea de comandos de Subversion <command>svn</command>,
        como la herramienta administrativa <command>svnadmin</command>.
        También asume que su cliente <command>svn</command> ha sido compilado
        con soporte para la base de datos Berkeley DB. Puede comprobarlo ejecutando 
        <command>svn --version</command> y asegurándose de que el modulo
        <literal>ra_local</literal> está disponible. Sin este módulo,
        el cliente no podrá acceder a URLs del tipo <literal>file://</literal>
       </para>
    </note>

    <para>Subversion almacena todos los datos versionados en un
      repositorio central. Para comenzar, cree un nuevo repositorio:
    </para>

    <screen>
$ svnadmin create /path/to/repos <!--TODO:poner "/path/al/repos"??-->
$ ls /path/to/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>

    <para>Este comando crea un nuevo directorio
      <filename>/path/to/repos</filename> que contiene un repositorio de
      Subversion. Asegúrese de que este directorio reside en un disco local y
      <emphasis>no</emphasis> compartido en red. Este nuevo directorio
      contiene principalmente una colección de ficheros de la base de
      datos Berkeley DB. Para más información sobre la creación y
      mantenimiento de repositorios, vea <xref linkend="svn-ch-5"/>.
    </para>

    <para>A continuación, cree un árbol de ficheros y directorios para
      importar dentro del repositorio. Por razones que se aclararán más
      tarde (vea <xref linkend="svn-ch-4"/>), su estructura debería
      tener tres directorios en el primer nivel de la jerarquía
      llamados <filename>branches</filename>,<filename>tags</filename>,
      y <filename>trunk</filename>:
    </para>

    <screen>
/tmp/project/branches/
/tmp/project/tags/
/tmp/project/trunk/
               foo.c
               bar.c
               Makefile
               &hellip;
</screen>

    <para>Una vez tenga un árbol de datos listo para continuar,
      <!--TODO:ready to go--> impórtelo dentro del repositorio
      con el comando <command>svn import</command> (vea <xref
      linkend="svn-ch-3-sect-7.3"/>):
    </para>

    <screen>
$ svn import /tmp/project file:///path/to/repos -m "initial import"
Adding         /tmp/project/branches
Adding         /tmp/project/tags
Adding         /tmp/project/trunk
Adding         /tmp/project/trunk/foo.c
Adding         /tmp/project/trunk/bar.c
Adding         /tmp/project/trunk/Makefile
&hellip;
Committed revision 1.
$ 
</screen>

    <para>Ahora el repositorio contiene este árbol de datos. Observe
      que el directorio original <filename>/tmp/project</filename>
      no se ha modificado; Subversion no se preocupa por él (de hecho,
      puede incluso borrar ese directorio si lo desea).
      Para comenzar a manipular los datos del repositorio, necesitará
      crear una nueva <quote>copia de trabajo</quote> de los datos,
      una especie de entorno de trabajo privado. Pida a Subversion que 
      <quote>obtenga</quote>
      <footnote><para>
          N.T.: En la bibliografía sobre control de versiones se suele
          utilizar el vocablo inglés «check out» para referirse a la operación
          usada para obtener una copia (parcial) de un repositorio centralizado.
          En ocasiones, la obtención de dicha copia implica la conexión a un
          servidor remoto, por lo que en la traducción es común emplear
          indistintamente los términos «obtener» y «descargar» para referirse
          a esta operación.
        </para></footnote> una copia de
      trabajo del directorio <filename>trunk</filename> del repositorio:
    </para>

    <screen>
$ svn checkout file:///path/to/repos/trunk project
A  project/foo.c
A  project/bar.c
A  project/Makefile
&hellip;
Checked out revision 1.
</screen>

    <para>Ahora usted dispone de una copia personal de parte del repositorio
      en un nuevo directorio llamado <filename>project</filename>. Puede 
      editar los ficheros en su copia de trabajo y después
      depositar<!--TODO:and then commit those changes--> esos cambios
      de nuevo en el repositorio.</para>

    <itemizedlist>
      <listitem><para>Entre en su copia de trabajo y edite el contenido
        de un fichero.</para></listitem>
      <listitem><para>Ejecute <command>svn diff</command> para ver
        las diferencias introducidas por sus cambios en formato diff unificado.</para>
      </listitem>
        <!--TODO:to see unified diff output of your changes.-->
      <listitem><para>Ejecute <command>svn commit</command> para depositar
        la nueva versión de su fichero en el repositorio.</para></listitem>
      <listitem><para>Ejecute <command>svn update</command> para 
          <quote>sincronizar</quote> su copia de trabajo con el repositorio.</para>
        </listitem>
    </itemizedlist>

    <para>Para un recorrido completo por todas las operaciones que puede realizar
      con su copia de trabajo, vea <xref linkend="svn-ch-3"/>.</para>

    <para>Llegado este punto, usted tiene la opción de hacer que su repositorio
      Subversion esté disponible a otros a través de una red. Vea 
      <xref linkend="svn-ch-6"/> para aprender acerca de los diferentes tipos 
      de procesos servidor disponibles y cómo configurarlos.</para>

  </sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
