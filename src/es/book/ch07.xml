<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- originated from English revision 652 -->
<chapter id="svn-ch-7">
  <title>Tópicos avanzados</title>

  <simplesect id="svn-ch-7-sect-0">

    <para>Si ha estado leyendo este libro capítulo por capítulo,
      de principio a fin, debería haber adquirido suficiente
      conocimiento para usar el cliente de Subversion para
      realizar la mayoría de las operaciones comunes de control
      de versiones. Entiende cómo obtener una copia local de un
      repositorio Subversion. Se siente cómodo enviando y recibiendo
      cambios usando las funciones <command>svn commit</command>
      y <command>svn update</command>.  Probablemente hasta haya
      desarrollado un reflejo que le hace ejecutar el comando
      <command>svn status</command> de forma casi inconsciente.
      A efectos prácticos, está preparado para usar Subversion en
      un entorno típico.</para>

    <para>Pero el conjunto de características de Subversion no
      acaba en <quote>operaciones comunes de control de
      versiones</quote>.</para>

    <para>Este capítulo recalca algunas características de Subversion
      que no son usadas muy a menudo. En él, discutiremos el soporte
      de propiedades (o <quote>meta datos</quote>) de Subversion,
      y cómo modificar el comportamiento por defecto de Subversion
      alterando su área de configuración dedicada a parámetros de
      ejecución. Describiremos cómo puede usar definiciones externas
      para ordenar a Subversion que obtenga datos de múltiples
      repositorios. Cubriremos con detalle algunas herramientas
      adicionales, tanto del lado del cliente como del servidor,
      que son parte de la distribución de Subversion.</para>

    <para>Antes de leer este capítulo, debe estar familiarizado
      con las capacidades básicas de versionado de ficheros
      y directorios de Subversion. Si todavía no ha leído sobre
      éstas, o si necesita refrescar su memoria, recomendamos que
      vea <xref linkend="svn-ch-2" /> y <xref linkend="svn-ch-3"
      />. Una vez haya dominado lo básico y consumido este capítulo,
      ¡será un usuario avanzado de Subversion!
    </para>

  </simplesect>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 1:  RUNTIME CONFIGURATION AREA                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-1">
    <title>Área de configuración de parámetros de ejecución</title>
    
    <para>Subversion proporciona muchos comportamientos opcionales
      que pueden ser controlados por el usuario. Muchas de estas
      opciones son del tipo que el usuario querría aplicar a todas
      las operaciones de Subversion.  Así que en lugar de obligar a
      los usuarios a recordar parámetros de línea de comando para
      especificar estas opciones, y usarlos para todas y cada una
      de las operaciones que realicen, Subversion usa ficheros
      de configuración, segregados en un área de configuración de
      Subversion.</para>

    <para>El <firstterm>área de configuración</firstterm> de
      Subversion es una jerarquía de dos capas de nombres de opciones
      y sus respectivos valores. Normalmente, esto se reduce a
      un directorio especial que contiene <firstterm>ficheros
      de configuración</firstterm> (la primera capa), que son
      simplemente ficheros de texto en un formato INI estándar
      (con <quote>secciones</quote>, las cuales forman la segunda
      capa).  Estos ficheros pueden ser modificados fácilmente
      usando su editor de texto favorito (como Emacs o vi), y
      contienen directivas leídas por el cliente para determinar
      qué comportamiento opcional, de varios a elegir, prefiere
      el usuario.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.1">
      <title>Estructura del área de configuración</title>

      <para>La primera vez que el cliente de línea de comando
        <command>svn</command> es ejecutado, crea un área
        de configuración para el usuario. En sistemas
        tipo Unix, este área aparece como el directorio
        <filename>.subversion</filename> en el directorio home <!--
        TODO quizás deberíamos usar la etiqueta filename, dado
        que en inglés la palabra home vale como palabra y como
        término informático, pero no en español --> del usuario.
        En sistemas Win32, Subversion crea un directorio llamado
        <filename>Subversion</filename>, típicamente dentro del
        área <filename>Application Data</filename> del directorio
        de perfil del usuario (el cual, por cierto, suele ser un
        directorio oculto).  No obstante, en esta plataforma la
        ubicación exacta difiere de sistema a sistema, y es dictada
        por el registro de Windows.
        <footnote>
          <para>La variable de entorno <literal>APPDATA</literal>
            apunta al área <filename>Application Data</filename>,
            así que siempre puede referirse a este directorio como
            <filename>%APPDATA%\Subversion</filename>.</para>
        </footnote>
        A lo largo del libro nos referiremos al área de
        configuración de cada usuario usando su nombre Unix,
        <filename>.subversion</filename>.</para>

      <para>Además del área de configuración de cada usuario,
        Subversion también reconoce la existencia de un área
        de configuración global de sistema.  Ésta le permite al
        administrador de sistema establecer valores por defecto para
        todos los usuarios en una máquina determinada. Tenga en
        cuenta que el área de configuración global de sistema por
        sí sola no dicta reglas obligatorias&mdash;los parámetros
        del área de configuración de cada usuario tienen prioridad
        a los globales, y los parámetros proporcionados en la
        línea de comando al programa <command>svn</command>
        tienen la palabra final sobre el comportamiento. En
        plataformas tipo Unix, el área de configuración
        global de sistema estará posiblemente en el directorio
        <filename>/etc/subversion</filename>; en máquinas Windows,
        se busca el directorio <filename>Subversion</filename> dentro
        de la ubicación común <filename>Application Data</filename>
        (de nuevo, especificada por el registro de Windows).
        A diferencia del caso específico de cada usuario, el
        programa <command>svn</command> no intentan crear un área
        de configuración global de sistema.</para>

      <para>El área de configuración actualmente contiene tres
        ficheros&mdash;dos ficheros de configuración
        (<filename>config</filename> y <filename>servers</filename>),
        y un fichero <filename>README.txt</filename> que describe el
        formato INI.  En el momento de su creación, los ficheros
        contienen los valores por defecto para cada una de las
        opciones soportadas por Subversion, en su mayoría con
        comentarios y agrupadas con descripciones textuales
        que indican cómo los valores de cada opción afectan al
        comportamiento de Subversion. Para cambiar un comportamiento
        dado, sólo necesita cargar el fichero de configuración
        adecuado en su editor de texto, y modificar el valor de la
        opción deseada. Si en algún momento desea recuperar los
        valores de configuración por defecto, puede simplemente
        borrar (o renombrar) su directorio de configuración y
        entonces ejecutar algún comando <command>svn</command>
        inocuo, como <command>svn --version</command>.  Entonces se
        creará un nuevo directorio de configuración con el contenido
        por defecto.</para>

      <para>El área de configuración de cada usuario también contiene
        una cache de datos de autenticación. El directorio
        <filename>auth</filename> agrupa un conjunto de
        subdirectorios que contienen trozos de información guardada
        <!-- TODO revisar traducción de cached != guardada -->
        usada por los varios métodos de autenticación soportados
        por Subversion. Este directorio es creado de tal manera que
        sólo su usuario tiene permiso para leer su contenido.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.2">
      <title>La configuración y el registro de Windows</title>

      <para>Además del área de configuración habitual basada en
        ficheros INI, los clientes de Subversion ejecutados en
        plataformas Windows también pueden usar el registro de
        Windows para almacenar datos de configuración. Los nombres
        de las opciones y sus valores son iguales que en los
        ficheros INI. La jerarquía <quote>fichero/sección</quote>
        también se mantiene, aunque especificada de una manera
        ligeramente diferente&mdash;en este esquema, los ficheros y
        las secciones son simples niveles del árbol del registro de
        claves.</para><!-- TODO buscar en documentación en castellano
        u opciones de menu del editor de registro de Windows cómo se
        denomina a los nombres de las opciones: llaves o claves? -->

      <para>Subversion busca valores de configuración global de
        sistema bajo la clave
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>.
        Por ejemplo, la opción <literal>global-ignores</literal>,
        que pertenece a la sección <literal>miscellany</literal>
        del fichero <filename>config</filename>, se encontraría en
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Los valores de configuración de cada usuario debería poder
        encontrarlos en
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>

      <para>Las opciones de configuración almacenadas en el registro
        son procesadas <emphasis>antes</emphasis> que sus
        versiones en ficheros de texto, por lo que sus valores
        son sobreescritos por lo que contengan los ficheros de
        configuración. En otras palabras, en un sistema Windows, la
        prioridad de configuración sigue el siguiente orden:</para>
      
      <orderedlist>
        <listitem>
          <para>Opciones de línea de comando</para>
        </listitem>
        <listitem>
          <para>Ficheros INI de cada usuario</para>
        </listitem>
        <listitem>
          <para>Valores de registro de cada usuario</para>
        </listitem>
        <listitem>
          <para>Ficheros INI globales de sistema</para>
        </listitem>
        <listitem>
          <para>Valores de registro globales de sistema</para>
        </listitem>
      </orderedlist>

      <para>Además, el registro de Windows no soporta el concepto
        de que algo esté <quote>comentado</quote>. No obstante,
        Subversion ignorará cualquier opción cuyo nombre comience
        con el carácter almohadilla (<literal>#</literal>). Esto le
        permite comentar de forma efectiva una opción de Subversion
        sin tener que borrar la clave completa del registro,
        obviamente simplificando el proceso de recuperación de
        esta opción.</para>

      <para>El cliente de línea de comando <command>svn</command>
        nunca intenta modificar el registro de Windows, así que
        no intentará crear ahí ningún área de configuración por
        defecto. Puede crear las claves que necesita usando el
        programa <command>REGEDIT</command>. Alternativamente,
        puede crear un fichero <filename>.reg</filename>, y entonces
        hacer doble click sobre ese fichero desde una ventana de
        explorador, lo cual hará que los datos sean fusionados en
        su registro.</para>

      <example id="svn-ch-7-sect-1.2-ex-1">
        <title>Fichero ejemplo de registro (.reg).</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-auth-creds"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#*"
"#log-encoding"=""
"#use-commit-times"=""
"#template-root"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
</programlisting>
      </example>

      <para>El ejemplo anterior muestra el contenido de un fichero
        <filename>.reg</filename> que contiene algunas de las
        opciones de configuración más usadas y sus valores por
        defecto. Tenga en cuenta la presencia tanto de opciones
        globales de sistema (para opciones relacionadas con proxys)
        como opciones de cada usuario (programas de edición y
        almacenamiento de claves, entre otras). Fíjese también
        que todas las opciones están comentadas. Sólo tiene que
        eliminar el carácter almohadilla (<literal>#</literal>)
        del comienzo de cada nombre de opción, y poner los valores
        que desee.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.3">
      <title>Opciones de configuración</title>
      
      <para>En esta sección discutiremos las opciones específicas de
        parámetros de ejecución soportados actualmente por
        Subversion.</para>

      <sect3 id="svn-ch-7-sect-1.3.1">
        <title>Servers</title>

        <para>El fichero <filename>servers</filename> contiene
          opciones de configuración de Subversion relacionadas con
          las capas de red. Hay dos nombres de sección especiales
          en este fichero&mdash;<literal>groups</literal>
          y <literal>global</literal>.  La sección
          <literal>groups</literal> es esencialmente una tabla
          de referencias cruzadas. Las claves en esta sección son
          nombres de otras secciones en el fichero; sus valores son
          <firstterm>máscaras</firstterm>&mdash;palabras textuales
          que posiblemente contienen caracteres comodines&mdash;que
          son comparadas contra los nombres de la máquina a la que
          se envían peticiones Subversion.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>Cuando Subversion es usado en una red, intenta
          encontrar una coincidencia entre el nombre del servidor
          al que intenta llegar con un nombre de grupo de la
          sección <literal>groups</literal>. Si se encuentra tal
          coincidencia, Subversion busca entonces una sección en el
          fichero <filename>servers</filename> cuyo nombre coincida
          con el nombre del grupo.  De esta sección obtendrá la
          configuración de red que será usada.</para>

        <para>La sección <literal>global</literal> contiene la
          configuración que será usada para todos los servidores
          que no encajen con ninguna de las máscaras de la
          sección <literal>groups</literal>. Las opciones
          disponibles en esta sección son exactamente las mismas
          que aquellas válidas para otras secciones de servidor en
          el fichero (excepto, por supuesto, la sección especial
          <literal>groups</literal>), y son las siguientes:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>Especifica el nombre del ordenador proxy por el
                cual deben pasar sus peticiones Subversion basadas en
                HTTP. Por defecto es un valor vacío, lo que significa
                que Subversion no intentará enrutar peticiones HTTP
                por un ordenador proxy, y que en su lugar intentará
                contactar la máquina destino directamente.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>Especifica el número de puerto del ordenador
                proxy que debe usar. Por defecto es un valor
                vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>Especifica el nombre de usuario que se le
                facilitará al proxy. Por defecto es un valor
                vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>Especifica la palabra clave que se le facilitará
                al proxy. Por defecto es un valor vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>Especifica la cantidad de tiempo, en segundos,
                que se espera las respuestas del servidor. Si
                experimenta problemas con una conexión de red lenta
                que provoca que las operaciones de Subversion fallen
                por tiempo de espera agotado, debería incrementar
                el valor de esta opción.  El valor por defecto es
                <literal>0</literal>, que indica a la librería HTTP
                subyacente, Neon, que use su valor tiempo de espera
                por defecto.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-compression</literal></term>
            <listitem>
              <para>Especifica si Subversion debería o no intentar
                comprimir las peticiones de red realizadas a
                servidores con soporte DAV. El valor por defecto es
                <literal>yes</literal> (aunque la compresión sólo
                ocurrirá si esta característica fue compilada en la
                capa de red). Cambie esto a <literal>no</literal>
                para desactivar la compresión, por ejemplo para
                depurar transmisiones por red.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>Esto es una máscara de bits que la librería HTTP
                subyacente, Neon, usa para determinar el tipo
                de información de depuración que debe mostrar.
                El valor por defecto es <literal>0</literal>, el
                cual elimina cualquier información de depuración.
                Para más información sobre cómo Subversion usa Neon,
                vea <xref linkend="svn-ch-8" />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-authority-files</literal></term>
            <listitem>
              <para>Esto es una lista delimitada con punto y coma
                de rutas a ficheros que contienen certificados de
                las autoridades de certificación (o CAs) que son
                aceptadas por el cliente de Subversion cuando se
                accede a un repositorio sobre HTTPS.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-trust-default-ca</literal></term>
            <listitem>
              <para>Modifique esta variable a <literal>yes</literal>
                si quiere que Subversion confíe de forma automática
                el conjunto de CAs por defecto que se distribuyen
                con OpenSSL.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-file</literal></term>
            <listitem>
              <para>Si una máquina (o grupo de máquinas) requieren
                un certificado de cliente SSL, normalmente se le
                preguntará por la ruta a su certificado. Ajustando
                esta variable a esta misma ruta, Subversion será
                capaz de encontrar la certificación de su cliente
                automáticamente sin tener que preguntarle. No hay
                un lugar estándar para almacenar certificados en
                disco; Subversion los obtendrá de cualquier ruta
                que especifique.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-password</literal></term>
            <listitem>
              <para>Si el fichero de su certificado de cliente
                SSL está cifrado con una frase, Subversion le
                preguntará por ésta cada vez que el certificado vaya
                a ser usado. Si considera esto un inconveniente (y no
                le importa almacenar la palabra clave en el fichero
                <filename>servers</filename>), entonces modifique
                esta variable para que contenta la clave. Ya no se
                le preguntará más.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>
      <sect3 id="svn-ch-7-sect-1.3.2">
        <title>Config</title>

        <para>El fichero <filename>config</filename> contiene el
          resto de los parámetros de ejecución actualmente
          disponibles con Subversion, aquellos no relacionados con
          la conexión a red. Sólo hay un par de opciones en uso por
          ahora, pero de nuevo están agrupadas en secciones pues se
          esperan adiciones futuras.</para>

        <para>La sección <literal>auth</literal> contiene parámetros
          relacionados con autenticación y autorización de Subversion
          contra un repositorio.  Éstos son:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
              <para>Esto indica a Subversion si desea mantener
                una caché o no de las credenciales de autenticación
                proporcionadas por el usuario en respuesta a demandas
                de autenticación por parte del servidor. El valor
                por defecto es <literal>yes</literal>.  Cambie esto
                a <literal>no</literal> para desactivar la caché
                de credenciales en disco. Puede reemplazar
                esta opción en invocaciones individuales
                del comando <command>svn</command> usando
                la opción <option>--no-auth-cache</option>
                como parámetro (para aquellos subcomandos que
                la soportan). Para más información, vea <xref
                linkend="svn-ch-6-sect-2.2"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>La sección <literal>helpers</literal> controla qué
          aplicaciones externas son usadas por Subversion para
          realizar ciertas tareas. Las opciones válidas en esta
          sección son:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>Especifica el programa que Subversion usará para
                solicitar al usuario el mensaje del informe de
                cambios cuando envía cambios al repositorio, como
                por ejemplo al usar <command>svn commit</command>
                sin las opciones <option>--message</option>
                (<option>-m</option>) o <option>--file</option>
                (<option>-F</option>).  Este programa
                también se usa con el comando <command>svn
                propedit</command>&mdash;un fichero temporal
                es rellenado con los valores actuales de la
                propiedad que el usuario desea modificar, y los
                cambios toman forma en el programa editor (vea
                <xref linkend="svn-ch-7-sect-2" />).  El valor por
                defecto de esta opción es vacío. Si la opción no
                está activada, Subversion comprobará las variables
                de entorno <literal>SVN_EDITOR</literal>,
                <literal>VISUAL</literal>, y
                <literal>EDITOR</literal> (en ese orden) para
                encontrar un comando de edición.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>Especifica una ruta absoluta a un programa de
                diferenciación, usado cuando Subversion genera salida
                <quote>diff</quote> <!-- TODO esto debería cambiar,
                pues no existe el término diff en español. Reescribir
                de alguna manera --> (como cuando usa el comando
                <command>svn diff</command>).  Por defecto
                Subversion usa una librería de diferenciación
                interna&mdash;activando esta opción obligará realizar
                esta tarea usando un programa externo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>Especifica una ruta absoluta a un programa de
                diferenciación a tres bandas. Subversion usa este
                programa para fusionar cambios realizados por el
                usuario con aquellos recibidos del repositorio.  Por
                defecto Subversion usa una librería de diferenciación
                interna&mdash;activando esta opción obligará realizar
                esta tarea usando un programa externo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>Este parámetro debe ajustarse a
                <literal>true</literal> si el programa especificado
                por la opción <literal>diff3-cmd</literal>
                acepta el parámetro de línea de comando
                <option>--diff-program</option>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>La sección <literal>tunnels</literal> le permite
          definir nuevos esquemas de túneles a usar con
          <command>svnserve</command> y conexiones cliente
          <literal>svn://</literal>.  Para más detalles, vea <xref
          linkend="svn-ch-6-sect-3.3"/>.</para>

        <para>La sección <literal>miscellany</literal> es donde
          acaba todo lo que no encaja en otra parte.
          <footnote>
            <para>¿Le gustan las sobras?</para>
          </footnote>
          En esta sección puede encontrar:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>Cuando ejecuta el comando <command>svn
                status</command>, Subversion muestra un listado
                de ficheros y directorios no versionados
                junto con los versionados, anotándolos con
                el carácter <literal>?</literal> (vea <xref
                linkend="svn-ch-3-sect-4.3.1" />).  A veces puede
                ser molesto ver elementos no versionados o no
                interesantes&mdash;por ejemplo, ficheros objeto
                resultado de la compilación de un programa&mdash; en
                pantalla. La opción <literal>global-ignores</literal>
                es una lista de máscaras delimitadas por
                espacio que describen los nombres de ficheros y
                directorios que Subversion no debe mostrar a no
                ser que estén versionados. El valor por defecto
                es <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#*</literal>.</para>

              <para>Puede redefinir esta opción en invocaciones
                individuales del comando <command>svn
                status</command> usando la opción de línea de comando
                <option>--no-ignore</option>.  Para más información
                sobre el control detallado de elementos ignorados,
                vea <xref linkend="svn-ch-7-sect-2.3.3" />.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><literal>enable-auto-props</literal></term>
            <listitem>
              <para>Esto indica a Subversion que añada propiedades
                automáticamente en ficheros nuevos o importados. El
                valor por defecto es <literal>no</literal>, así que
                cambie esto a <literal>yes</literal> para activar
                auto propiedades. <!-- NT: aunque en el original
                viene como auto-props, posiblemente la capitalización
                de la palabra indica el uso de compresión de las
                palabras en lugar de la mención del valor literal
                "auto-props"--></para>

              <para>La sección <literal>auto-props</literal> controla
                la capacidad del cliente de Subversion de poner
                automáticamente propiedades en ficheros que fueron
                añadidos o importados. Contiene un número de
                parejas clave-valor en el formato <literal>PATRÓN =
                NOMBREPROPIEDAD=VALORPROPIEDAD</literal> donde
                <literal>PATRÓN</literal> es una máscara de
                fichero que encaja con un grupo de ficheros
                y el resto de la línea es la propiedad y su
                valor. Múltiples coincidencias en un fichero
                resultarán en múltiples propiedades para ese
                fichero; no obstante, no hay garantía alguna de
                que las auto propiedades sean aplicadas en el
                orden en el cual fueron listadas en el fichero de
                configuración, así que no puede tener una regla
                que <quote>redefina</quote> otra.  Puede encontrar
                varios ejemplos del uso de auto propiedades en el
                fichero <filename>config</filename>.  Por último, no
                olvide cambiar <literal>enable-auto-props</literal>
                a <literal>yes</literal> si quiere activar las auto
                propiedades.</para>
            </listitem>            
          </varlistentry>

          <varlistentry>
            <term><literal>log-encoding</literal></term>
            <listitem>         
              <para>Esta variable ajusta el formato por defecto de
                codificación de caracteres de los informes
                de cambios. Es una versión permanente de la
                opción <option>--encoding</option> (vea <xref
                linkend="svn-ch-9-sect-1.1"/>.)  El repositorio
                Subversion almacena los mensajes de los informes de
                cambios en UTF8, y asume que su mensaje es escrito
                usando las locales nativas <!-- TODO locale? -->de
                su sistema operativo. Debería especificar una
                codificación diferente si sus mensajes son escritos
                con otra codificación.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-commit-times</literal></term>
            <listitem>         
              <para>Normalmente los ficheros de su copia local de
                trabajo tienen marcas de tiempo que reflejan el
                último momento en que fueron tocados por cualquier
                proceso, ya sea su propio editor o uno de los
                subcomandos <command>svn</command>.  Esto es
                normalmente conveniente para gente que desarrolla
                software, porque los sistemas de compilación a menudo
                comprueban las marcas de tiempo para decidir qué
                ficheros necesitan ser recompilados.</para>

              <para>En otras situaciones, no obstante, es conveniente
                tener en su copia local de trabajo ficheros
                con marcas de tiempo que reflejan el último
                momento en el que cambiaron en el repositorio
                El comando <command>svn export</command>
                siempre pone estas <quote>marcas temporales de
                última modificación</quote> en los árboles que
                produce. Cambiando esta variable de configuración
                a <literal>yes</literal>, los comandos <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, y <command>svn
                revert</command> también ajustarán la marca temporal
                a la última modificación en el repositorio en los
                ficheros que manejen.</para>
            </listitem>
          </varlistentry>
          
      <!-- ###TODO add description of other options shown in example
          registry file, e.g., log-encoding, etc. -->
        </variablelist>

      </sect3>

    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 2:  PROPERTIES                                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-2">
    <title>Propiedades</title>

    <para>Ya hemos cubierto en detalle cómo Subversion almacena y
      recupera varias versiones de ficheros y directorios en sus
      repositorios. Capítulos enteros han sido dedicados a este
      trozo fundamental de funcionalidad proporcionada por la
      herramienta. Y si el soporte de versionado acabase aquí,
      Subversion seguiría estando completo desde una perspectiva
      de control de versiones. Pero no acaba aquí.</para>

    <para>Además de versionar sus directorios y ficheros, Subversion
      proporciona una interfaz para añadir, modificar y eliminar
      meta datos versionados en cada uno de sus directorios y
      ficheros versionados. Nos referimos a estos meta datos
      como <firstterm>propiedades</firstterm>, y puede pensar en
      ellas como tablas de dos columnas que relacionan nombres de
      propiedades con valores arbitrarios anexos a cada elemento en
      su copia de trabajo local. En general, los nombres y valores
      de las propiedades pueden ser cualquier cosa que usted desee,
      con la restricción de que los nombres sean texto legible
      por humanos. Y la mejor parte de estas propiedades es que
      también son versionadas, igual que el contenido textual de
      sus ficheros. Puede modificar, enviar cambios al repositorio
      y revertir cambios sobre propiedades tan fácilmente como
      realiza cambios textuales. Y recibirá las modificaciones de
      propiedades que otras personas realicen cuando actualice su
      copia local de trabajo.</para>

    <sidebar>
      <title>Otras propiedades en Subversion</title>

      <para>Las propiedades también aparecen en otros sitios en
        Subversion.  Igual que los ficheros y directorios pueden
        tener nombres y valores de propiedades arbitrarios
        anexos, cada revisión como un todo puede tener
        propiedades arbitrarias anexas. Se aplican las mismas
        restricciones&mdash;nombres en formato texto legibles por
        humanos y cualquier cosa como valor binario&mdash;con
        la excepción de que las propiedades de revisión no son
        versionadas. Vea <xref linkend="svn-ch-5-sect-1.2" /> para
        más información sobre estas propiedades sin versionar.</para>
    </sidebar>

    <para>En esta sección, examinaremos la utilidad&mdash;tanto
      para usuarios de Subversion como para sí mismo&mdash;del
      soporte de propiedades.  Aprenderá los subcomandos
      <command>svn</command> relacionados con propiedades, y cómo
      las modificaciones de propiedades pueden afectar a su flujo de
      trabajo normal con Subversion.  Esperamos convencerle de que
      las propiedades de Subversion pueden mejorar su satisfacción
      con el control de versiones.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.1">
      <title>¿Por qué propiedades?</title>

      <para>Las propiedades pueden ser adiciones muy útiles a copia
        de trabajo local.  De hecho, Subversion usa para sí
        mismo propiedades para almacenar información especial,
        y como modo para indicar que puede ser necesario cierto
        procesamiento especial. Igualmente, puede usar propiedades
        para sus propósitos. Por supuesto, cualquier cosa que haga
        con propiedades puede ser realizada también usando ficheros
        versionados regulares, pero considere el siguiente ejemplo
        de uso de propiedades de Subversion.</para>

      <para>Digamos que desea diseñar una página web que almacene
        muchas fotos digitales, y las muestra con descripciones
        y una marca de fecha. Ahora, su conjunto de fotos cambia
        constantemente, así que le gustaría tener la mayor parte
        posible de la web automatizada. Estas fotos pueden ser
        bastante grandes, así que como es habitual en páginas
        web de esta naturaleza, desea proporcionar miniaturas
        de las imágenes a los visitantes de su web. Puede
        hacer esto con ficheros tradicionales. Es decir,
        puede tener su <filename>imagen123.jpg</filename>
        y <filename>imagen123-miniatura.jpg</filename>
        uno al lado del otro en un directorio. O si
        prefiere tener los mismos nombres, puede tener
        las miniaturas en un directorio diferente, como
        <filename>miniaturas/imagen123.jpg</filename>.  También
        puede almacenar sus descripciones y marcas de fechas del
        mismo modo, de nuevo separados del fichero original de
        la imagen. Pronto, su árbol de ficheros será un desorden,
        y crecerá en múltiplos con cada nueva foto que añada a la
        página web.</para>

      <para>Ahora considere la misma situación usando las propiedades
        de ficheros de Subversion. Imagine tener un único fichero,
        <filename>imagen123.jpg</filename>, y varias propiedades
        anexas llamadas <literal>descripcion</literal>,
        <literal>marcadetiempo</literal>, e incluso
        <literal>miniatura</literal>. Ahora el directorio de su
        copia local de trabajo parece más fácil de gestionar&mdash;de
        hecho, parece que no hay más que ficheros de imágenes. Pero
        sus scripts automáticos están preparados. Saben que
        pueden usar <command>svn</command> (o incluso mejor,
        pueden usar un lenguaje de enlace con Subverion&mdash;
        vea <xref linkend="svn-ch-8-sect-2.3" />) para extraer la
        información adicional que su página web necesita mostrar
        sin tener que leer un fichero índice o jugar manipulando
        las rutas de ficheros.</para>

      <para>Cómo usar las propiedades de Subversion (si decide
        usarlas) está en sus manos. Tal y como hemos mencionados,
        Subversion usa las propiedades para sus propios fines,
        que discutiremos más tarde en este capítulo.  Pero antes,
        veamos cómo manipular opciones usando el programa
        <command>svn</command>.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.2">
      <title>Manipulando propiedades</title>

      <para>El comando <command>svn</command> tiene la libertad de
        añadir o modificar propiedades de ficheros y directorios
        de varias maneras.  Para propiedades con valores cortos,
        legibles por humanos, quizás la forma más simple de
        añadir una nueva propiedad es especificar el nombre de
        la propiedad y su valor en la línea de comando con el
        subcomando <command>propset</command>.</para>

      <screen>
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</screen>
       
      <para>Pero hemos estado <!-- TODO touting?--> alabando la
        flexibilidad que Subversion ofrece para los valores de sus
        propiedades. Y si está planeando tener un valor de propiedad
        textual multi línea, o incluso binario, probablemente
        no quiera proporcionarlo en la línea de comando. Así
        que el subcomando <command>propset</command> acepta el
        parámetro <option>--file</option> (<option>-F</option>)
        para especificar el nombre de un fichero que contiene el
        nuevo valor de una propiedad.</para>

      <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</screen>

      <para>Además del comando <command>propset</command>,
        el programa <command>svn</command> proporciona el comando
        <command>propedit</command>.  Este comando usa el programa de
        edición configurado (vea <xref linkend="svn-ch-7-sect-1.3.2"
        />) para añadir o modificar propiedades.  Cuando ejecuta el
        comando, <command>svn</command> invoca su programa de edición
        sobre un fichero temporal que contiene el valor actual de la
        propiedad (o un fichero vacío, si está añadiendo una nueva
        propiedad). Entonces, simplemente modifique el valor en su
        programa de edición hasta que represente el nuevo valor
        que desea almacenar para la propiedad, guarde el fichero
        temporal, y salga del programa de edición. Si Subversion
        detecta que realmente ha modificado el fichero, aceptará
        esta versión como nuevo valor de la propiedad. Si sale de
        su programa de edición sin realizar cambios, la propiedad
        no será modificada.</para>

      <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</screen>

      <para>Debemos advertirle de que al igual que con otros
        subcomandos de <command>svn</command>, aquellos relacionados
        con propiedades pueden actuar sobre varias rutas a
        la vez. Esto le permite modificar propiedades sobre un
        conjunto de ficheros con un único comando. Por ejemplo,
        podríamos haber hecho:</para>

      <screen>
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
&hellip;
$
</screen>

      <para>Todas estas adiciones y ediciones de propiedades no
        son realmente muy útiles si no puede recuperar
        fácilmente el valor almacenado en la propiedad. Así
        que el programa<command>svn</command> proporciona
        dos subcomandos para mostrar los nombres y valores de
        propiedades anexas a ficheros y directorios. El comando
        <command>svn proplist</command> mostrará un listado de los
        nombres de las propiedades que existen en una ruta. Una
        vez conozca el nombre de las propiedades de un nodo, puede
        solicitar sus valores individualmente usando <command>svn
        propget</command>. Este comando, dada una ruta (o grupo de
        rutas) y un nombre de propiedad, imprimirá el valor de la
        propiedad al flujo estándar de salida.</para>

      <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</screen>

      <para>Incluso existe una variación del comando
        <command>proplist</command> que mostrará tanto
        el nombre de todas las propiedad como su valor
        command. Simplemente use la opción <option>--verbose</option>
        (<option>-v</option>).</para>

      <screen>
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&hellip;
</screen>

      <para>El último subcomando que trata con propiedades es
        <command>propdel</command>. Dado que Subversion le
        permite almacenar propiedades con valores vacíos, no puede
        eliminar una propiedad usando <command>propedit</command>
        o <command>propset</command>.  Por ejemplo, este comando
        <emphasis>no</emphasis> le proporcionará el efecto
        deseado:</para>

      <screen>
$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</screen>

      <para>Debe usar el comando <command>propdel</command>
        para eliminar las propiedades por completo. La sintaxis es
        similar a la de otros comandos de propiedades:</para>

      <screen>
$ svn propdel license calc/button.c
property 'license' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</screen>

      <para>Ahora que está familiarizado con todos los subcomandos de
        <command>svn</command> relacionados con propiedades,
        veamos cómo las modificaciones de propiedades afectan
        al flujo de trabajo habitual de Subversion.  Tal y como
        mencionamos anteriormente, las propiedades de ficheros y
        directorios están versionadas, igual que los contenidos de
        los ficheros. Como resultado, Subversion proporciona las
        mismas oportunidades de fusionar&mdash;ya sea de manera
        limpia o resolviendo conflictos&mdash;las modificaciones
        sobre propiedades de otra persona con las suyas.</para>

      <sidebar>
        <title>Modificando propiedades de revisiones</title>

        <para>¿Se acuerda de esas propiedades de revisiones sin
          versionar? Puede modificarlas también con el programa
          <command>svn</command>.  Simplemente añada el parámetro
          <option>--revprop</option> a la línea de comando,
          y especifique la revisión de la propiedad que desea
          modificar. Dado que las revisiones son globales, no
          necesita especificar una ruta en este caso mientras esté
          posicionado en la copia local de trabajo del repositorio
          cuya propiedad de revisión desea modificar. Por ejemplo,
          quizás desee reemplazar el mensaje del informe de cambios
          de una revisión existente.
          <footnote>
            <para>Corregir faltas ortográficas, errores gramaticales,
              y <quote>simplemente-cosas-incorrectas</quote>
              en el mensaje del informe de cambios es quizás
              el caso de uso más habitual para la opción
              <option>--revprop</option>.</para>
          </footnote></para>

        <screen>
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</screen>

        <para>Tenga en cuenta que la capacidad para modificar
          estas propiedades no versionadas debe ser explícitamente
          añadida al repositorio por el administrador (vea
          <xref linkend="svn-ch-5-sect-2.1" />).  Dado que las
          propiedades no son versionadas, corre el riesgo de perder
          información si no es cuidadoso con sus modificaciones.
          El administrador del repositorio puede configurar métodos
          para evitar estas pérdidas, y por defecto, la modificación
          de propiedades no versionadas está desactivada.</para>

      </sidebar>

      <para>Al igual que con los contenidos de sus ficheros,
        sus cambios sobre propiedades son modificaciones locales,
        únicamente convertidas en permanentes cuando las envía al
        repositorio con <command>svn commit</command>.  También puede
        deshacer fácilmente sus cambios&mdash;el comando <command>svn
        revert</command> recuperará sus ficheros y directorios a
        su estado no modificado, contenido, propiedades, y todo lo
        demás. Además, puede recibir información interesante sobre
        el estado de las propiedades de sus ficheros y directorios
        usando los comandos <command>svn status</command> y
        <command>svn diff</command>.</para>

      <screen>
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2003 Red-Bean Software

$
</screen>

      <para>Fíjese cómo el subcomando <command>status</command>
        muestra una <literal>M</literal> en la segunda columna
        en lugar de la primera. Esto es porque hemos modificado
        propiedades de <filename>calc/button.c</filename>, pero no
        hemos modificado su contenido. De haber cambiado ambos,
        habríamos visto también una <literal>M</literal> en la
        primera columna (vea <xref linkend="svn-ch-3-sect-4.3.1"
        />).</para>

      <sidebar>
        <title>Conflictos de propiedades</title>

        <para>Al igual que con el contenido de ficheros, las
          modificaciones locales de propiedades pueden entrar
          en conflicto con cambios enviados al servidor por otra
          persona. Si actualiza el directorio de su copia local de
          trabajo y recibe cambios de propiedades sobre un recurso
          versionado que chocan con los suyos, Subversion indicará
          que el recurso está en estado de conflicto.</para>
 
        <screen>
% svn update calc
M  calc/Makefile.in
 C calc/button.c
Updated to revision 143.
$ 
</screen>
         
        <para>Subversion también creará, en el mismo directorio
          que el recurso en conflicto, un fichero con la extensión
          <filename>.prej</filename> que contiene los detalles del
          conflicto.  Debería examinar el contenido de este fichero
          para poder decidir cómo resolver el conflicto. Hasta que
          el conflicto sea resuelto, verá una <literal>C</literal>
          en la segunda columna de la salida del comando <command>svn
          status</command> para ese recurso, y fallará cualquier
          intento de enviar sus modificaciones locales al
          servidor.</para>

        <screen>
$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
prop 'linecount': user set to '1256', but update set to '1301'.
$
</screen>
 
        <para>Para resolver conflictos de propiedades, simplemente
          asegúrese de que las propiedades en conflicto contienen
          los valores que deberían, y entonces use el comando
          <command>svn resolved</command> para indicar a Subversion
          que ha solucionado manualmente el problema.</para>

      </sidebar>

      <para>Quizás también se haya dado cuenta del modo no estándar
        usado por Subversion para mostrar las diferencias
        entre propiedades. Todavía puede ejecutar <command>svn
        diff</command> y redirigir la salida para crear un fichero
        parche usable. El programa <command>patch</command> ignorará
        los parches de propiedades&mdash;como regla general,
        ignora cualquier ruido que no es capaz de entender. Esto
        significa desafortunadamente que para aplicar completamente
        un parche generado por <command>svn diff</command>,
        cualquier modificación de propiedades deberá ser aplicada
        a mano.</para>

      <para>Como puede ver, la presencia de modificaciones de
        propiedades no tiene efectos significativos en el flujo
        de trabajo típico con Subversion.  Sus patrones generales
        de actualizar su copia local, verificar el estado de
        sus ficheros y directorios, obtener informes sobre las
        modificaciones realizadas, y enviar éstas al repositorio
        son completamente inmunes a la presencia o ausencia de
        propiedades. El programa <command>svn</command> tiene algunos
        subcomandos adicionales para efectuar cambios de propiedades,
        pero esto es la única asimetría notable.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.3">
      
      <title>Propiedades especiales</title>

      <para>Subversion no tiene reglas particulares sobre
        propiedades&mdash;puede usarlas para cualquier
        fin. Subversion sólo le pide que no use nombres
        de propiedades que comiencen con el prefijo
        <literal>svn:</literal>.  Ese es el espacio de nombres que
        reserva para uso propio. De hecho, Subversion define ciertas
        propiedades que tienen efectos mágicos sobre ficheros y
        directorios. En esta sección, desvelaremos el misterio,
        y describiremos cómo estas propiedades especiales pueden
        hacerle la vida un poco más fácil.</para>
      
      <sect3 id="svn-ch-7-sect-2.3.1">
        <title><literal>svn:executable</literal></title>
 
        <para>La propiedad <literal>svn:executable</literal> se
          usa para controlar de un modo semi automático el bit
          de permiso de ejecución de un fichero versionado.
          Esta propiedad no tiene valor definido&mdash;su mera
          presencia indica el deseo de que el bit de permiso de
          ejecución se mantenga activado por Subversion. Eliminar
          esta propiedad devolverá el control total del bit de
          ejecución al sistema operativo.</para>

        <para>En muchos sistemas operativos, la capacidad de ejecutar
          un fichero o comando es gobernada por la presencia de un
          bit de permiso de ejecución.  Éste suele estar desactivado
          por defecto, y debe ser activado de forma explícita
          por el usuario para cada fichero que lo requiera. En
          una copia de trabajo local, se crean nuevos ficheros
          constantemente a medida que nuevas versiones de ficheros
          existentes son recibidas durante una actualización. Esto
          significa que quizás active el bit de ejecución en un
          fichero, entonces actualice su copia de trabajo, y si ese
          fichero fue modificado como parte de la actualización,
          su bit de ejecución puede haber sido desactivado<!--
          TODO Frase muy larga, mezcla de tiempos en los
          verbos?-->. Así que Subversion proporciona la propiedad
          <literal>svn:executable</literal> para mantener el bit de
          ejecución activado.</para>

        <para>Esta propiedad no tiene efecto en sistemas de ficheros
          que no tienen concepto de bits de permiso de ejecución,
          como FAT32 y NTFS.
          <footnote>
            <para>El sistema de ficheros de Windows usa extensiones
              de ficheros (como <literal>.EXE</literal>,
              <literal>.BAT</literal>, y <literal>.COM</literal>)
              para indicar que un fichero es ejecutable.</para>
          </footnote>
          Además, aunque no tenga valores definidos, Subversion
          forzará el valor a <literal>*</literal> cuando ajuste
          esta propiedad.  Finalmente, esta propiedad es únicamente
          válida en ficheros, no en directorios.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.2">
        <title><literal>svn:mime-type</literal></title>
        
        <para>La propiedad <literal>svn:mime-type</literal> tiene
          varios propósitos en Subversion. Aparte de ser el
          lugar genérico para almacenar la clasificación
          de extensión polivalente de correo por Internet
          (MIME<footnote><para>N.T.: <quote>Multipurpose Internet
          Mail Extension</quote> en inglés.</para></footnote>), el
          valor de esta propiedad determina algunas características
          del comportamiento de Subversion.</para>

        <para>Por ejemplo, si la propiedad
          <literal>svn:mime-type</literal> de un fichero tiene un
          valor de tipo MIME no textual (generalmente, algo que no
          comienza con <literal>text/</literal>, aunque hay algunas
          excepciones), Subversion asumirá que el fichero contiene
          datos binarios&mdash;es decir, no legibles por un ser
          humano. Uno de los beneficios habitualmente proporcionado
          por Subversion es el fusionado contextual, basado en
          líneas, de los cambios recibidos del servidor durante una
          actualización de su fichero de la copia local. Pero para
          los ficheros que se considera contienen datos binarios,
          no existe el concepto de una <quote>línea</quote>. Así
          que para esos ficheros, Subversion no intenta realizar un
          fusionado contextual durante la actualización. En su lugar,
          siempre que tenga un fichero binario en su copia local
          que esté siendo actualizado, su fichero es renombrado
          con la extensión <filename>.orig</filename>, y entonces
          Subversion almacena un nuevo fichero que contiene los
          cambios recibidos durante la actualización, pero sin sus
          modificaciones locales, con el nombre de fichero original.
          Este comportamiento es realmente una protección para el
          usuario contra intentos fallidos de realizar fusionados
          contextuales sobre ficheros que simplemente no pueden ser
          fusionados contextualmente.</para>

        <para>Además, si la propiedad
          <literal>svn:mime-type</literal> está ajustada, entonces el
          módulo Subversion de Apache usará su valor para rellenar
          la cabecera HTTP <literal>Content-type:</literal> cuando
          responda peticiones GET.  Esto proporciona una pista vital
          sobre cómo mostrar un fichero cuando examina su repositorio
          con un navegador web.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.3">
        <title><literal>svn:ignore</literal></title>

        <para>La propiedad <literal>svn:ignore</literal> contiene
          una lista de patrones de ficheros que serán excluidos por
          ciertas operaciones de Subversion. Quizás la propiedad
          especial usada con mayor frecuencia, funciona junto con el
          parámetro de ejecución <literal>global-ignores</literal>
          (vea <xref linkend="svn-ch-7-sect-1.3.2" />) para filtrar
          ficheros y directorios no versionados con los comandos
          <command>svn status</command>, <command>svn add</command>,
          y <command>svn import</command>.</para>

        <para>La razón tras la propiedad
          <literal>svn:ignore</literal> es fácil de explicar.
          Subversion no asume que todo fichero o subdirectorio de una
          copia de trabajo local está destinado a ser puesto bajo
          control de versiones. Los recursos deben ser asignados
          explícitamente bajo la gestión de Subversion usando
          los comandos <command>svn add</command> o <command>svn
          import</command>.  Como resultado, con frecuencia
          muchos recursos en una copia local de trabajo no están
          versionados.</para>

        <para>Ahora, el comando <command>svn status</command>
          muestra como parte de su salida cada fichero o
          subdirectorio en la copia local de trabajo que no está
          filtrado por la opción <literal>global-ignores</literal>
          (o su valor por defecto).  Esto se hace así para que los
          usuarios puedan ver si quizás han olvidado poner un recurso
          bajo control de versiones.</para>

        <para>Pero Subversion es incapaz de adivinar los nombres
          de cada recurso que debe ser ignorado. Además,
          a menudo hay cosas que deberían ser ignoradas en
          <emphasis>cada</emphasis> copia local de trabajo de
          un repositorio particular.  Obligar a cada usuario del
          repositorio a que añada patrones para estos recursos a sus
          áreas de configuración de parámetros de ejecución no sólo
          sería un incordio, sino que podría entrar en conflicto con
          las necesidades de configuración de otras copias locales
          de trabajo que el usuario ha obtenido.</para>

        <para>La solución es almacenar los patrones de exclusión que
          son únicos del directorio donde deben ser aplicados
          junto con el propio directorio.  Ejemplos habituales de
          recursos no versionados que son básicamente únicos de
          cada directorio, y propensos a aparecer ahí, son ficheros
          generados por la compilación de programas. O&mdash;para
          usar un ejemplo más apropiado para este libro&mdash;los
          ficheros HTML, PDF o PostScript generados como resultado
          de la conversión de los ficheros fuente XML DocBook a un
          formato de salida más legible.</para>

        <sidebar>
          <title>Patrones de exclusión para usuarios de CVS</title>
        
          <para>La propiedad <literal>svn:ignore</literal> de
            Subversion es muy similar en sintaxis y funcionalidad
            al fichero <filename>.cvsignore</filename> de CVS.
            De hecho, si está migrando una copia local de CVS a
            Subversion, puede migrar directamente los patrones de
            exclusión usando el fichero <filename>.cvsignore</filename>
            como fichero de entrada del comando <command>svn
            propset</command>:</para>
       
          <screen>
$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</screen>        

          <para>Existen, no obstante, algunas diferencias en el modo
            que CVS y Subversion manejan los patrones de
            exclusión. Los dos sistemas usan los patrones
            de exclusión en diferentes momentos, y hay algunas
            pequeñas discrepancias en cuanto a qué afectan estos
            patrones de exclusión. Además, Subversion no reconoce
            el uso del patrón <literal>!</literal> como comando para
            resetear la configuración y eliminar todos los patrones
            de exclusión.</para>

        </sidebar>

        <para>Para este propósito, la propiedad
          <literal>svn:ignore</literal> es la solución.  Su valor es
          un conjunto multi línea de patrones de ficheros, un patrón
          por línea. La propiedad se activa en el directorio donde
          quiere que los patrones sean aplicados.
          <footnote>
            <para>Los patrones únicamente funcionarán en ese
              directorio&mdash;no serán aplicados de forma recursiva
              en subdirectorios.</para>
          </footnote>
          Por ejemplo, digamos que obtiene la siguiente salida
          <command>svn status</command>:</para>

       <screen>
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</screen>

        <para>En este ejemplo, ha realizado algunas modificaciones
          de propiedades sobre <filename>button.c</filename>,
          pero en su copia local de trabajo también tiene algunos
          ficheros sin versionar: la última versión del programa
          <filename>calculator</filename> que ha compilado del
          código fuente, un fichero de código fuente llamado
          <filename>data.c</filename>, y un conjunto de ficheros
          de depuración. Ahora, ya sabe que su sistema de compilado
          siempre acaba generando el programa
          <filename>calculator</filename>.
          <footnote>
            <para>¿No es este acaso el propósito de un sistema de
              compilación?</para>
          </footnote>
          Y sabe que el conjunto de sus unidades de verificación
          siempre acaban dejando ficheros de depuración en el
          directorio. Estos hechos son ciertos para todas las copias
          de trabajo, no sólo la suya. Y sabe que no está interesado
          en ver estas cosas cada vez que ejecute <command>svn
          status</command>.  Así que use <command>svn propedit
          svn:ignore calc</command> para añadir algunos patrones
          de exclusión al directorio <filename>calc</filename>.
          Por ejemplo, podría añadir lo siguiente como nuevo valor
          de la propiedad <literal>svn:ignore</literal>:</para>

        <programlisting>
calculator
debug_log*
</programlisting>

        <para>Tras añadir esta propiedad, ahora tendrá una modificación
          local de propiedad en el directorio <filename>calc</filename>.
          Pero advierta qué otras cosas son diferentes sobre la salida
          del comando
          <command>svn status</command>:</para>

        <screen>
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</screen>

        <para>¡Ahora, los despojos no entorpecen el listado! Por
          supuesto, esos ficheros aun están en su copia local de
          trabajo. Subversion únicamente no le está recordando
          que están presentes y no versionados. Y ahora tras haber
          eliminado todo el ruido trivial del listado, se encuentra
          con elementos más interesantes&mdash;como por ejemplo el
          fichero de código fuente que probablemente olvidó poner
          bajo control de versiones.</para>

        <para>Si quiere ver los ficheros ignorados, puede pasar
          el parámetro <command>--no-ignore</command> a
          subversion:</para>

<screen>
$ svn status --no-ignore
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</screen>

        <para>La lista de patrones a excluir también es usada por
          <command>svn add</command> y <command>svn
          import</command>. Ambas de estas operaciones conllevan
          preguntar a Subversion que comience a gestionar algún
          conjunto de ficheros y directorios.  En lugar de forzar al
          usuario que escoja qué ficheros de un árbol desea comenzar
          a versionar, Subversion usa los patrones de exclusión para
          determinar qué ficheros no deberían ser arrastrados bajo
          control de versiones durante grandes adiciones recursivas
          u operaciones de importación.</para>
   
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.4">
        <title><literal>svn:keywords</literal></title>

        <para>Subversion tiene la capacidad de sustituir
          <firstterm>palabras clave</firstterm>&mdash;trozos dinámicos
          de información útil sobre un fichero versionado&mdash;en
          el contenido de los propios ficheros. Las palabras clave
          generalmente describen información sobre la última vez que
          el fichero fue modificado. Dado que esta información cambia
          cada vez que el fichero es modificado, y más importante aun,
          justo <emphasis>después</emphasis> de la modificación, es
          tarea difícil para todo proceso excepto el sistema de control
          de versiones, mantener los datos completamente actualizados.
          Si esta tarea fuese delegada en los autores humanos, la
          información inevitablemente quedaría desfasada.</para>

        <para>Por ejemplo, digamos que posee un documento en el cual le
          gustaría mostrar la última fecha en la que fue
          modificado. Podría obligar a cada autor de ese documento
          a que, justo antes de enviar sus cambios al repositorio,
          también modifiquen la parte del documento que describe
          la última fecha de modificación. Pero tarde o temprano,
          alguien se olvidará de hacer eso. En su lugar, indique a
          Subversion que realice la sustitución de la palabra clave
          <literal>LastChangedDate</literal>. Puede controlar
          el lugar donde figura esta palabra clave colocando
          una <firstterm>marca de palabra clave</firstterm>
          en el lugar apropiado del fichero. Esta marca no
          es más que una cadena de texto formateada como
          <literal>$</literal><replaceable>PalabraClave</replaceable><literal>$</literal>.</para>

        <para>Subversion una lista de palabras clave disponibles para ser
          sustituidas. Esta lista contiene las cinco siguientes palabras
          clave, algunas de las cuales tienen sinónimos más cortos que
          también puede usar:</para>

        <variablelist>
          <varlistentry>
            <term><literal>LastChangedDate</literal></term>
            <listitem>
              <para>Esta palabra clave describe el último momento en
                que el fichero fue modificado en el repositorio, y tiene
                el aspecto <literal>$LastChangedDate: 2002-07-22 21:42:37
                -0700 (Mon, 22 Jul 2002) $</literal>. Puede ser abreviada
                como <literal>Date</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedRevision</literal></term>
            <listitem>
              <para>Esta palabra clave describe la última revisión
                conocida en la que este fichero fue
                modificado en el repositorio, y tiene el aspecto
                <literal>$LastChangedRevision: 144 $</literal>. Puede
                ser abreviada como <literal>Revision</literal> o
                <literal>Rev</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedBy</literal></term>
            <listitem>
              <para>Esta palabra clave describe el último usuario conocido
                que modificó este fichero en el repositorio, y tiene
                el aspecto <literal>$LastChangedBy: juan $</literal>.
                Puede ser abreviada como <literal>Author</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>HeadURL</literal></term>
            <listitem>
              <para>Esta palabra clave describe la URL completa a la
                última versión de este fichero en el
                repositorio, y tiene el aspecto <literal>$HeadURL:
                http://svn.collab.net/repos/trunk/README $</literal>.
                Puede ser abreviada como <literal>URL</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Id</literal></term>
            <listitem>
              <para>Esta palabra clave es una combinación comprimida
                de las otras palabras clave. Su sustitución tiene
                el aspecto <literal>$Id: calc.c 148 2002-07-28
                21:30:43Z carmen $</literal>, y su interpretación
                indica que el fichero <filename>calc.c</filename>
                fue modificado por última vez en la revisión 148
                de la tarde del 28 de Julio del 2002 por el usuario
                <literal>carmen</literal>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Añadir únicamente la marca con la palabra clave a su
          fichero no hace nada especial. Subversion nunca intentará
          realizar sustituciones textuales en sus ficheros a no
          ser que usted lo pida explícitamente. Después de todo,
          quizás esté escribiendo un documento
          <footnote>
            <para>&hellip; o quizás incluso una sección de un libro
            &hellip;</para>
          </footnote> 
          sobre cómo usar palabras clave, ¡y no desea que Subversion
          sustituya sus bonitos ejemplos de marcas de palabras claves
          no sustituidas!</para>

        <para>Para indicar a Subversion si desea o no sustituir palabras
          clave en un fichero particular, de nuevo volvemos a usar
          los subcomandos relacionados con propiedades. La propiedad
          <literal>svn:keywords</literal>, una vez activada en un fichero
          versionado, controla qué palabras clave serán sustituidas. El
          valor es una lista delimitada por espacios con las palabras
          clave o sinónimos de la tabla anterior.</para>

        <para>Por ejemplo, digamos que tiene un fichero llamado
          <filename>weather.txt</filename> que tiene el siguiente
          aspecto:</para>

        <programlisting>
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</programlisting>
        
        <para>Sin haber activado la propiedad
          <literal>svn:keywords</literal> en ese fichero, Subversion
          no hará nada especial. Ahora, activemos la sustitución de la
          palabra clave <literal>LastChangedDate</literal>.</para>

        <screen>
$ svn propset svn:keywords "LastChangedDate Author" weather.txt
property 'svn:keywords' set on 'weather.txt'
$
</screen>        

        <para>Ahora acaba de realizar una modificación local de propiedad
          sobre el fichero <filename>weather.txt</filename>. No verá
          cambios en el contenido del fichero (a no ser que haya realizado
          algunos antes de activar la propiedad).  Fíjese que el fichero
          contenía la marca de la palabra clave <literal>Rev</literal>,
          y no obstante no incluimos esta palabra clave en el valor de
          la propiedad. Subversion ignorará felizmente peticiones para
          sustituir palabras clave que no están presentes en el fichero,
          y no sustituirá palabras clave que no están presentes en el
          valor de la propiedad <literal>svn:keywords</literal>.</para>

        <sidebar>
          <title>Palabras clave y diferencias espurias</title>

          <para>El resultado de la sustitución de palabras clave
            visible por usuarios finales puede llevarle a pensar que
            cada versión de un fichero que use esta característica
            diferirá de la versión anterior en al menos el área donde
            fue colocada la marca de la palabra clave. No obstante,
            este no es el caso.  Mientras se buscan modificaciones
            locales durante <command>svn diff</command>, y antes de
            transmitir esas modificaciones locales durante <command>svn
            commit</command>, Subversion <quote>de-sustituye</quote>
            <!-- Quizás resustituye? -->palabras clave anteriormente
            sustituidas. El resultado es que las versiones del fichero
            que están almacenadas en el repositorio contienen únicamente
            las modificaciones reales que los usuarios realizan en el
            fichero.</para>

        </sidebar>

        <para>Inmediatamente después de que envíe al repositorio la
          modificación de esta propiedad, Subversion actualizará
          la copia local de su fichero con el nuevo texto
          sustituido.  En lugar de ver su marca de palabra clave
          <literal>$LastChangedDate$</literal>, verá el resultado de
          su sustitución.  El resultado también contendrá el nombre de
          la palabra clave, y continuará estando rodeado por caracteres
          de dólar (<literal>$</literal>).  Y tal y como predijimos,
          la palabra clave <literal>Rev</literal> no fue sustituida
          porque no solicitamos hacerlo.</para>

        <screen>
Here is the latest report from the front lines.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</screen>
        
        <para>Si alguna otra persona envía al repositorio cambios sobre
          el fichero <filename>weather.txt</filename>, su copia de ese
          fichero continuará mostrando el mismo valor de la sustitución de
          la palabra clave&mdash;hasta que actualice su copia de trabajo
          local. Durante ese instante las palabras clave de su fichero
          <filename>weather.txt</filename> serán re-sustituidas para
          reflejar la información más reciente de ese fichero enviada
          al repositorio.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.5">
        <title><literal>svn:eol-style</literal></title>

        <para>Mientras la propiedad <literal>svn:mime-type</literal>
          de un fichero versionado no indique lo contrario,
          Subversion asume que el fichero contiene datos legibles
          por seres humanos. En general, Subversion sólo usa
          este conocimiento para determinar si se pueden realizar
          ficheros diferenciales contextuales sobre el fichero.
          En caso contrario, para Subversion, los bytes son
          bytes.</para>
        
        <para>Esto significa que por defecto, Subversion no
          presta atención al tipo de <firstterm>marcas de fin de
          línea (EOL)</firstterm> que use en sus ficheros.
          Desafortunadamente, diferentes sistemas operativos
          usan caracteres diferentes para representar los fines
          de línea en un fichero de texto. Por ejemplo, el carácter
          de fin de línea habitual usado por software en la
          plataforma Windows es una pareja de caracteres de
          control ASCII &mdash;retorno de carro (<literal>CR</literal>)
          y nueva línea<!-- TODO line feed mal traducido-->
          (<literal>LF</literal>).  En su lugar, el software
          Unix usa simplemente el carácter <literal>LF</literal>
          para indicar nueva línea.</para>

        <para>No todas las herramientas en estos sistemas
          operativos están preparadas para entender ficheros
          en formatos que difieran del <firstterm>estilo de fin
          de línea nativo</firstterm> del sistema operativo
          sobre el cual están corriendo. Los resultados habituales
          son que los programas Unix tratan el carácter
          <literal>CR</literal> presente en ficheros Windows
          como caracteres regulares (normalmente mostrados como
          <literal>^M</literal>), y los programas Windows
          combinan todas las líneas de un fichero Unix en una
          línea gigante porque no encuentran la combinación de
          retorno de carro y nueva línea (o <literal>CRLF</literal>)
          que marca el fin de línea.</para>

        <para>Esta sensibilidad <!--TODO bonito palabro --> a marcas
          EOL extrañas puede resultar frustrante para quienes
          comparten un fichero en múltiples sistemas operativos
          diferentes.  Por ejemplo, considere un fichero de
          código fuente y desarrolladores que modifiquen este
          fichero tanto en Windows como en Unix. Si todos los
          desarrolladores usan herramientas que preservan el
          estilo de fin de línea del fichero, no ocurrirán
          problemas.</para>

        <para>Pero en la práctica, muchas herramientas comunes o
          bien fallan al leer un fichero con marcas EOL extrañas,
          o bien convierten los finales de línea al estilo
          nativo cuando el fichero es guardado. Si lo primero
          es cierto para un desarrollador, tendrá que usar una
          utilidad de conversión externa (como por ejemplo
          <command>dos2unix</command> o su compañera,
          <command>unix2dos</command>) para preparar el fichero
          antes de modificarlo. En el segundo caso no hace falta
          preparación adicional. ¡Pero en ambos casos el resultado
          es un fichero que difiere del origen al en todas y
          cada una de las líneas! Antes de enviar sus cambios
          al repositorio, el usuario tiene dos opciones. O bien
          usa una utilidad de conversión para recuperar el
          estilo de línea que tenía el fichero antes de ser
          modificado.  O, simplemente puede enviar sus
          cambios&mdash;con nuevas marcas EOL y todo.</para>

        <para>El resultado de este tipo de escenarios incluyen
          tiempo perdido en modificaciones innecesarias sobre
          ficheros enviados al repositorio. Perder tiempo ya
          es doloroso. Pero cuando un cambio modifica toda línea
          del fichero, esto complica el trabajo de determinar
          qué lineas realmente cambiaron de un modo poco trivial
          <!-- TODO estilo, "no trivial"-->. ¿Fue el fallo
          realmente corregido?  ¿En qué línea se introdujo un
          error de sintaxis?</para>

        <para>La solución a este problema es la propiedad
          <literal>svn:eol-style</literal>.  Cuando se ajusta
          esta propiedad a un valor válido, Subversion la usa
          para determinar si tiene que realizar un proceso
          especial sobre el fichero para que los finales de
          línea del fichero no bailen como un flip-flop con
          cada cambio enviado al repositorio proveniente de un
          sistema operativo diferente. Los valores válidos
          son:</para>

        <variablelist>
          <varlistentry>
            <term><literal>native</literal></term>
            <listitem>
              <para>Esto provoca que el fichero contenta marcas EOL
                nativas del sistema operativo en que fue
                ejecutado Subversion. En otras palabras.
                si un usuario de Windows obtiene una copia local
                de un fichero cuya propiedad
                <literal>svn:eol-style</literal> contenga el valor
                <literal>native</literal>, ese fichero contendrá
                marcas EOL <literal>CRLF</literal>. Un usuario de
                Unix que obtenga una copia local del mismo fichero
                verá marcas EOL <literal>LF</literal>.</para>

              <para>Tenga en cuenta que Subversion en realidad
                almacenará el fichero en el repositorio usando
                marcas EOL <literal>LF</literal> normalizadas
                sin importar el sistema operativo. No obstante,
                esto es básicamente transparente para el
                usuario.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CRLF</literal></term>
            <listitem>
              <para>Esto provoca que el fichero contenga la secuencia
                <literal>CRLF</literal> como marcas EOL, sin importar
                el sistema operativo usado.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LF</literal></term>
            <listitem>
              <para>Esto provoca que el fichero contenga el carácter
                <literal>LF</literal> como marca EOL, sin importar
                el sistema operativo usado.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CR</literal></term>
            <listitem>
              <para>Esto provoca que el fichero contenga el carácter
                <literal>CR</literal> como marca EOL, sin importar
                el sistema operativo usado.  Este estilo de fin de
                línea no es muy habitual. Fue usado en plataformas
                Macintosh antiguas (en las cuales Subversion ni si
                quiera funciona).</para>
            </listitem>
          </varlistentry>
        </variablelist>
        
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.6">
        <title><literal>svn:externals</literal></title>

        <para>La propiedad <literal>svn:externals</literal> contiene
          instrucciones para Subversion de poblar el directorio
          con una o más copias locales de trabajo de Subversion.
          Para más información sobre esta propiedad y sus usos,
          vea <xref linkend="svn-ch-7-sect-3"/>.</para>

      </sect3>
    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.4">
      <title>Ajuste automático de propiedades</title>

      <para>Las propiedades son una poderosa característica de
        Subversion, actuando como componentes clave de muchas
        características de Subversion descritas en este y otros
        capítulos&mdash;soporte de diferenciado de ficheros y
        fusión textual, sustitución de palabras clave, traducción
        de fines de línea, etc. Pero para obtener por completo
        sus beneficios, debe ajustarlas en los ficheros y
        directorios adecuados.  Desafortunadamente, este paso
        puede ser fácilmente olvidado en la rutina, especialmente
        dado que olvidar ajustar una propiedad normalmente no
        se traduce en una condición de error obvia (al menos
        si la compara, con digamos, olvidar añadir un fichero
        al repositorio). Para ayudar a sus propiedades a que
        sean aplicadas en los lugares necesarios, Subversion
        proporciona un par de características simples pero
        útiles.</para>

      <para>Siempre que pone un fichero bajo control de revisiones
        usando los comandos <command>svn add</command> o
        <command>svn import</command>, Subversion ejecuta una
        heurística básica para determinar si el fichero se
        compone de contenido legible o no legible por un ser
        humano. Si decide lo último, Subversion ajustará
        automáticamente la propiedad <literal>svn:mime-type</literal>
        de ese fichero a <literal>application/octet-stream</literal>
        (el tipo MIME genérico <quote>esto es un grupo de
        bytes</quote>). Por supuesto, si Subversion no acierta,
        puede ajustar la propiedad <literal>svn:mime-type</literal>
        a otro valor más concreto&mdash;quizás
        <literal>image/png</literal> o
        <literal>application/x-shockwave-flash</literal>&mdash;siempre
        puede eliminar o modificar esta propiedad.</para>

      <para>Subversion también proporciona la característica de
        auto propiedades, las cuales le permiten crear una
        relación de patrones de ficheros a nombres y valores
        de propiedades.  Estas relaciones son creadas en su
        área de parámetros de ejecución.  De nuevo, éstos afectan
        a adiciones e importaciones, y no sólo pueden sobreescribir
        cualquier tipo de decisión MIME por defecto tomada por
        Subversion, también pueden ajustar otras propiedades
        propias o de Subversion. Por ejemplo, podría crear una
        relación que dice que cada vez que añada ficheros
        JPEG&mdash;aquellos que coincidan con el patrón
        <literal>*.jpg</literal>&mdash;Subversion debería ajustar
        automáticamente la propiedad <literal>svn:mime-type</literal>
        de esos ficheros a <literal>image/jpeg</literal>.  O
        quizás cualquier fichero que coincida con
        <literal>*.cpp</literal> debería tener la propiedad
        <literal>svn:eol-style</literal> ajustada a
        <literal>native</literal>, y <literal>svn:keywords</literal>
        ajustada a <literal>Id</literal>.  El soporte de
        propiedades automáticas es quizás la herramienta de
        Subversion más útil en cuanto a propiedades. Vea <xref
        linkend="svn-ch-7-sect-1.3.2"/> para más información
        sobre cómo configurar esta característica.</para>

    </sect2>     
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 3:  EXTERNALS DEFINITIONS                           *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-3">
    <title>Repositorios externos</title>
    
    <para>A veces resulta útil construir una copia de trabajo local
      compuesta a partir de varias.  Por ejemplo, podría querer que
      diferentes subdirectorios provengan de repositorios completamente
      diferentes. Decididamente puede configurar tal escenario a
      mano&mdash;usando <command>svn checkout</command> para crear
      una copia local con la estructura anidada que intenta alcanzar.
      Pero si esta estructura es importante para cualquiera que use
      el repositorio, cualquier otro usuario necesitará realizar
      las mismas operaciones de obtención de copias locales que
      usted hizo.</para>

    <para>Afortunadamente, Subversion proporciona soporte de
      <firstterm>definiciones externas</firstterm>. Una definición
      externa es la relación de un directorio local con la URL&mdash;y
      posiblemente una revisión particular&mdash;de un recurso
      versionado.  En Subversion, declara definiciones externas en
      grupos usando la propiedad <literal>svn:externals</literal>.
      Puede crear o modificar esta propiedad usando los comandos
      <command>svn propset</command> o <command>svn propedit</command>
      (vea <xref linkend="svn-ch-7-sect-2.1"/>). Puede ser ajustada
      en un directorio versionado, y su valor es una tabla multi
      línea de subdirectorios (relativos al directorio versionado
      sobre el cual se pone la propiedad) y URLs de repositorios
      Subversion absolutas, completamente cualificadas.</para>
    
    <screen>
$ svn propget svn:externals calc
third-party/sounds             http://sounds.red-bean.com/repos
third-party/skins              http://skins.red-bean.com/repositories/skinproj
third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker
</screen>

    <para>La conveniencia de la propiedad <literal>svn:externals</literal>
      es que una vez ha sido ajustada en un directorio versionado,
      cualquiera que obtenga una copia local de trabajo de ese
      directorio, también obtendrá el beneficio de la definición
      externa. En otras palabras, una vez que una persona ha realizado
      el esfuerzo de definir esa estructura anidada de direcciones
      de repositorios, nadie más tiene que volver a repetirlo&mdash;ya
      que Subversion, a la hora de obtener una copia local, también
      obtendrá una copia de los repositorios externos.</para>

    <para>Fíjese en la definición externa del ejemplo anterior.
      Cuando alguien obtenga la copia local del directorio
      <filename>calc</filename>, Subversion continuará obteniendo
      copias locales de los elementos indicados por las definiciones
      externas.</para>

    <screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
&hellip;
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
&hellip;
</screen>

    <para>Si necesita cambiar las definiciones externas, puede
      hacerlo usando los subcomandos habituales de modificación de
      propiedades. Cuando envíe un cambio al repositorio de la
      propiedad <literal>svn:externals</literal>, Subversion
      sincronizará las copias locales obtenidas contra las definiciones
      externas la siguiente vez que ejecute <command>svn update</command>.
      Lo mismo ocurrirá cuando otras personas actualicen sus copias
      locales y obtengan sus cambios sobre las definiciones
      externas.</para>
    
    <para>El comando <command>svn status</command> también reconoce
      definiciones externas, mostrando el código de estado
      <literal>X</literal> para los subdirectorios disjuntos en los
      cuales se almacenarán las copias locales, entrando después
      de manera recursiva en estos directorios para mostrar el
      estado de los propios elementos externos.</para>
    
    <para>No obstante, el soporte de definiciones externas que hay
      hoy en Subversion puede ser ligeramente engañoso. Las copias
      locales creadas vía definición externa todavía están desconectadas
      de la copia local de trabajo primaria (en cuyos directorios
      versionados ajustó la propiedad <literal>svn:externals</literal>).
      Y Subversion todavía funciona solamente sobre copias locales
      no disjuntas. Así que, por ejemplo, si quiere enviar cambios
      al repositorio realizados en una o más de esas copias locales
      externas, debe ejecutar el comando <command>svn commit</command>
      de forma explícita en esas copias locales&mdash;enviar los
      cambios de la copia local de trabajo primaria no recurrirá
      en las copias externas.</para>
    
    <para>Además, dado que las propias definiciones son URLs
      absolutas, mover o copiar el directorio sobre el cual
      están fijadas no afectará a aquello que se obtiene
      como copia externa (aunque, claro está, el directorio
      local relativo indicado será movido con el directorio
      renombrado). Esto puede ser confuso&mdash;incluso
      frustrante&mdash;en ciertas situaciones.  Por ejemplo,
      si usa la definición externa sobre un directorio en su
      línea de desarrollo principal (<filename>/trunk</filename>)
      apuntando a otras áreas de la misma línea, y entonces usa
      <command>svn copy</command> para crear una rama de esa línea en
      <filename>/branches/my-branch</filename>, la definición externa
      sobre los elementos en su nueva rama todavía se referirán a los
      recursos versionados en <filename>/trunk</filename>.  Además,
      tenga en cuenta que si necesita reubicar su copia local de
      trabajo (usando <command>svn switch --relocate</command>),
      las definiciones externas <emphasis>no</emphasis> serán
      reubicadas.</para>

  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 4:  VENDOR BRANCHES                                 *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-4">
    <title>Ramas de proveedores</title>

    <para>En el caso especial del desarrollo de software, los datos
      que mantiene bajo control de versiones están a menudo
      relacionados con, o quizás dependan de, los datos de terceros.
      Generalmente, las necesidades de su proyecto dictarán que
      debe permanecer lo más actualizado posible con los datos
      proporcionados por esa entidad externa sin sacrificar la
      estabilidad de su propio proyecto. Este escenario ocurre
      constantemente&mdash;siempre que la información generada por
      un grupo de personas tiene un efecto directo en aquello
      generado por otro grupo.</para>
    
    <para>Por ejemplo, desarrolladores de software podrían estar
      trabajando en una aplicación que hace uso de una librería
      externa. Subversion tiene justamente este tipo de relación
      con la Apache Portable Runtime library <!-- TODO traducción
      de APR?  --> (vea <xref linkend="svn-ch-8-sect-2.1" />). El
      código fuente de Subversion depende de la librería APR para
      sus necesidades de portabilidad. En fases iniciales del
      desarrollo de Subversion, el proyecto seguía de cerca los
      cambios de la API de la APR, siempre manteniéndose en <!--TODO
      buscar bleeding edge, me suena que hay discusión de esto -->
      la <quote>última versión</quote> recién salida del horno.
      Ahora que tanto APR como Subversion han madurado, Subversion
      sólo intenta sincronizarse con la API de APR en momentos bien
      verificados, versiones estables públicas.</para>
    
    <para>Ahora, si su proyecto depende de la información de otros,
      hay varios modos que podría intentar para sincronizar esa
      información con la suya. La más dolorosa, sería ordenar
      verbalmente, o por escrito, instrucciones a todos los
      contribuyentes de su proyecto, indicándoles que se aseguren
      de tener las versiones específicas de esa información externa
      que su proyecto necesita.  Si la información externa se
      mantiene en un repositorio Subversion, podría usar las
      definiciones externas de Subversion para <quote>fijar</quote>
      de forma efectiva versiones específicas de esa información
      en alguno de los directorios de su copia local (vea <xref
      linkend="svn-ch-7-sect-3" />).</para>

    <para>Pero a veces necesita mantener modificaciones propias a
      los datos de terceros en su propio sistema de control de
      versiones. Volviendo al ejemplo de desarrollo de software,
      los programadores podrían necesitar hacer modificaciones a
      esa librería externa para sus propios propósitos. Estas
      modificaciones podrían incluir nueva funcionalidad o correcciones
      de fallos, mantenidos internamente sólo hasta que se conviertan
      en parte de un lanzamiento oficial de esa librería externa.
      O los cambios quizás nunca sean enviados a los autores de la
      librería, y existen solamente con el propósito de satisfacer
      las necesidades de sus desarrolladores como modificaciones
      personalizadas.</para>
    
    <para>Ahora se encuentra en una situación interesante. Su
      proyecto podría almacenar sus modificaciones propias a los
      datos de terceros de algún modo disjunto, como usando ficheros
      parche o completas versiones alternativas de ficheros y
      directorios.  Pero estos métodos se convierten rápidamente
      en problemas de mantenimiento, requiriendo de algún mecanismo
      que aplique sus cambios personales a los datos de terceros,
      sin olvidar la necesidad de regenerar esos cambios con cada
      versión sucesiva de los datos de terceros a los que sigue la
      pista.</para>
    
    <para>La solución a este problema es usar <firstterm>ramas de
      proveedor</firstterm>. Una rama de proveedor es un árbol de
      directorios en su propio sistema de control de versiones que
      contiene información proporcionada por una entidad externa,
      o proveedor. Cada versión de los datos del proveedor que
      decide absorber en su proyecto es llamada <firstterm>hito de
      proveedor</firstterm>.</para> <!-- TODO hito del proveedor
      != vendor drop. Buscar algo mejor. -->
    
    <para>Las ramas de proveedor proporcionan dos beneficios clave.
      Primero, al almacenar el hito de proveedor actualmente soportado
      en su propio sistema de control de versiones, los miembros
      de su proyecto nunca tendrán que preguntarse si poseen la
      versión correcta de los datos del proveedor. Simplemente
      obtienen la versión correcta como parte de su actualización
      habitual de sus copias locales de trabajo. Segundo, ya que
      los datos viven en su propio repositorio Subversion, puede
      almacenar cambios personalizados directamente en el mismo
      lugar&mdash;ya no tiene necesidad de crear un método automático
      (o peor aún, manual) para proporcionar sus modificaciones.</para>
    
    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.1">
      <title>Procedimiento general de gestión de ramas de proveedor</title>

      <para>Gestionar ramas de vendedor generalmente funciona de
        esta manera. Primero crea un directorio en la raíz de
        su jerarquía (como por ejemplo <filename>/vendor</filename>)
        para almacenar las ramas de proveedor. Entonces importa
        el código de terceros en un subdirectorio de ese directorio
        principal. Luego copia ese subdirectorio en su rama
        principal de desarrollo (por ejemplo,
        <filename>/trunk</filename>) en un lugar apropiado.
        Siempre realiza cambios locales en la rama de desarrollo
        principal. Con cada nueva versión del código que está
        siguiendo, lo incluye en la rama de proveedor y fusiona
        los cambios en <filename>/trunk</filename>, resolviendo
        cualquier conflicto entre sus cambios locales y los
        cambios oficiales.</para>
      
      <para>Quizás un ejemplo ayude a aclarar este algoritmo.
        Usaremos un escenario donde su equipo de desarrollo
        está creando un programa calculador que enlaza contra
        una librería externa de aritmética de números complejos,
        libcomplex.  Comenzaremos con la creación inicial de
        la rama de proveedor, y la importación del primer hito
        de proveedor. Llamaremos al directorio de nuestra rama
        de proveedor <filename>libcomplex</filename>, y nuestros
        hitos de código irán en un subdirectorio de nuestra
        rama de proveedor llamado <filename>current</filename>.
        Y dado que <command>svn import</command> crea todos los
        directorios padre intermedios que necesita, en realidad
        podemos realizar ambos pasos con un único comando.</para>
      
      <screen>
$ svn import /path/to/libcomplex-1.0 \
             http://svn.example.com/repos/vendor/libcomplex/current \
             -m 'importing initial 1.0 vendor drop'
&hellip;
</screen>
    
      <para>Tenemos ahora la versión actual del código fuente de
        libcomplex en <filename>/vendor/libcomplex/current</filename>.
        Ahora, etiquetamos esa versión (vea <xref
        linkend="svn-ch-4-sect-6" />) y luego la copiamos en
        la rama principal de desarrollo.  Nuestra copia creará
        un nuevo directorio llamado <filename>libcomplex</filename>
        en nuestro directorio existente de proyecto
        <filename>calc</filename>. Es en esta versión copiada
        de los datos del proveedor que realizaremos nuestras
        personalizaciones.</para>
      
      <screen>
$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \
           http://svn.example.com/repos/vendor/libcomplex/1.0      \
           -m 'tagging libcomplex-1.0'
&hellip;
$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \
           http://svn.example.com/repos/calc/libcomplex        \
           -m 'bringing libcomplex-1.0 into the main branch'
&hellip;
</screen>

      <para>Ahora obtenemos una copia local de la rama principal
        de nuestro proyecto&mdash;que ahora incluye una copia
        del primer hito de proveedor&mdash;y comenzamos a
        personalizar el código de libcomplex. Antes de darnos
        cuenta, nuestra versión modificada de libcomplex está
        completamente integrada en nuestro programa calculador.
        <footnote>
          <para>¡Y por su puesto, completamente libre de fallos!</para>
        </footnote>
      </para>

      <para>Unas pocas semanas después, los desarrolladores de
        libcomplex lanzan una nueva versión de su librería&mdash;la
        versión 1.1&mdash;la cual contiene algunas características
        y funcionalidades que realmente deseamos. Nos gustaría
        actualizarnos a esta nueva versión, pero sin perder las
        personalizaciones que realizamos sobre la versión
        anterior.  Lo que esencialmente nos gustaría hacer, es
        reemplazar nuestra versión de línea base de libcomplex
        1.0 con una copia de libcomplex 1.1, y entonces reaplicar
        las modificaciones propias que anteriormente hicimos
        sobre la librería antes de la nueva versión. Pero en
        realidad nos acercaremos al problema desde otra dirección,
        aplicando los cambios realizados sobre libcomplex entre
        las versiones 1.0 y 1.1 sobre nuestra propia copia
        modificada.</para>
      
      <para>Para realizar esta actualización, obtenemos una copia
        local de nuestra rama de proveedor, y reemplazamos el
        código del directorio <filename>current</filename> con
        el nuevo código fuente de libcomplex 1.1. Literalmente
        copiamos nuevos ficheros sobre los existentes, quizás
        expandiendo el fichero comprimido del distribución de
        libcomplex 1.1 sobre nuestros ficheros y directorios.
        El objetivo aquí es que el directorio
        <filename>current</filename> solamente contenta el
        código de libcomplex 1.1, y asegurarnos que todo ese
        código fuente está bajo control de versiones. Oh, y
        queremos realizar esto con la menor perturbación posible
        sobre el historial del control de versiones.</para>

      <para>Tras reemplazar el código de la versión 1.0 con el de
        la 1.1, <command>svn status</command> mostrará los
        ficheros con modificaciones locales, junto con quizás
        algunos ficheros no versionados o ausentes. Si realizamos
        lo que debíamos realizar, los ficheros no versionados
        son aquellos ficheros nuevos introducidos en la versión
        1.1 de libcomplex&mdash;ejecutamos <command>svn
        add</command> sobre ellos para ponerlos bajo control
        de versiones. Los ficheros ausentes son ficheros que
        existían en la 1.0 pero no en la 1.1, y sobre éstos
        usamos <command>svn remove</command>.  Finalmente, una
        vez que nuestra copia local de <filename>current</filename>
        contiene únicamente el código de libcomplex 1.1, enviamos
        al repositorio los cambios realizados para que tenga
        este aspecto.</para>
      
      <para>Nuestra rama <filename>current</filename> ahora contiene
        el hito de proveedor.  Etiquetamos la nueva versión
        (del mismo modo que etiquetamos el anterior hito de
        proveedor como la versión 1.0), y entonces fusionamos
        las diferencias entre las etiquetas de la versión
        anterior y la actual en nuestra rama principal de
        desarrollo.</para>
      
      <screen>
$ cd working-copies/calc
$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \
            http://svn.example.com/repos/vendor/libcomplex/current  \
            libcomplex
&hellip; # resolve all the conflicts between their changes and our changes
$ svn commit -m 'merging libcomplex-1.1 into the main branch'
&hellip;
</screen>

      <para>En el caso de uso trivial, la nueva versión de nuestra
        herramienta de terceros sería, desde un punto de vista
        de ficheros y directorios, justo igual que nuestra versión
        anterior. Ninguno de los ficheros de código fuente de
        libcomplex habría sido borrado, renombrado o movido a
        una ubicación diferente&mdash;la nueva versión solamente
        tendría modificaciones textuales contra la anterior. En un
        mundo perfecto, nuestras modificaciones serían aplicadas
        limpiamente sobre la nueva versión de la librería,
        absolutamente sin complicaciones o conflictos.</para>
      
      <para>Pero las cosas no son siempre tan simples, y de hecho
        es bastante habitual que ficheros de código fuente sean
        desplazados entre versiones de un software. Esto complica
        el proceso de asegurarnos que nuestras modificaciones son
        todavía válidas para la nueva versión del código, y puede
        degenerar rápidamente en la situación donde tenemos que
        recrear manualmente nuestras personalizaciones para la
        nueva versión. Una vez Subversion conoce la historia de un
        fichero de código fuente determinado&mdash;incluyendo todas
        sus ubicaciones previas&mdash;el proceso de fusionar la
        nueva versión de la librería es bastante simple. Pero somos
        responsables de indicar a Subversion cómo ha cambiado la
        estructura de ficheros de un hito de proveedor a otro.</para>

    </sect2>

    <!-- TODO: Try to clarify some of the steps for svn_load_dirs.pl
         (Garrett sez they've been "glossed over".  Also, consider
         another section on bypassing svn_load_dirs.pl altogether and
         running with just svn merge, now that it ignores ancestry. -->

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.2">
      <title><command>svn_load_dirs.pl</command></title>

      <para>Los hitos de proveedor que conllevan algo más que
        algunos borrados, adiciones o movimientos de ficheros
        complican el proceso de actualizarse a cada versión
        sucesiva de los datos de terceros. Por lo que Subversion
        proporciona el script <command>svn_load_dirs.pl</command>
        para asistirle en este proceso. Este script automatiza los
        procesos de importado anteriormente mencionados en el proceso
        de gestión de la rama del proveedor para minimizar el número
        posible de errores. Todavía será responsable de usar los
        comandos de fusionado para fusionar las nuevas versiones de
        los datos de terceros en su rama de desarrollo principal,
        pero <command>svn_load_dirs.pl</command> puede ayudarle a
        llegar a esta fase más rápido y con facilidad.</para>

      <para>En resumen, <command>svn_load_dirs.pl</command> es una
        mejora a <command>svn import</command> que tiene ciertas
        características importantes:</para>

      <itemizedlist>
        <listitem>
          <para>Puede ser ejecutado en cualquier momento para
            transformar un directorio existente del repositorio
            para que sea una réplica de un directorio externo,
            realizando todas las operaciones de adición y borrado
            necesarias, y también opcionalmente haciendo algunas
            operaciones de renombrado.</para>
        </listitem>
        <listitem>
          <para>Se encarga de una serie de operaciones complicadas
            entre las cuales Subversion requiere como paso intermedio
            enviar cambios al repositorio&mdash; como antes de
            renombrar un fichero o directorio dos veces.</para>
        </listitem>
        <listitem>
          <para>Opcionalmente etiquetará el nuevo directorio
            importado.</para>
        </listitem>
        <listitem>
          <para>Opcionalmente añadirá propiedades arbitrarias a
            ficheros y directorios que coincidan con una expresión
            regular.</para>
        </listitem>
      </itemizedlist>

      <para><command>svn_load_dirs.pl</command> recibe tres
        parámetros obligatorios.  El primer parámetro es la URL
        al directorio base de Subversion en el que se realizará el
        trabajo. Este parámetro es seguido por la URL&mdash;relativa
        respecto al primer argumento&mdash;en la cual se importará el
        hito de proveedor actual. Finalmente, el tercer parámetro
        es el directorio local que desea importar. Usando
        nuestro ejemplo anterior, una ejecución típica de
        <command>svn_load_dirs.pl</command> podría ser:</para>

      <screen>
$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>Puede indicar que desearía que
        <command>svn_load_dirs.pl</command> etiquete el nuevo hito
        de proveedor pasando la línea de comando <option>-t</option>
        e indicando un nombre de etiqueta. Esta etiqueta es otra
        URL relativa al primer argumento pasado al programa.</para>

      <screen>
$ svn_load_dirs.pl -t libcomplex-1.1                              \
                   http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>Cuando ejecuta <command>svn_load_dirs.pl</command>,
        examina el contenido de su hito de proveedor
        <quote>actual</quote>, y lo compara con el hito de proveedor
        propuesto. En el caso trivial, no habrá ficheros que
        existan en una versión pero no en la otra, así que el script
        realizará la nueva importación sin incidentes. No obstante,
        si hay discrepancias en la estructura de ficheros entre las
        versiones, <command>svn_load_dirs.pl</command> le preguntará
        cómo desea resolver esas diferencias. Por ejemplo, tendrá
        la oportunidad de decirle al script que sabe que el fichero
        <filename>math.c</filename> en la versión 1.0 de libcomplex
        fue renombrado como <filename>arithmetic.c</filename> en
        libcomplex 1.1.  Cualquier discrepancia no explicada como
        renombrado será tratada como una adición o borrado
        normal.</para>

      <para>El script también acepta un fichero de configuración
        separado para ajustar propiedades sobre ficheros y
        directorios que coincidan con una expresión regular
        y que vayan a ser <emphasis>añadidos</emphasis> al
        repositorio. Este fichero de configuración se le indica
        a <command>svn_load_dirs.pl</command> usando la opción
        de línea de comando <option>-p</option>. Cada línea del
        fichero de configuración es un conjunto de dos o cuatro
        valores separados por espacios en blanco: una expresión
        regular estilo Perl que debe coincidir con una ruta,
        una palabra de control (ya sea <literal>break</literal>
        o <literal>cont</literal>), y opcionalmente, un nombre de
        propiedad y su valor.</para>

      <screen>
\.png$              break   svn:mime-type   image/png
\.jpe?g$            break   svn:mime-type   image/jpeg
\.m3u$              cont    svn:mime-type   audio/x-mpegurl
\.m3u$              break   svn:eol-style   LF
.*                  break   svn:eol-style   native
</screen>

      <para>Para cada ruta añadida, se aplicarán en orden los
        cambios de propiedades configurados para las rutas que
        coincidan con las expresiones regulares, a no ser que la
        especificación de control sea <literal>break</literal>
        (lo cual significa que no deben aplicarse más cambios
        de propiedades a esa ruta).  Si la especificación de
        control es <literal>cont</literal>&mdash;una abreviación
        de <literal>continue</literal>&mdash;entonces se seguirá
        buscando coincidencias con el patrón de la siguiente línea
        del fichero de configuración.</para>

      <para>Cualquier carácter de espaciado en la expresión regular,
        nombre de la propiedad, o valor de la propiedad deberá ser
        rodeado por caracteres de comillas simples o dobles. Puede
        escapar los caracteres de comillas que no son usados
        para envolver caracteres de espaciado precediéndolos
        con un carácter de contrabarra (<literal>\</literal>).
        Las contrabarras sólo escapan las comillas cuando se
        procesa el fichero de configuración, así que no proteja
        ningún otro carácter excepto lo necesario para la expresión
        regular.</para>

    </sect2>
  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
