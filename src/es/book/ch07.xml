<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- originated from English revision 10817 -->
<chapter id="svn-ch-7">
  <title>Tópicos avanzados</title>

  <simplesect id="svn-ch-7-sect-0">

    <para>Si ha estado leyendo este libro capítulo por capítulo,
      de principio a fin, debería haber adquirido suficiente
      conocimiento para usar el cliente de Subversion para
      realizar la mayoría de las operaciones comunes de control
      de versiones. Entiende cómo obtener una copia local de un
      repositorio Subversion. Se siente cómodo enviando y recibiendo
      cambios usando las funciones <command>svn commit</command>
      y <command>svn update</command>.  Probablemente hasta haya
      desarrollado un reflejo que le hace ejecutar el comando
      <command>svn status</command> de forma casi inconsciente.
      A efectos prácticos, está preparado para usar Subversion en
      un entorno típico.</para>

    <para>Pero el conjunto de características de Subversion no
      acaba en <quote>operaciones comunes de control de
      versiones</quote>.</para>

    <para>Este capítulo recalca algunas características de Subversion
      que no son usadas muy a menudo. En él, discutiremos el soporte
      de propiedades (o <quote>metadatos</quote>) de Subversion,
      y cómo modificar el comportamiento por defecto de Subversion
      alterando su área de configuración dedicada a parámetros de
      ejecución. Describiremos cómo puede usar definiciones externas
      para ordenar a Subversion que obtenga datos de múltiples
      repositorios. Cubriremos con detalle algunas herramientas
      adicionales, tanto del lado del cliente como del servidor,
      que son parte de la distribución de Subversion.</para>

    <para>Antes de leer este capítulo, debe estar familiarizado
      con las capacidades básicas de versionado de ficheros
      y directorios de Subversion. Si todavía no ha leído sobre
      éstas, o si necesita refrescar su memoria, recomendamos que
      vea <xref linkend="svn-ch-2" /> y <xref linkend="svn-ch-3"
      />. Una vez haya dominado lo básico y consumido este capítulo,
      ¡será un usuario avanzado de Subversion!
    </para>

  </simplesect>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 1:  RUNTIME CONFIGURATION AREA                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-1">
    <title>Área de configuración de parámetros de ejecución</title>
    
    <para>Subversion proporciona muchos comportamientos opcionales
      que pueden ser controlados por el usuario. Muchas de estas
      opciones son del tipo que el usuario querría aplicar a todas
      las operaciones de Subversion.  Así que en lugar de obligar a
      los usuarios a recordar parámetros de línea de comando para
      especificar estas opciones, y usarlos para todas y cada una
      de las operaciones que realicen, Subversion usa ficheros
      de configuración, segregados en un área de configuraciónde
      Subversion.</para>

    <para>El <firstterm>área de configuración</firstterm> de
      Subversion es una jerarquía de dos capas de nombres de opciones
      y sus respectivos valores. Normalmente, esto se reduce a
      un directorio especial que contiene <firstterm>ficheros
      de configuración</firstterm> (la primera capa), que son
      simplemente ficheros de texto en un formato INI estándar
      (con <quote>secciones</quote>, las cuales forman la segunda
      capa).  Estos ficheros pueden ser modificados fácilmente
      usando su editor de texto favorito (como Emacs o vi), y
      contienen directivas leídas por el cliente para determinar
      qué comportamiento opcional, de varios a elegir, prefiere
      el usuario.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.1">
      <title>Estructura del área de configuración</title>

      <para>La primera vez que el cliente de línea de comando
        <command>svn</command> es ejecutado, crea un área
        de configuración para el usuario. En sistemas
        tipo Unix, este área aparece como el directorio
        <filename>.subversion</filename> en el directorio home <!--
        TODO quizás deberíamos usar la etiqueta filename, dado
        que en inglés la palabra home vale como palabra y como
        término informático, pero no en español --> del usuario.
        En sistemas Win32, Subversion crea un directorio llamado
        <filename>Subversion</filename>, típicamente dentro del
        área <filename>Application Data</filename> del directorio
        de perfil del usuario (el cual, por cierto, suele ser un
        directorio oculto).  No obstante, en esta plataforma la
        localización exácta difiere de sistema a sistema, y es
        dicatada por el registro de Windows.
        <footnote>
          <para>La variable de entorno <literal>APPDATA</literal>
            apunta al área <filename>Application Data</filename>,
            así que siempre puede referirse a este directorio como
            <filename>%APPDATA%\Subversion</filename>.</para>
        </footnote>
        A lo largo del libro nos referiremos al área de
        configuración de cada usuario usando su nombre Unix,
        <filename>.subversion</filename>.</para>

      <para>Además del área de configuración de cada usuario,
        Subversion también reconoce la existencia de un área
        de configuración global de sistema.  Ésta le permite al
        administrador de sistema establecer valores por defecto para
        todos los usuarios en una máquina determinada. Tenga en
        cuenta que el área de configuración global de sistema por
        sí sola no dicta reglas obligatorias&mdash;los parámetros
        del área de configuración de cada usuario tienen prioridad
        a los globales, y los parámetros proporcionados en la
        línea de comando al programa <command>svn</command>
        tienen la palabra final sobre el comportamiento. En
        plataformas tipo Unix, el área de configuración
        global de sistema estará posiblemente en el directorio
        <filename>/etc/subversion</filename>; en máquinas Windows,
        se busca el directorio <filename>Subversion</filename>
        dentro de la localización común <filename>Application
        Data</filename> (de nuevo, especificada por el registro
        de Windows).  A diferencia del caso específico de cada
        usuario, el programa <command>svn</command> no intentan
        crear un área de configuración global de sistema.</para>

      <para>El área de configuración actualmente contiene tres
        ficheros&mdash;dos ficheros de configuración
        (<filename>config</filename> y <filename>servers</filename>),
        y un fichero <filename>README.txt</filename> que describe el
        formato INI.  En el momento de su creación, los ficheros
        contienen los valores por defecto para cada una de las
        opciones soportadas por Subversion, en su mayoría con
        comentarios y agrupadas con descripciones textuales
        que indican cómo los valores de cada opción afectan al
        comportamiento de Subversion. Para cambiar un comportamiento
        dado, sólo necesita cargar el fichero de configuración
        adecuado en su editor de texto, y modificar el valor de la
        opción deseada. Si en algún momento desea recuperar los
        valores de configuración por defecto, puede simplemente
        borrar (o renombrar) su directorio de configuración y
        entonces ejecutar algún comando <command>svn</command>
        inocuo, como <command>svn --version</command>.  Entonces se
        creará un nuevo directorio de configuración con el contenido
        por defecto.</para>

      <para>El área de configuración de cada usuario también contiene
        una cache de datos de autenticación. El directorio
        <filename>auth</filename> agrupa un conjunto de
        subdirectorios que contienen trozos de información guardada
        <!-- TODO revisar traducción de cached != guardada -->
        usada por los varios métodos de autenticación soportados
        por Subversion. Este directorio es creado de tal manera que
        sólo su usuario tiene permiso para leer su contenido.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.2">
      <title>La configuración y el registro de Windows</title>

      <para>Además del área de configuración habitual basada en
        ficheros INI, los clientes de Subversion ejecutados en
        plataformas Windows también pueden usar el registro de
        Windows para almacenar datos de configuración. Los nombres
        de las opciones y sus valores son iguales que en los
        ficheros INI. La jerarquía <quote>fichero/sección</quote>
        también se mantiene, aunque especificada de una manera
        ligeramente diferente&mdash;en este esquema, los ficheros y
        las secciones son simples niveles del árbol del registro de
        claves.</para><!-- TODO buscar en documentación en castellano
        u opciones de menu del editor de registro de Windows cómo se
        denomina a los nombres de las opciones: llaves o claves? -->

      <para>Subversion busca valores de configuración global de
        sistema bajo la clave
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>.
        Por ejemplo, la opción <literal>global-ignores</literal>,
        que pertenece a la sección <literal>miscellany</literal>
        del fichero <filename>config</filename>, se encontraría en
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Los valores de configuración de cada usuario debería poder
        encontrarlos en
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>

      <para>Las opciones de configuración almacenadas en el registro
        son procesadas <emphasis>antes</emphasis> que sus
        versiones en ficheros de texto, por lo que sus valores
        son sobreescritos por lo que contengan los ficheros de
        configuración. En otras palabras, en un sistema Windows, la
        prioridad de configuración sigue el siguiente orden:</para>
      
      <orderedlist>
        <listitem>
          <para>Opciones de línea de comando</para>
        </listitem>
        <listitem>
          <para>Ficheros INI de cada usuario</para>
        </listitem>
        <listitem>
          <para>Valores de registro de cada usuario</para>
        </listitem>
        <listitem>
          <para>Ficheros INI globales de sistema</para>
        </listitem>
        <listitem>
          <para>Valores de registro globales de sistema</para>
        </listitem>
      </orderedlist>

      <para>Además, el registro de Windows no soporta el concepto
        de que algo esté <quote>comentado</quote>. No obstante,
        Subversion ignorará cualquier opción cuyo nombre comience
        con el carácter almohadilla (<literal>#</literal>). Esto le
        permite comentar de forma efectiva una opción de Subversion
        sin tener que borrar la clave completa del registro,
        obviamente simplificando el proceso de recuperación de
        esta opción.</para>

      <para>El cliente de línea de comando <command>svn</command>
        nunca intenta modificar el registro de Windows, así que
        no intentará crear ahí ningun área de configuración por
        defecto. Puede crear las claves que necesita usando el
        programa <command>REGEDIT</command>. Alternativamente,
        puede crear un fichero <filename>.reg</filename>, y entonces
        hacer doble click sobre ese fichero desde una ventana de
        explorador, lo cual hará que los datos sean fusionados en
        su registro.</para>

      <example id="svn-ch-7-sect-1.2-ex-1">
        <title>Fichero ejemplo de registro (.reg).</title>

        <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-auth-creds"="no"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#*"
"#log-encoding"=""
"#use-commit-times"=""
"#template-root"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
</programlisting>
      </example>

      <para>El ejemplo anterior muestra el contenido de un fichero
        <filename>.reg</filename> que contiene algunas de las
        opciones de configuración más usadas y sus valores por
        defecto. Tenga en cuenta la presencia tanto de opciones
        globales de sistema (para opciones relacionadas con proxys)
        como opciones de cada usuario (programas de edición y
        almacenamiento de claves, entre otras). Fíjese también
        que todas las opciones están comentadas. Sólo tiene que
        eliminar el carácter almohadilla (<literal>#</literal>)
        del comienzo de cada nombre de opción, y poner los valores
        que desee.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-1.3">
      <title>Opciones de configuración</title>
      
      <para>En esta sección discutiremos las opciones específicas de
        parámetros de ejecución soportados actualmente por
        Subversion.</para>

      <sect3 id="svn-ch-7-sect-1.3.1">
        <title>Servers</title>

        <para>El fichero <filename>servers</filename> contiene
          opcione de configuración de Subversion relacionadas con
          las capas de red. Hay dos nombres de sección especiales
          en este fichero&mdash;<literal>groups</literal>
          y <literal>global</literal>.  La sección
          <literal>groups</literal> es esencialmente una tabla
          de referencias cruzadas. Las claves en esta sección son
          nombres de otras secciones en el fichero; sus valores son
          <firstterm>máscaras</firstterm>&mdash;palabras textuales
          que posiblemente contienen carácteres comodines&mdash;que
          son comparadas contra los nombres de la máquina a la que
          se envían peticiones Subversion.</para>

        <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&hellip;

[collabnet]
&hellip;
</programlisting>

        <para>Cuando Subversion es usado en una red, intenta
          encontrar una coincidencia entre el nombre del servidor
          al que intenta llegar con un nombre de grupo de la
          sección <literal>groups</literal>. Si se encuentra tal
          coincidencia, Subversion busca entonces una sección en el
          fichero <filename>servers</filename> cuyo nombre coincida
          con el nombre del grupo.  De esta sección obtendrá la
          configuración de red que será usada.</para>

        <para>La sección <literal>global</literal> contiene la
          configuración que será usada para todos los servidores
          que no encajen con ninguna de las máscaras de la
          sección <literal>groups</literal>. Las opciones
          disponibles en esta sección son exáctamente las mismas
          que aquellas válidas para otras secciones de servidor en
          el fichero (excepto, por supuesto, la sección especial
          <literal>groups</literal>), y son las siguientes:</para>

        <variablelist>
          <varlistentry>
            <term><literal>http-proxy-host</literal></term>
            <listitem>
              <para>Especifica el nombre del ordenador proxy por el
                cual deben pasar sus peticiones Subversion basadas en
                HTTP. Por defecto es un valor vacío, lo que significa
                que Subversion no intentará enrutar peticiones HTTP
                por un ordenador proxy, y que en su lugar intentará
                contactar la máquina destino directamente.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-port</literal></term>
            <listitem>
              <para>Especifica el número de puerto del ordenador
                proxy que debe usar. Por defecto es un valor
                vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-username</literal></term>
            <listitem>
              <para>Especifica el nombre de usuario que se le
                facilitará al proxy. Por defecto es un valor
                vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-proxy-password</literal></term>
            <listitem>
              <para>Especifica la palabra clave que se le facilitará
                al proxy. Por defecto es un valor vacío.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-timeout</literal></term>
            <listitem>
              <para>Especifica la cantidad de tiempo, en segundos,
                que se espera las respuestas del servidor. Si
                experimenta problemas con una conexión de red lenta
                que provoca que las operaciones de Subversion fallen
                por tiempo de espera agotado, debería incrementar
                el valor de esta opción.  El valor por defecto es
                <literal>0</literal>, que indica a la librería HTTP
                subyacente, Neon, que use su valor tiempo de espera
                por defecto.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>http-compression</literal></term>
            <listitem>
              <para>Especifica si Subversion debería o nó intentar
                comprimir las peticiones de red realizadas a
                servidores con soporte DAV. El valor por defecto es
                <literal>yes</literal> (aunque la compresión sólo
                ocurrirá si esta característica fue compilada en la
                capa de red). Cambie esto a <literal>no</literal>
                para desactivar la compresión, por ejemplo para
                depurar transmisiones por red.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>neon-debug-mask</literal></term>
            <listitem>
              <para>Esto es una máscara de bits que la librería HTTP
                subyacente, Neon, usa para determinar el tipo
                de información de depuración que debe mostrar.
                El valor por defecto es <literal>0</literal>, el
                cual elimina cualquier información de depuración.
                Para más información sobre cómo Subversion usa Neon,
                vea <xref linkend="svn-ch-8" />.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-authority-files</literal></term>
            <listitem>
              <para>Esto es una lista delimitada con punto y coma
                de rutas a ficheros que contienen certificados de
                las autoridades de certificación (o CAs) que son
                aceptadas por el cliente de Subversion cuando se
                accede a un repositorio sobre HTTPS.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-trust-default-ca</literal></term>
            <listitem>
              <para>Modifique esta variable a <literal>yes</literal>
                si quiere que Subversion confíe de forma automática
                el conjunto de CAs por defecto que se distribuyen
                con OpenSSL.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-file</literal></term>
            <listitem>
              <para>Si una máquina (o grupo de máquinas) requieren
                un certificado de cliente SSL, normalmente se le
                preguntará por la ruta a su certificado. Ajustando
                esta variable a esta misma ruta, Subversion será
                capaz de encontrar la certificación de su cliente
                automáticamente sin tener que preguntarle. No hay
                un lugar estándar para almacenar certificados en
                disco; Subversion los obtendrá de cualquier ruta
                que especifique.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>ssl-client-cert-password</literal></term>
            <listitem>
              <para>Si el fichero de su certificado de cliente
                SSL está cifrado con una frase, Subversion le
                preguntará por ésta cada vez que el certificado vaya
                a ser usado. Si considera esto un inconveniente (y no
                le importa almacenar la palabra clave en el fichero
                <filename>servers</filename>), entonces modifique
                esta variable para que contenta la clave. Ya no se
                le preguntará más.</para>
            </listitem>
          </varlistentry>
        </variablelist>

      </sect3>
      <sect3 id="svn-ch-7-sect-1.3.2">
        <title>Config</title>

        <para>El fichero <filename>config</filename> contiene el
          resto de los parámetros de ejecución actualmente
          disponibles con Subversion, aquellos no relacionados con
          la conexión a red. Sólo hay un par de opciones en uso por
          ahora, pero de nuevo están agrupadas en secciones pues se
          esperan adiciones futuras.</para>

        <para>La sección <literal>auth</literal> contiene parámetros
          relacionados con autenticación y autorización de Subversion
          contra un repositorio.  Éstos son:</para>

        <variablelist>
          <varlistentry>
            <term><literal>store-auth-creds</literal></term>
            <listitem>
              <para>Esto indica a Subversion si desea mantener
                una caché o nó de las credenciales de autenticación
                proporcionadas por el usuario en respuesta a demandas
                de autenticación por parte del servidor. El valor
                por defecto es <literal>yes</literal>.  Cambie esto
                a <literal>no</literal> para desactivar la caché
                de credenciales en disco. Puede reemplazar
                esta opción en invocaciones individuales
                del comando <command>svn</command> usando
                la opción <option>--no-auth-cache</option>
                como parámetro (para aquellos subcomandos que
                la soportan). Para más información, vea <xref
                linkend="svn-ch-6-sect-2.2"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>La sección <literal>helpers</literal> controla qué
          aplicaciones externas son usadas por Subversion para
          realizar ciertas tareas. Las opciones válidas en esta
          sección son:</para>

        <variablelist>
          <varlistentry>
            <term><literal>editor-cmd</literal></term>
            <listitem>
              <para>Especifica el programa que Subversion usará para
                solicitar al usuario el mensaje del informe de
                cambios cuando envía cambios al repositorio, como
                por ejemplo al usar <command>svn commit</command>
                sin las opciónes <option>--message</option>
                (<option>-m</option>) o <option>--file</option>
                (<option>-F</option>).  Este programa
                también se usa con el comando <command>svn
                propedit</command>&mdash;un fichero temporal
                es rellenado con los valores actuales de la
                propiedad que el usuario desea modificar, y los
                cambios toman forma en el programa editor (vea
                <xref linkend="svn-ch-7-sect-2" />).  El valor por
                defecto de esta opción es vacío. Si la opción no
                está activada, Subversion comprobará las variables
                de entorno <literal>SVN_EDITOR</literal>,
                <literal>VISUAL</literal>, y
                <literal>EDITOR</literal> (en ese orden) para
                encontrar un comando de edición.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff-cmd</literal></term>
            <listitem>
              <para>Especifica una ruta absoluta a un programa de
                diferenciación, usado cuando Subversion genera salida
                <quote>diff</quote> <!-- TODO esto debería cambiar,
                pues no existe el término diff en español. Reescribir
                de alguna manera --> (como cuando usa el comando
                <command>svn diff</command>).  Por defecto
                Subversion usa una librería de diferenciación
                interna&mdash;activando esta opción obligará realizar
                esta tarea usando un programa externo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-cmd</literal></term>
            <listitem>
              <para>Especifica una ruta absoluta a un programa de
                diferenciación a tres bandas. Subversion usa este
                programa para fusionar cambios realizados por el
                usuario con aquellos recividos del repositorio.  Por
                defecto Subversion usa una librería de diferenciación
                interna&mdash;activando esta opción obligará realizar
                esta tarea usando un programa externo.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>diff3-has-program-arg</literal></term>
            <listitem>
              <para>Este parámetro debe ajustarse a
                <literal>true</literal> si el programa especificado
                por la opción <literal>diff3-cmd</literal>
                acepta el parámetro de línea de comando
                <option>--diff-program</option>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>La sección <literal>tunnels</literal> le permite
          definir nuevos esquemas de túneles a usar con
          <command>svnserve</command> y conexiones cliente
          <literal>svn://</literal>.  Para más detalles, vea <xref
          linkend="svn-ch-6-sect-3.3"/>.</para>

        <para>La sección <literal>miscellany</literal> es donde
          acaba todo lo que no encaja en otra parte.
          <footnote>
            <para>¿Le gustan las sobras?</para>
          </footnote>
          En esta sección puede encontrar:</para>

        <variablelist>
          <varlistentry>
            <term><literal>global-ignores</literal></term>
            <listitem>
              <para>Cuando ejecuta el comando <command>svn
                status</command>, Subversion muestra un listado
                de ficheros y directorios no versionados
                junto con los versionados, anotándolos con
                el carácter <literal>?</literal> (vea <xref
                linkend="svn-ch-3-sect-4.3.1" />).  A veces puede
                ser molesto ver elementos no versionados o no
                interesantes&mdash;por ejemplo, ficheros objeto
                resultado de la compilación de un programa&mdash; en
                pantalla. La opción <literal>global-ignores</literal>
                es una lista de máscaras delimitadas por
                espacio que describen los nombres de ficheros y
                directorios que Subversion no debe mostrar a no
                ser que estén versionados. El valor por defecto
                es <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#*</literal>.</para>

              <para>Puede redefinir esta opción en invocaciones
                individuales del comando <command>svn
                status</command> usando la opción de línea de comando
                <option>--no-ignore</option>.  Para más información
                sobre el control detallado de elementos ignorados,
                vea <xref linkend="svn-ch-7-sect-2.3.3" />.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><literal>enable-auto-props</literal></term>
            <listitem>
              <para>Esto indica a Subversion que añada propiedades
                automáticamente en ficheros nuevos o importados. El
                valor por defecto es <literal>no</literal>, así que
                cambie esto a <literal>yes</literal> para activar
                auto propiedades. <!-- NT: aunque en el original
                viene como auto-props, posiblemente la capitalización
                de la palabra indica el uso de compresión de las
                palabras en lugar de la mención del valor literal
                "auto-props"--></para>

              <para>La sección <literal>auto-props</literal> controla
                la capacidad del cliente de Subversion de poner
                automaticamente propiedades en ficheros que fueron
                añadidos o importados. Contiene un número de
                parejas clave-valor en el formato <literal>PATRÓN =
                NOMBREPROPIEDAD=VALORPROPIEDAD</literal> donde
                <literal>PATRÓN</literal> es una máscara de
                fichero que encaja con un grupo de ficheros
                y el resto de la línea es la propiedad y su
                valor. Múltiples coincidencias en un fichero
                resultarán en múltiples propiedades para ese
                fichero; no obstante, no hay garantía alguna de
                que las auto propiedades sean aplicadas en el
                órden en el cual fueron listadas en el fichero de
                configuración, así que no puede tener una regla
                que <quote>redefina</quote> otra.  Puede encontrar
                varios ejemplos del uso de auto propiedades en el
                fichero <filename>config</filename>.  Por último, no
                olvide cambiar <literal>enable-auto-props</literal>
                a <literal>yes</literal> si quiere activar las auto
                propiedades.</para>
            </listitem>            
          </varlistentry>

          <varlistentry>
            <term><literal>log-encoding</literal></term>
            <listitem>         
              <para>Esta variable ajusta el formato por defecto de
                codificación de carácteres de los informes
                de cambios. Es una versión permanente de la
                opción <option>--encoding</option> (vea <xref
                linkend="svn-ch-9-sect-1.1"/>.)  El repositorio
                Subversion almacena los mensajes de los informes de
                cambios en UTF8, y asume que su mensaje es escrito
                usando las locales nativas <!-- TODO locale? -->de
                su sistema operativo. Debería especificar una
                codificación diferente si sus mensajes son escritos
                con otra codificación.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><literal>use-commit-times</literal></term>
            <listitem>         
              <para>Normalmente los ficheros de su copia local de
                trabajo tienen marcas de tiempo que reflejan el
                último momento en que fueron tocados por cualquier
                proceso, ya sea su propio editor o uno de los
                subcomandos <command>svn</command>.  Esto es
                normalmente conveniente para gente que desarrolla
                software, porque los sistemas de compilación a menudo
                comprueban las marcas de tiempo para decidir qué
                ficheros necesitan ser recompilados.</para>

              <para>En otras situaciones, no obstante, es conveniente
                tener en su copia local de trabajo ficheros
                con marcas de tiempo que reflejan el último
                momento en el que cambiaron en el repositorio
                El comando <command>svn export</command>
                siempre pone estas <quote>marcas temporales de
                última modificación</quote> en los árboles que
                produce. Cambiando esta variable de configuración
                a <literal>yes</literal>, los comandos <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, y <command>svn
                revert</command> también ajustarán la marca temporal
                a la última modificación en el repositorio en los
                ficheros que manejen.</para>
            </listitem>
          </varlistentry>
          
	  <!-- ###TODO add description of other options shown in example
          registry file, e.g., log-encoding, etc. -->
        </variablelist>

      </sect3>

    </sect2>
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 2:  PROPERTIES                                      *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-2">
    <title>Propiedades</title>

    <para>Ya hemos cubierto en detalle cómo Subversion almacena y
      recupera varias versiones de ficheros y directorios en sus
      repositorios. Capítulos enteros han sido dedicados a este
      trozo fundamental de funcionalidad proporcionada por la
      herramienta. Y si el soporte de versionado acabase aquí,
      Subversion seguiría estando completo desde una perspectiva
      de control de versiones. Pero no acaba aquí.</para>

    <para>Además de versionar sus directorios y ficheros, Subversion
      proporciona una interfaz para añadir, modificar y eliminar
      meta datos versionados en cada uno de sus directorios y
      ficheros versionados. Nos referimos a estos meta datos
      como <firstterm>propiedades</firstterm>, y puede pensar en
      ellas como tablas de dos columnas que relacionan nombres de
      propiedades con valores arbitrarios anexos a cada elemento en
      su copia de trabajo local. En general, los nombres y valores
      de las propiedades pueden ser cualquier cosa que usted desée,
      con la restricción de que los nombres sean texto legible
      por humanos. Y la mejor parte de estas propiedades es que
      también son versionadas, igual que el contenido textual de
      sus ficheros. Puede modificar, enviar cambios al repositorio
      y revertir cambios sobre propiedades tan fácilmente como
      realiza cambios textuales. Y recibirá las modificaciones de
      propiedades que otras personas realicen cuando actualice su
      copia local de trabajo.</para>

    <sidebar>
      <title>Otras propiedades en Subversion</title>

      <para>Las propiedades también aparecen en otros sitios en
        Subversion.  Igual que los ficheros y directorios pueden
        tener nombres y valores de propiedades arbitrarios
        anexos, cada revisión como un todo puede tener
        propiedades arbitrarias anexas. Se aplican las mismas
        restricciones&mdash;nombres en formato texto legibles por
        humanos y cualquier cosa como valor binario&mdash;con
        la excepción de que las propiedades de revisión no son
        versionadas. Vea <xref linkend="svn-ch-5-sect-1.2" /> para
        más información sobre estas propiedades sin versionar.</para>
    </sidebar>

    <para>En esta sección, examinaremos la utilidad&mdash;tanto
      para usuarios de Subversion como para sí mismo&mdash;del
      soporte de propiedades.  Aprenderá los subcomandos
      <command>svn</command> relacionados con propiedades, y cómo
      las modificaciones de propiedades pueden afectar a su flujo de
      trabajo normal con Subversion.  Esperamos convencerle de que
      las propiedades de Subversion pueden mejorar su satisfacción
      con el control de versiones.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.1">
      <title>¿Por qué propiedades?</title>

      <para>Las propiedades pueden ser adiciones muy útiles a copia
        de trabajo local.  De hecho, Subversion usa para sí
        mismo propiedades para almacenar información especial,
        y como modo para indicar que puede ser necesario cierto
        procesamiento especial. Igualmente, puede usar propiedades
        para sus propósitos. Por supuesto, cualquier cosa que haga
        con propiedades puede ser realizada también usando ficheros
        versionados regulares, pero considere el siguiente ejemplo
        de uso de propiedades de Subversion.</para>

      <para>Digamos que desea diseñar una página web que almacene
        muchas fotos digitales, y las muestra con descripciones
        y una marca de fecha. Ahora, su conjunto de fotos cambia
        constántemente, así que le gustaría tener la mayor parte
        posible de la web automatizada. Estas fotos pueden ser
        bastante grandes, así que como es habitual en páginas
        web de esta naturaleza, desea proporcionar miniaturas
        de las imágenes a los visitates de su web. Puede
        hacer esto con ficheros tradicionales. Es decir,
        puede tener su <filename>imagen123.jpg</filename>
        y <filename>imagen123-miniatura.jpg</filename>
        uno al lado del otro en un directorio. O si
        prefiere tener los mismos nombres, puede tener las
        miniaturas en un directorio diferente, como like
        <filename>miniaturas/imagen123.jpg</filename>.  También
        puede almacenar sus descripciones y marcas de fechas del
        mismo modo, de nuevo separados del fichero original de
        la imagen. Pronto, su árbol de ficheros será un desorden,
        y crecerá en múltiplos con cada nueva foto que añada a la
        página web.</para>

      <para>Ahora considere la misma situación usando las propiedades
        de ficheros de Subversion. Imagine tener un único fichero,
        <filename>imagen123.jpg</filename>, y varias propiedades
        anexas llamadas <literal>descripcion</literal>,
        <literal>marcadetiempo</literal>, e incluso
        <literal>miniatura</literal>. Ahora el directorio de su
        copia local de trabajo parece más fácil de gestionar&mdash;de
        hecho, parece que no hay más que ficheros de imágenes. Pero
        sus scripts automáticos están preparados. Saben que
        pueden usar <command>svn</command> (o incluso mejor,
        pueden usar un lenguaje de enlace con Subverion&mdash;
        vea <xref linkend="svn-ch-8-sect-2.3" />) para extraer la
        información adicional que su página web necesita mostrar
        sin tener que leer un fichero índice o jugar manipulando
        las rutas de ficheros.</para>

      <para>Cómo usar las propiedades de Subversion (si decide
        usarlas) está en sus manos. Tal y como hemos mencionados,
        Subversion usa las propiedades para sus propios fines,
        que discutiremos más tarde en este capítulo.  Pero antes,
        veamos cómo manipular opciones usando el programa
        <command>svn</command>.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.2">
      <title>Manipulando propiedades</title>

      <para>El comando <command>svn</command> tiene la libertad de
        añadir o modificar propiedades de ficheros y directorios
        de varias maneras.  Para propiedades con valores cortos,
        legibles por humanos, quizás la forma más simple de
        añadir una nueva propiedad es especificar el nombre de
        la propiedad y su valor en la línea de comando con el
        subcomando <command>propset</command>.</para>

      <screen>
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</screen>
       
      <para>Pero hemos estado <!-- TODO touting?--> alabando la
        flexibilidad que Subversion ofrece para los valores de sus
        propiedades. Y si está planeando tener un valor de propiedad
        textual multilínea, o incluso binario, probablemente
        no quiera proporcionarlo en la línea de comando. Así
        que el subcomando <command>propset</command> acepta el
        parámetro <option>--file</option> (<option>-F</option>)
        para especificar el nombre de un fichero que contiene el
        nuevo valor de una propiedad.</para>

      <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</screen>

      <para>Además del comando <command>propset</command>,
        el programa <command>svn</command> proporciona el comando
        <command>propedit</command>.  Este comando usa el programa de
        edición configurado (vea <xref linkend="svn-ch-7-sect-1.3.2"
        />) para añadir o modificar propiedades.  Cuando ejecuta el
        comando, <command>svn</command> invoca su programa de edición
        sobre un fichero temporal que contiene el valor actual de la
        propiedad (o un fichero vacío, si está añadiendo una nueva
        propiedad). Entonces, simplemente modifique el valor en su
        programa de edición hasta que represente el nuevo valor
        que desea almacenar para la propiedad, guarde el fichero
        temporal, y salga del programa de edición. Si Subversion
        detecta que realmente ha modificado el fichero, acceptará
        esta versión como nuevo valor de la propiedad. Si sale de
        su programa de edición sin realizar cambios, la propiedad
        no será modificada.</para>

      <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</screen>

      <para>Debemos advertirle de que al igual que con otros
        subcomandos de <command>svn</command>, aquellos relacionados
        con propiedades pueden actuar sobre varias rutas a
        la vez. Esto le permite modificar propiedades sobre un
        conjunto de ficheros con un único comando. Por ejemplo,
        podríamos haber hecho:</para>

      <screen>
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
&hellip;
$
</screen>

      <para>Todas estas adiciones y ediciones de propiedades no
        son realmente muy útiles si no puede recuperar
        fácilmente el valor almacenado en la propiedad. Así
        que el programa<command>svn</command> proporciona
        dos subcomandos para mostrar los nombres y valores de
        propiedades anexas a ficheros y directorios. El comando
        <command>svn proplist</command> mostrará un listado de los
        nombres de las propiedades que existen en una ruta. Una
        vez conozca el nombre de las propiedades de un nodo, puede
        solicitar sus valores individualmente usando <command>svn
        propget</command>. Este comando, dada una ruta (o grupo de
        rutas) y un nombre de propiedad, imprimirá el valor de la
        propiedad al flujo estándar de salida.</para>

      <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</screen>

      <para>Incluso existe una variación del comando
        <command>proplist</command> que mostrará tanto
        el nombre de todas las propiedad como su valor
        command. Simplemente use la opción <option>--verbose</option>
        (<option>-v</option>).</para>

      <screen>
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&hellip;
</screen>

      <para>El último subcomando que trata con propiedades es
        <command>propdel</command>. Dado que Subversion le
        permite almacenar propiedades con valores vacíos, no puede
        eliminar una propiedad usando <command>propedit</command>
        o <command>propset</command>.  Por ejemplo, este comando
        <emphasis>no</emphasis> le proporcionará el efecto
        deseado:</para>

      <screen>
$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</screen>

      <para>Debe usar el comando <command>propdel</command>
        para eliminar las propiedades por completo. La sintaxis es
        similar a la de otros comandos de propiedades:</para>

      <screen>
$ svn propdel license calc/button.c
property 'license' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</screen>

      <para>Ahora que está familiarizado con todos los subcomandos de
        <command>svn</command> relacionados con propiedades,
        veamos cómo las modificaciones de propiedades afectan
        al flujo de trabajo habitual de Subversion.  Tal y como
        mencionamos anteriormente, las propiedades de ficheros y
        directorios están versionadas, igual que los contenidos de
        los ficheros. Como resultado, Subversion proporciona las
        mismas oportunidades de fusionar&mdash;ya sea de manera
        limpia o resolviendo conflictos&mdash;las modificaciones
        sobre propiedades de otra persona con las suyas.</para>

      <sidebar>
        <title>Modificando propiedades de revisiones</title>

        <para>¿Se acuerda de esas propiedades de revisiones sin
          versionar? Puede modificarlas también con el programa
          <command>svn</command>.  Simplemente añada el parámetro
          <option>--revprop</option> a la línea de comando,
          y especifique la revisión de la propiedad que desea
          modificar. Dado que las revisiones son globales, no
          necesita especificar una ruta en este caso mientras esté
          posicionado en la copia local de trabajo del repositorio
          cuya propiedad de revisión desea modificar. Por ejemplo,
          quizás desee reemplazar el mensaje del informe de cambios
          de una revisión existente.
          <footnote>
            <para>Corregir faltas ortograficas, errores gramaticales,
              y <quote>simplemente-cosas-incorrectas</quote>
              en el mensaje del informe de cambios es quizás
              el caso de uso más habitual para la opción
              <option>--revprop</option>.</para>
          </footnote></para>

        <screen>
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</screen>

        <para>Tenga en cuenta que la capacidad para modificar
          estas propiedades no versionadas debe ser explícitamente
          añadida al repositorio por el administrador (vea
          <xref linkend="svn-ch-5-sect-2.1" />).  Dado que las
          propiedades no son versionadas, corre el riesgo de perder
          información si no es cuidadoso con sus modificaciones.
          El administrador del repositorio puede configurar métodos
          para evitar estas pérdidas, y por defecto, la modificación
          de propiedades no versionadas está desactivada.</para>

      </sidebar>

      <para>Al igual que con los contenidos de sus ficheros,
        sus cambios sobre propiedades son modificaciones locales,
        únicamente convertidas en permanentes cuando las envía al
        repositorio con <command>svn commit</command>.  También puede
        deshacer fácilmente sus cambios&mdash;el comando <command>svn
        revert</command> recuperará sus ficheros y directorios a
        su estado no modificado, contenido, propiedades, y todo lo
        demás. Además, puede recibir información interesante sobre
        el estado de las propiedades de sus ficheros y directorios
        usando los comandos <command>svn status</command> y
        <command>svn diff</command>.</para>

      <screen>
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2003 Red-Bean Software

$
</screen>

      <para>Fíjese cómo el subcomando <command>status</command>
        muestra una <literal>M</literal> en la segunda columna
        en lugar de la primera. Esto es porque hemos modificado
        propiedades de <filename>calc/button.c</filename>, pero no
        hemos modificado su contenido. De haber cambiado ambos,
        habríamos visto también una <literal>M</literal> en la
        primera columna (vea <xref linkend="svn-ch-3-sect-4.3.1"
        />).</para>

      <sidebar>
        <title>Conflictos de propiedades</title>

        <para>Al igual que con el contenido de ficheros, las
          modificaciones locales de propiedades pueden entrar
          en conflicto con cambios enviados al servidor por otra
          persona. Si actualiza el directorio de su copia local de
          trabajo y recibe cambios de propiedades sobre un recurso
          versionado que chocan con los suyos, Subversion indicará
          que el recurso está en estado de conflicto.</para>
 
        <screen>
% svn update calc
M  calc/Makefile.in
 C calc/button.c
Updated to revision 143.
$ 
</screen>
         
        <para>Subversion también creará, en el mismo directorio
          que el recurso en conflicto, un fichero con la extensión
          <filename>.prej</filename> que contiene los detalles del
          conflicto.  Debería examinar el contenido de este fichero
          para poder decidir cómo resolver el conflicto. Hasta que
          el conflicto sea resuelto, verá una <literal>C</literal>
          en la segunda columna de la salida del comando <command>svn
          status</command> para ese recurso, y fallará cualquier
          intento de enviar sus modificaciones locales al
          servidor.</para>

        <screen>
$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
prop 'linecount': user set to '1256', but update set to '1301'.
$
</screen>
 
        <para>Para resolver conflictos de propiedades, simplemente
          asegúrese de que las propiedades en conclicto contienen
          los valores que deberían, y entonces use el comando
          <command>svn resolved</command> para indicar a Subversion
          que ha solucionado manualmente el problema.</para>

      </sidebar>

      <para>Quizás también se haya dado cuenta del modo no estándar
        usado por Subversion para mostrar las diferencias
        entre propiedades. Todavía puede ejecutar <command>svn
        diff</command> y redirigir la salida para crear un fichero
        parche usable. El programa <command>patch</command> ignorará
        los parches de propiedades&mdash;como regla general,
        ignora cualquier ruido que no es capaz de entender. Esto
        significa desafortunadamente que para aplicar completamente
        un parche generado por <command>svn diff</command>,
        cualquier modificación de propiedades deberá ser aplicada
        a mano.</para>

      <para>Como puede ver, la presencia de modificaciones de
        propiedades no tiene efectos significativos en el flujo
        de trabajo típico con Subversion.  Sus patrones generales
        de actualizar su copia local, verificar el estado de
        sus ficheros y directorios, obtener informes sobre las
        modificaciones realizadas, y enviar éstas al repositorio
        son completamente inmunes a la presencia o ausencia de
        propiedades. El programa <command>svn</command> tiene algunos
        subcomandos adicionales para efectuar cambios de propiedades,
        pero esto es la única asimetría notable.</para>

    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.3">
      
      <title>Propiedades especiales</title>

      <para>Subversion no tiene reglas particulares sobre
        propiedades&mdash;puede usarlas para cualquier
        fin. Subversion sólo le pide que no use nombres
        de propiedades que comiencen con el prefijo
        <literal>svn:</literal>.  Ese es el espacio de nombres que
        reserva para uso propio. De hecho, Subversion define ciertas
        propiedades que tienen efectos mágicos sobre ficheros y
        directorios. En esta sección, desvelaremos el misterio,
        y describiremos cómo estas propiedades especiales pueden
        hacerle la vida un poco más fácil.</para>
      
      <sect3 id="svn-ch-7-sect-2.3.1">
        <title><literal>svn:executable</literal></title>
 
        <para>La propiedad <literal>svn:executable</literal> se
          usa para controlar de un modo semi automático el bit
          de permiso de ejecución de un fichero versionado.
          Esta propiedad no tiene valor definido&mdash;su mera
          presencia indica el deseo de que el bit de permiso de
          ejecución se mantenga activado por Subversion. Eliminar
          esta propiedad devolverá el control total del bit de
          ejecución al sistema operativo.</para>

        <para>En muchos sistemas operativos, la capacidad de ejecutar
          un fichero o comando es governada por la presencia de un
          bit de permiso de ejecución.  Éste suele estar desactivado
          por defecto, y debe ser activado de forma explícita
          por el usuario para cada fichero que lo requiera. En
          una copia de trabajo local, se crean nuevos ficheros
          constantemente a medida que nuevas versiones de ficheros
          existentes son recibidas durante una actualización. Esto
          significa que quizás active el bit de ejecución en un
          fichero, entonces actualice su copia de trabajo, y si ese
          fichero fue modificado como parte de la actualización,
          su bit de ejecución puede haber sido desactivado<!--
          TODO Frase muy larga, mezcla de tiempos en los
          verbos?-->. Así que Subversion proporciona la propiedad
          <literal>svn:executable</literal> para mantener el bit de
          ejecución activado.</para>

        <para>Esta propiedad no tiene efecto en sistemas de ficheros
          que no tienen concepto de bits de permiso de ejecución,
          como FAT32 y NTFS.
          <footnote>
            <para>El sistema de ficheros de Windows usa extensiones
              de ficheros (como <literal>.EXE</literal>,
              <literal>.BAT</literal>, y <literal>.COM</literal>)
              para indicar que un fichero es ejecutable.</para>
          </footnote>
          Además, aunque no tenga valores definidos, Subversion
          forzará el valor a <literal>*</literal> cuando ajuste
          esta propiedad.  Finalmente, esta propiedad es únicamente
          válida en ficheros, no en directorios.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.2">
        <title><literal>svn:mime-type</literal></title>
        
        <para>La propiedad <literal>svn:mime-type</literal> tiene
          varios propósitos en Subversion. Aparte de ser el
          lugar genérico para almacenar la clasificación
          de extensión polivalente de correo por Internet
          (MIME<footnote><para>N.T.: <quote>Multipurpose Internet
          Mail Extension</quote> en inglés.</para></footnote>), el
          valor de esta propiedad determina algunas características
          del comportamiento de Subversion.</para>

        <para>Por ejemplo, si la propiedad
          <literal>svn:mime-type</literal> de un fichero tiene un
          valor de tipo MIME no textual (generalmente, algo que no
          comienza con <literal>text/</literal>, aunque hay algunas
          excepciones), Subversion asumirá que el fichero contiene
          datos binarios&mdash;es decir, no legibles por un ser
          humano. Uno de los beneficios habitualmente proporcionado
          por Subversion es el fusionado contextual, basado en
          líneas, de los cambios recibidos del servidor durante una
          actualización de su fichero de la copia local. Pero para
          los ficheros que se considera contienen datos binarios,
          no existe el concepto de una <quote>línea</quote>. Así
          que para esos ficheros, Subversion no intenta realizar un
          fusionado contextual durante la actualización. En su lugar,
          siempre que tenga un fichero binario en su copia local
          que esté siendo actualizado, su fichero es renombrado
          con la extensión <filename>.orig</filename>, y entonces
          Subversion almacena un nuevo fichero que contiene los
          cambios recibidos durante la actualización, pero sin sus
          modificaciones locales, con el nombre de fichero original.
          Este comportamiento es realmente una protección para el
          usuario contra intentos fallidos de realizar fusionados
          contextuales sobre ficheros que simplemente no pueden ser
          fusionados contextualmente.</para>

        <para>Además, si la propiedad
          <literal>svn:mime-type</literal> está ajustada, entonces el
          módulo Subversion de Apache usará su valor para rellenar
          la cabecera HTTP <literal>Content-type:</literal> cuando
          responda peticiones GET.  Esto proporciona una pista vital
          sobre cómo mostrar un fichero cuando examina su repositorio
          con un navegador web.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.3">
        <title><literal>svn:ignore</literal></title>

        <para>La propiedad <literal>svn:ignore</literal> contiene
          una lista de patrones de ficheros que serán excluidos por
          ciertas operaciones de Subversion. Quizás la propiedad
          especial usada con mayor frecuencia, funciona junto con el
          parámetro de ejecución <literal>global-ignores</literal>
          (vea <xref linkend="svn-ch-7-sect-1.3.2" />) para filtrar
          ficheros y directorios no versionados con los comandos
          <command>svn status</command>, <command>svn add</command>,
          y <command>svn import</command>.</para>

        <para>La razón tras la propiedad
          <literal>svn:ignore</literal> es fácil de explicar.
          Subversion no asume que todo fichero o subdirectorio de una
          copia de trabajo local está destinado a ser puesto bajo
          control de versiones. Los recursos deben ser asignados
          explícitamente bajo la gestión de Subversion usando
          los comandos <command>svn add</command> o <command>svn
          import</command>.  Como resultado, con frecuencia
          muchos recursos en una copia local de trabajo no están
          versionados.</para>

        <para>Ahora, el comando <command>svn status</command>
          muestra como parte de su salida cada fichero o
          subdirectorio en la copia local de trabajo que no está
          filtrado por la opción <literal>global-ignores</literal>
          (o su valor por defecto).  Esto se hace así para que los
          usuarios puedan ver si quizás han olvidado poner un recurso
          bajo control de versiones.</para>

        <para>Pero Subversion es incapaz de adivinar los nombres
          de cada recurso que debe ser ignorado. Además,
          a menudo hay cosas que deberían ser ignoradas en
          <emphasis>cada</emphasis> copia local de trabajo de
          un repositorio particular.  Obligar a cada usuario del
          repositorio a que añada patrones para estos recursos a sus
          áreas de configuración de parámetros de ejecución no sólo
          sería un incordio, sino que podría entrar en conflicto con
          las necesidades de configuración de otras copias locales
          de trabajo que el usuario ha obtenido.</para>

        <para>La solución es almacenar los patrones de exclusión que
          son únicos del directorio donde deben ser aplicados
          junto con el propio directorio.  Ejemplos habituales de
          recursos no versionados que son básicamente únicos de
          cada directorio, y propensos a aparecer ahí, son ficheros
          generados por la compilación de programas. O&mdash;para
          usar un ejemplo más apropiado para este libro&mdash;los
          ficheros HTML, PDF o PostScript generados como resultado
          de la conversión de los ficheros fuente XML DocBook a un
          formato de salida más legible.</para>

        <sidebar>
          <title>Patrones de exclusión para usuarios de CVS</title>
        
          <para>La propiedad <literal>svn:ignore</literal> de
            Subversion es muy similar en sintáxis y funcionalidad
            al fichero <filename>.cvsignore</filename> de CVS.
            De hecho, si está migrando una copia local de CVS a
            Subversion, puede migrar directamente los patrones de
            exclusión usando el fichero <filename>.cvsignore</filename>
            como fichero de entrada del comando <command>svn
            propset</command>:</para>
       
          <screen>
$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</screen>        

          <para>Existen, no obstante, algunas diferencias en el modo
            que CVS y Subversion manejan los patrones de
            exclusión. Los dos sistemas usan los patrones
            de exclusión en diferentes momentos, y hay algunas
            pequeñas discrepancias en cuanto a qué afectan estos
            patrones de exclusión. Además, Subversion no reconoce
            el uso del patrón <literal>!</literal> como comando para
            resetear la configuración y eliminar todos los patrones
            de exclusión.</para>

        </sidebar>

        <para>Para este propósito, la propiedad
          <literal>svn:ignore</literal> es la solución.  Su valor es
          un conjunto multilínea de patrones de ficheros, un patrón
          por línea. La propiedad se activa en el directorio donde
          quiere que los patrones sean aplicados.
          <footnote>
            <para>Los patrones únicamente funcionarán en ese
              directorio&mdash;no serán aplicados de forma recursiva
              en subdirectorios.</para>
          </footnote>
          Por ejemplo, digamos que obtiene la siguiente salida
          <command>svn status</command>:</para>

       <screen>
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</screen>

        <para>En este ejemplo, ha realizado algunas modificaciones
          de propiedades sobre <filename>button.c</filename>,
          pero en su copia local de trabajo también tiene algunos
          ficheros sin versionar: la última versión del programa
          <filename>calculator</filename> que ha compilado del
          código fuente, un fichero de código fuente llamado
          <filename>data.c</filename>, y un conjunto de ficheros
          de depuración. Ahora, ya sabe que su sistema de compilado
          siempre acaba generando el programa
          <filename>calculator</filename>.
          <footnote>
            <para>¿No es este acaso el propósito de un sistema de
              compilación?</para>
          </footnote>
          Y sabe que el conjunto de sus unidades de verificación
          siempre acaban dejando ficheros de depuración en el
          directorio. Estos hechos son ciertos para todas las copias
          de trabajo, no sólo la suya. Y sabe que no está interesado
          en ver estas cosas cada vez que ejecute <command>svn
          status</command>.  Así que use <command>svn propedit
          svn:ignore calc</command> para añadir algunos patrones
          de exclusión al directorio <filename>calc</filename>.
          Por ejemplo, podría añadir lo siguiente como nuevo valor
          de la propiedad <literal>svn:ignore</literal>:</para>

        <programlisting>
calculator
debug_log*
</programlisting>

        <para>Tras añadir esta propiedad, ahora tendrá una modificación
          local de propiedad en el directorio <filename>calc</filename>.
          Pero advierta qué otras cosas son diferentes sobre la salida
          del comando
          <command>svn status</command>:</para>

        <screen>
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</screen>

        <para>¡Ahora, los despojos no entorpecen el listado! Por
          supuesto, esos ficheros aun están en su copia local de
          trabajo. Subversion únicamente no le está recordando
          que están presentes y no versionados. Y ahora tras haber
          eliminado todo el ruido trivial del listado, se encuentra
          con elementos más interesantes&mdash;como por ejemplo el
          fichero de código fuente que proablemente olvidó poner
          bajo control de versiones.</para>

        <para>If you want to see the ignored files, you can pass the 
          <command>--no-ignore</command> option to subversion:</para>

<screen>
$ svn status --no-ignore
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</screen>

        <para>The list of patterns to ignore is also used by
          <command>svn add</command> and <command>svn
          import</command>.  Both of these operations involve asking
          Subversion to begin managing some set of files and
          directories.  Rather than force the user to pick and choose
          which files in a tree she wishes to start versioning,
          Subversion uses the ignore patterns to determine which files
          should not be swept into the version control system as part
          of a larger recursive addition or import operation.</para>
   
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.4">
        <title><literal>svn:keywords</literal></title>

        <para>Subversion has the ability to substitute
          <firstterm>keywords</firstterm>&mdash;pieces of useful,
          dynamic information about a versioned file&mdash;into the
          contents of the file itself.  Keywords generally describe
          information about the last time the file was known to be
          modified.  Because this information changes each time the
          file changes, and more importantly, just
          <emphasis>after</emphasis> the file changes, it is a hassle
          for any process except the version control system to keep
          the data completely up-to-date.  Left to human authors, the
          information would inevitably grow stale.</para>

        <para>For example, say you have a document in which you would
          like to display the last date on which it was modified.  You
          could burden every author of that document to, just before
          committing their changes, also tweak the part of the
          document that describes when it was last changed.  But
          sooner or later, someone would forget to do that.  Instead
          simply ask Subversion to perform keyword substitution on the
          <literal>LastChangedDate</literal> keyword.  You control
          where the keyword is inserted into your document by placing
          a <firstterm>keyword anchor</firstterm> at the desired
          location in the file.  This anchor is just a string of text
          formatted as
          <literal>$</literal><replaceable>KeywordName</replaceable><literal>$</literal>.</para>

        <para>Subversion defines the list of keywords available for
          substitution.  That list contains the following five
          keywords, some of which have shorter aliases that you can
          also use:</para>

        <variablelist>
          <varlistentry>
            <term><literal>LastChangedDate</literal></term>
            <listitem>
              <para>This keyword describes the last time the file was
                known to have been changed in the repository, and
                looks something like <literal>$LastChangedDate:
                2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002)
                $</literal>.  It may be abbreviated as
                <literal>Date</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedRevision</literal></term>
            <listitem>
              <para>This keyword describes the last known revision in
                which this file changed in the repository, and looks
                something like <literal>$LastChangedRevision: 144
                $</literal>.  It may be abbreviated as
                <literal>Revision</literal> or
                <literal>Rev</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LastChangedBy</literal></term>
            <listitem>
              <para>This keyword describes the last known user to
                change this file in the repository, and looks
                something like <literal>$LastChangedBy: harry
                $</literal>.  It may be abbreviated as
                <literal>Author</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>HeadURL</literal></term>
            <listitem>
              <para>This keyword describes the full URL to the latest
                version of the file in the repository, and looks
                something like <literal>$HeadURL:
                http://svn.collab.net/repos/trunk/README $</literal>.
                It may be abbreviated as
                <literal>URL</literal>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>Id</literal></term>
            <listitem>
              <para>This keyword is a compressed combination of the
                other keywords.  Its substitution looks something like
                <literal>$Id: calc.c 148 2002-07-28 21:30:43Z sally
                $</literal>, and is interpreted to mean that the file
                <filename>calc.c</filename> was last changed in revision
                148 on the evening of July 28, 2002 by the user
                <literal>sally</literal>.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Simply adding keyword anchor text to your file does
          nothing special.  Subversion will never attempt to perform
          textual substitutions on your file contents unless
          explicitly asked to do so.  After all, you might be writing
          a document
          <footnote>
            <para>&hellip; or maybe even a section of a book &hellip;</para>
          </footnote> 
          about how to use keywords, and you don't want Subversion to
          substitute your beautiful examples of un-substituted keyword
          anchors!</para>

        <para>To tell Subversion whether or not to substitute keywords
          on a particular file, we again turn to the property-related
          subcommands.  The <literal>svn:keywords</literal> property,
          when set on a versioned file, controls which keywords will
          be substituted on that file.  The value is a space-delimited
          list of the keyword names or aliases found in the previous
          table.</para>

        <para>For example, say you have a versioned file named
          <filename>weather.txt</filename> that looks like
          this:</para>

        <programlisting>
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</programlisting>
        
        <para>With no <literal>svn:keywords</literal> property set on
          that file, Subversion will do nothing special.  Now, let's
          enable substitution of the
          <literal>LastChangedDate</literal> keyword.</para>

        <screen>
$ svn propset svn:keywords "LastChangedDate Author" weather.txt
property 'svn:keywords' set on 'weather.txt'
$
</screen>        

        <para>Now you have made a local property modification on the
          <filename>weather.txt</filename> file.  You will see no
          changes to the file's contents (unless you made some of your
          own prior to setting the property).  Notice that the file
          contained a keyword anchor for the <literal>Rev</literal>
          keyword, yet we did not include that keyword in the property
          value we set.  Subversion will happily ignore requests to
          substitute keywords that are not present in the file, and
          will not substitute keywords that are not present in the
          <literal>svn:keywords</literal> property value.</para>

        <sidebar>
          <title>Keywords and Spurious Differences</title>

          <para>The user-visible result of keyword substitution might
            lead you to think that every version of a file with that
            feature in use differs from the previous version in at
            least the area where the keyword anchor was placed.
            However, this is actually not the case.  While checking
            for local modifications during <command>svn
            diff</command>, and before transmitting those local
            modifications during <command>svn commit</command>,
            Subversion <quote>un-substitutes</quote> any keywords that
            it previously substituted.  The result is that the
            versions of the file that are stored in the repository
            contain only the real modifications that users make to the
            file.</para>

        </sidebar>

        <para>Immediately after you commit this property change,
          Subversion will update your working file with the new
          substitute text.  Instead of seeing your keyword anchor
          <literal>$LastChangedDate$</literal>, you'll see its
          substituted result.  That result also contains the name of
          the keyword, and continues to be bounded by the dollar sign
          (<literal>$</literal>) characters.  And as we predicted, the
          <literal>Rev</literal> keyword was not substituted because
          we didn't ask for it to be.</para>

        <screen>
Here is the latest report from the front lines.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</screen>
        
        <para>If someone else now commits a change to
          <filename>weather.txt</filename>, your copy of that file
          will continue to display the same substituted keyword value
          as before&mdash;until you update your working copy.  At that
          time the keywords in your <filename>weather.txt</filename>
          file will be re-substituted with information that
          reflects the most recent known commit to that file.</para>

      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.5">
        <title><literal>svn:eol-style</literal></title>

        <para>Unless otherwise noted using a versioned file's
          <literal>svn:mime-type</literal> property, Subversion
          assumes the file contains human-readable data.  Generally
          speaking, Subversion only uses this knowledge to determine
          if contextual difference reports for that file are
          possible.  Otherwise, to Subversion, bytes are bytes.</para>
        
        <para>This means that by default, Subversion doesn't pay any
          attention to the type of <firstterm>end-of-line (EOL)
          markers</firstterm> used in your files.  Unfortunately,
          different operating system use different tokens to represent
          the end of a line of text in a file.  For example, the usual
          line ending token used by software on the Windows platform
          is a pair of ASCII control characters&mdash;carriage return
          (<literal>CR</literal>) and line feed
          (<literal>LF</literal>).  Unix software, however, just uses
          the <literal>LF</literal> character to denote the end of a
          line.</para>

        <para>Not all of the various tools on these operating systems
          are prepared to understand files that contain line endings
          in a format that differs from the <firstterm>native line
          ending style</firstterm> of the operating system on which
          they are running.  Common results are that Unix programs
          treat the <literal>CR</literal> character present in Windows
          files as a regular character (usually rendered as
          <literal>^M</literal>), and that Windows programs combine
          all of the lines of a Unix file into one giant line because
          no carriage return-linefeed (or <literal>CRLF</literal>)
          character combination was found to denote the end of
          line.</para>

        <para>This sensitivity to foreign EOL markers can become
          frustrating for folks who share a file across different
          operating systems.  For example, consider a source code
          file, and developers that edit this file on both Windows and
          Unix systems.  If all the developers always use tools which
          preserve the line ending style of the file, no problems
          occur.</para>

        <para>But in practice, many common tools either fail to
          properly read a file with foreign EOL markers, or they
          convert the file's line endings to the native style when the
          file is saved.  If the former is true for a developer, he
          has to use an external conversion utility (such as
          <command>dos2unix</command> or its companion,
          <command>unix2dos</command>) to prepare the file for
          editing.  The latter case requires no extra preparation.
          But both cases result in a file that differs from the
          original quite literally on every line!  Prior to committing
          his changes, the user has two choices.  Either he can use a
          conversion utility to restore the modified file to the same
          line ending style that it was in before his edits were made.
          Or, he can simply commit the file&mdash;new EOL markers and
          all.</para>

        <para>The result of scenarios like these include wasted time
          and unnecessary modifications to committed files.  Wasted
          time is painful enough.  But when commits change every line
          in a file, this complicates the job of determining which of
          those lines were changed in a non-trivial way.  Where was
          that bug really fixed?  On what line was a syntax error
          introduced?</para>

        <para>The solution to this problem is the
          <literal>svn:eol-style</literal> property.  When this
          property is set to a valid value, Subversion uses it to
          determine what special processing to perform on the file so
          that the file's line ending style isn't flip-flopping with
          every commit that comes from a different operating
          system.  The valid values are:</para>

        <variablelist>
          <varlistentry>
            <term><literal>native</literal></term>
            <listitem>
              <para>This causes the file to contain the EOL markers
                that are native to the operating system on which
                Subversion was run.  In other words, if a user on a
                Windows machine checks out a working copy that
                contains a file with an
                <literal>svn:eol-style</literal> property set to
                <literal>native</literal>, that file will contain
                <literal>CRLF</literal> EOL markers.  A Unix user
                checking out a working copy which contains the same
                file will see <literal>LF</literal> EOL markers in his
                copy of the file.</para>

              <para>Note that Subversion will actually store the file
                in the repository using normalized
                <literal>LF</literal> EOL markers regardless of the
                operating system.  This is basically transparent to
                the user, though.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CRLF</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>CRLF</literal> sequences for EOL markers,
                regardless of the operating system in use.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>LF</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>LF</literal> characters for EOL markers,
                regardless of the operating system in use.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>CR</literal></term>
            <listitem>
              <para>This causes the file to contain
                <literal>CR</literal> characters for EOL markers,
                regardless of the operating system in use.  This line
                ending style is not very common.  It was used on older
                Macintosh platforms (on which Subversion doesn't even
                run).</para>
            </listitem>
          </varlistentry>
        </variablelist>
        
      </sect3>

      <sect3 id="svn-ch-7-sect-2.3.6">
        <title><literal>svn:externals</literal></title>

        <para>The <literal>svn:externals</literal> property contains
          instructions for Subversion to populate a versioned
          directory with one or more other checked-out Subversion
          working copies.  For more information on this keyword and
          its use, see <xref linkend="svn-ch-7-sect-3"/>.</para>

      </sect3>
    </sect2>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-2.4">
      <title>Automatic Property Setting</title>

      <para>Properties are a powerful feature of Subversion, acting as
        key components of many Subversion features discussed elsewhere
        in this and other chapters&mdash;textual diff and merge
        support, keyword substitution, newline translation, etc.  But
        to get the full benefit of properties, they must be set on the
        right files and directories.  Unfortunately, that can be a
        step easily forgotten in the routine of things, especially
        since failing to set a property doesn't usually result in an
        obvious error condition (at least compared to, say, failing to
        add a file to version control).  To help your properties get
        applied to the places that need them, Subversion provides a
        couple of simple but useful features.</para>

      <para>Whenever you introduce a file to version control using the
        <command>svn add</command> or <command>svn import</command>
        commands, Subversion runs a very basic heuristic to determine
        if that file consists of human-readable or non-human-readable
        content.  If the latter is the decision made, Subversion will
        automatically set the <literal>svn:mime-type</literal>
        property on that file to
        <literal>application/octet-stream</literal> (the generic
        <quote>this is a collection of bytes</quote> MIME type).  Of
        course, if Subversion guesses incorrectly, or if you wish to
        set the <literal>svn:mime-type</literal> property to something
        more precise&mdash;perhaps <literal>image/png</literal> or
        <literal>application/x-shockwave-flash</literal>&mdash;you can
        always remove or edit that property.</para>

      <para>Subversion also provides the auto-props feature, which
        allows you to create mappings of filename patterns to property
        names and values.  These mappings are made in your runtime
        configuration area.  They again affect adds and imports, and
        not only can override any default MIME type decision made by
        Subversion during those operations, they can also set
        additional Subversion or custom properties, too.  For example,
        you might create a mapping that says that any time you add
        JPEG files&mdash;ones that match the pattern
        <literal>*.jpg</literal>&mdash;Subversion should automatically
        set the <literal>svn:mime-type</literal> property on those
        files to <literal>image/jpeg</literal>.  Or perhaps any files
        that match <literal>*.cpp</literal> should have
        <literal>svn:eol-style</literal> set to
        <literal>native</literal>, and <literal>svn:keywords</literal>
        set to <literal>Id</literal>.  Auto-prop support is perhaps
        the handiest property related tool in the Subversion toolbox.
        See <xref linkend="svn-ch-7-sect-1.3.2"/> for more about
        configuring that support.</para>

    </sect2>     
  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 3:  EXTERNALS DEFINITIONS                           *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-3">
    <title>Externals Definitions</title>
    
    <para>Sometimes it is useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different subdirectories to come from different
      locations in a repository, or perhaps from different
      repositories altogether.  You could certainly setup such a
      scenario by hand&mdash;using <command>svn checkout</command> to
      create the sort of nested working copy structure you are trying
      to achieve.  But if this layout is important for everyone who
      uses your repository, every other user will need to perform the
      same checkout operations that you did.</para>

    <para>Fortunately, Subversion provides support for
      <firstterm>externals definitions</firstterm>.  An externals
      definition is a mapping of a local directory to the
      URL&mdash;and possibly a particular revision&mdash;of a
      versioned resource.  In Subversion, you declare externals
      definitions in groups using the <literal>svn:externals</literal>
      property.  You can create or modify this property using
      <command>svn propset</command> or <command>svn
      propedit</command> (see <xref linkend="svn-ch-7-sect-2.1"/>).  
      It can be set on any versioned directory,
      and its value is a multi-line table of subdirectories (relative
      to the versioned directory on which the property is set) and
      fully qualified, absolute Subversion repository URLs.</para>

    <screen>
$ svn propget svn:externals calc
third-party/sounds             http://sounds.red-bean.com/repos
third-party/skins              http://skins.red-bean.com/repositories/skinproj
third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker
</screen>

    <para>The convenience of the <literal>svn:externals</literal>
      property is that once it is set on a versioned directory,
      everyone who checks out a working copy with that directory also
      gets the benefit of the externals definition.  In other words,
      once one person has made the effort to define those nested
      working copy checkouts, no one else has to
      bother&mdash;Subversion will, upon checkout of the original
      working copy, also checkout the external working copies.</para>

    <para>Note the previous externals definition example.  When
      someone checks out a working copy of the
      <filename>calc</filename> directory, Subversion also continues
      to checkout the items found in its externals definition.</para>

    <screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
&hellip;
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
&hellip;
</screen>

    <para>If you need to change the externals definition, you can do
      so using the regular property modification subcommands.  When
      you commit a change to the <literal>svn:externals</literal>
      property, Subversion will synchronize the checked-out items
      against the changed externals definition when you next run
      <command>svn update</command>.  The same thing will happen when
      others update their working copies and receive your changes to
      the externals definition.</para>

    <para>The <command>svn status</command> command also recognizes
      externals definitions, displaying a status code of
      <literal>X</literal> for the disjoint subdirectories into which
      externals are checked out, and then recursing into those
      subdirectories to display the status of the external items
      themselves.</para>

    <para>The support that exists for externals definitions in
      Subversion today can be a little misleading, though.  The
      working copies created via the externals definition support are
      still disconnected from the primary working copy (on whose
      versioned directories the <literal>svn:externals</literal>
      property was actually set).  And Subversion still only truly
      operates on non-disjoint working copies.  So, for example, if
      you want to commit changes that you've made in one or more of
      those external working copies, you must run <command>svn
      commit</command> explicitly on those working
      copies&mdash;committing on the primary working copy will not
      recurse into any external ones.</para>

    <para>Also, since the definitions themselves use absolute URLs,
      moving or copying a directory to which they are attached will
      not affect what gets checked out as an external (though the
      relative local target subdirectory will, of course, move with
      renamed directory).  This can be confusing&mdash;even
      frustrating&mdash;in certain situations.  For example, if you
      use externals definitions on a directory in your
      <filename>/trunk</filename> development line which point to
      other areas of that same line, and then you use <command>svn
      copy</command> to branch that line to some new location
      <filename>/branches/my-branch</filename>, the externals
      definitions on items in your new branch will still refer to
      versioned resources in <filename>/trunk</filename>.  Also, be
      aware that if you need to re-parent your working copy (using
      <command>svn switch --relocate</command>), externals definitions
      will <emphasis>not</emphasis> also be re-parented.</para>

  </sect1>

  <!-- ******************************************************************* -->
  <!-- *** SECTION 4:  VENDOR BRANCHES                                 *** -->
  <!-- ******************************************************************* -->
  <sect1 id="svn-ch-7-sect-4">
    <title>Vendor branches</title>

    <para>As is especially the case when developing software, the data
      that you maintain under version control is often closely related
      to, or perhaps dependent upon, someone else's data.  Generally,
      the needs of your project will dictate that you stay as
      up-to-date as possible with the data provided by that external
      entity without sacrificing the stability of your own project.
      This scenario plays itself out all the time&mdash;anywhere that
      the information generated by one group of people has a direct
      effect on that which is generated by another group.</para>
 
    <para>For example, software developers might be working on an
      application which makes use of a third-party library.
      Subversion has just such a relationship with the Apache Portable
      Runtime library (see <xref linkend="svn-ch-8-sect-2.1" />).  The
      Subversion source code depends on the APR library for all its
      portability needs.  In earlier stages of Subversion's
      development, the project closely tracked APR's changing API,
      always sticking to the <quote>bleeding edge</quote> of the
      library's code churn.  Now that both APR and Subversion have
      matured, Subversion attempts to synchronize with APR's library
      API only at well-tested, stable release points.</para>

    <para>Now, if your project depends on someone else's information,
      there are several ways that you could attempt to synchronize that
      information with your own.  Most painfully, you could issue oral
      or written instructions to all the contributors of your project,
      telling them to make sure that they have the specific versions
      of that third-party information that your project needs.  If the
      third-party information is maintained in a Subversion
      repository, you could also use Subversion's externals
      definitions to effectively <quote>pin down</quote> specific
      versions of that information to some location in your own
      working copy directory (see <xref linkend="svn-ch-7-sect-3" />).</para>

    <para>But sometimes you want to maintain custom modifications to
      third-party data in your own version control system.  Returning
      to the software development example, programmers might need to
      make modifications to that third-party library for their own
      purposes.  These modifications might include new functionality
      or bug fixes, maintained internally only until they become part
      of an official release of the third-party library.  Or the
      changes might never be relayed back to the library maintainers,
      existing solely as custom tweaks to make the library further
      suit the needs of the software developers.</para>

    <para>Now you face an interesting situation.  Your project could
      house its custom modifications to the third-party data in some
      disjointed fashion, such as using patch files or full-fledged
      alternate versions of files and directories.  But these quickly
      become maintenance headaches, requiring some mechanism by which
      to apply your custom changes to the third-party data, and
      necessitating regeneration of those changes with each successive
      version of the third-party data that you track.</para>

    <para>The solution to this problem is to use <firstterm>vendor
      branches</firstterm>.  A vendor branch is a directory tree in
      your own version control system that contains information
      provided by a third-party entity, or vendor.  Each version of
      the vendor's data that you decide to absorb into your project is
      called a <firstterm>vendor drop</firstterm>.</para> 

    <para>Vendor branches provide two key benefits.  First, by storing
      the currently supported vendor drop in your own version control
      system, the members of your project never need to question
      whether they have the right version of the vendor's data.  They
      simply receive that correct version as part of their regular
      working copy updates.  Secondly, because the data lives in your
      own Subversion repository, you can store your custom changes to
      it in-place&mdash;you have no more need of an automated (or
      worse, manual) method for swapping in your customizations.</para>

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.1">
      <title>General Vendor Branch Management Procedure</title>

      <para>Managing vendor branches generally works like this.  You
        create a top-level directory (such as
        <filename>/vendor</filename>) to hold the vendor branches.
        Then you import the third party code into a subdirectory of
        that top-level directory.  You then copy that subdirectory
        into your main development branch (for example,
        <filename>/trunk</filename>) at the appropriate location.  You
        always make your local changes in the main development branch.
        With each new release of the code you are tracking you bring
        it into the vendor branch and merge the changes into
        <filename>/trunk</filename>, resolving whatever conflicts
        occur between your local changes and the upstream
        changes.</para>

      <para>Perhaps an example will help to clarify this algorithm.
        We'll use a scenario where your development team is creating a
        calculator program that links against a third-party complex
        number arithmetic library, libcomplex.  We'll begin with the
        initial creation of the vendor branch, and the import of the
        first vendor drop.  We'll call our vendor branch directory
        <filename>libcomplex</filename>, and our code drops will go
        into a subdirectory of our vendor branch called
        <filename>current</filename>.  And since <command>svn
        import</command> creates all the intermediate parent
        directories it needs, we can actually accomplish both of these
        steps with a single command.</para>

      <screen>
$ svn import /path/to/libcomplex-1.0 \
             http://svn.example.com/repos/vendor/libcomplex/current \
             -m 'importing initial 1.0 vendor drop'
&hellip;
</screen>
    
      <para>We now have the current version of the libcomplex source
        code in <filename>/vendor/libcomplex/current</filename>.  Now,
        we tag that version (see <xref linkend="svn-ch-4-sect-6" />)
        and then copy it into the main development branch.  Our copy
        will create a new directory called
        <filename>libcomplex</filename> in our existing
        <filename>calc</filename> project directory.  It is in this
        copied version of the vendor data that we will make our
        customizations.</para>
    
      <screen>
$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \
           http://svn.example.com/repos/vendor/libcomplex/1.0      \
           -m 'tagging libcomplex-1.0'
&hellip;
$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \
           http://svn.example.com/repos/calc/libcomplex        \
           -m 'bringing libcomplex-1.0 into the main branch'
&hellip;
</screen>

      <para>We check out our project's main branch&mdash;which now
        includes a copy of the first vendor drop&mdash;and we get to
        work customizing the libcomplex code.  Before we know it, our
        modified version of libcomplex is now completely integrated
        into our calculator program.
        <footnote>
          <para>And entirely bug-free, of course!</para>
        </footnote>
      </para>

      <para>A few weeks later, the developers of libcomplex release a
        new version of their library&mdash;version 1.1&mdash;which
        contains some features and functionality that we really want.
        We'd like to upgrade to this new version, but without losing
        the customizations we made to the existing version.  What we
        essentially would like to do is to replace our current
        baseline version of libcomplex 1.0 with a copy of libcomplex
        1.1, and then re-apply the custom modifications we previously
        made to that library to the new version.  But we actually
        approach the problem from the other direction, applying the
        changes made to libcomplex between versions 1.0 and 1.1 to our
        modified copy of it.</para>
      
      <para>To perform this upgrade, we checkout a copy of our vendor
        branch, and replace the code in the
        <filename>current</filename> directory with the new libcomplex
        1.1 source code.  We quite literally copy new files on top of
        existing files, perhaps exploding the libcomplex 1.1 release
        tarball atop our existing files and directories.  The goal
        here is to make our <filename>current</filename> directory
        contain only the libcomplex 1.1 code, and to ensure that all
        that code is under version control.  Oh, and we want to do
        this with as little version control history disturbance as
        possible.</para>

      <para>After replacing the 1.0 code with 1.1 code, <command>svn
        status</command> will show files with local modifications as
        well as, perhaps, some unversioned or missing files.  If we
        did what we were supposed to do, the unversioned files are
        only those new files introduced in the 1.1 release of
        libcomplex&mdash;we run <command>svn add</command> on those to
        get them under version control.  The missing files are files
        that were in 1.0 but not in 1.1, and on those paths we run
        <command>svn remove</command>.  Finally, once our
        <filename>current</filename> working copy contains only the
        libcomplex 1.1 code, we commit the changes we made to get it
        looking that way.</para>

      <para>Our <filename>current</filename> branch now contains the
        new vendor drop.  We tag the new version (in the same way we
        previously tagged the version 1.0 vendor drop), and then merge
        the differences between the tag of the previous version and
        the new current version into our main development
        branch.</para>

      <screen>
$ cd working-copies/calc
$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \
            http://svn.example.com/repos/vendor/libcomplex/current  \
            libcomplex
&hellip; # resolve all the conflicts between their changes and our changes
$ svn commit -m 'merging libcomplex-1.1 into the main branch'
&hellip;
</screen>

      <para>In the trivial use-case, the new version of our
        third-party tool would look, from a files-and-directories
        point of view, just like the previous version.  None of the
        libcomplex source files would have been deleted, renamed or
        moved to different locations&mdash;the new version would
        contain only textual modifications against the previous one.
        In a perfect world, our modifications would apply cleanly to
        the new version of the library, with absolutely no
        complications or conflicts.</para>

     <para>But things aren't always that simple, and in fact it is
       quite common for source files to get moved around between
       releases of software.  This complicates the process of ensuring
       that our modifications are still valid for the new version of
       code, and can quickly degrade into a situation where we have to
       manually recreate our customizations in the new version.  Once
       Subversion knows about the history of a given source
       file&mdash;including all its previous locations&mdash;the
       process of merging in the new version of the library is pretty
       simple.  But we are responsible for telling Subversion how the
       source file layout changed from vendor drop to vendor
       drop.</para>

    </sect2>

    <!-- TODO: Try to clarify some of the steps for svn_load_dirs.pl
         (Garrett sez they've been "glossed over".  Also, consider
         another section on bypassing svn_load_dirs.pl altogether and
         running with just svn merge, now that it ignores ancestry. -->

    <!-- ***************************************************************** -->
    <sect2 id="svn-ch-7-sect-4.2">
      <title><command>svn_load_dirs.pl</command></title>

      <para>Vendor drops that contain more than a few deletes,
        additions and moves complicate the process of upgrading to
        each successive version of the third-party data.  So
        Subversion supplies the <command>svn_load_dirs.pl</command>
        script to assist with this process.  This script automates the
        importing steps we mentioned in the general vendor branch
        management procedure to make sure that mistakes are minimized.
        You will still be responsible for using the merge commands to
        merge the new versions of the third-party data into your main
        development branch, but <command>svn_load_dirs.pl</command>
        can help you more quickly and easily arrive at that
        stage.</para>

      <para>In short, <command>svn_load_dirs.pl</command> is an
        enhancement to <command>svn import</command> that has several
        important characteristics:</para>

      <itemizedlist>
        <listitem>
          <para>It can be run at any point in time to bring an existing
            directory in the repository to exactly match an external
            directory, performing all the necessary adds and deletes,
            and optionally performing moves, too.</para>
        </listitem>
        <listitem>
          <para>It takes care of complicated series of operations between
            which Subversion requires an intermediate commit&mdash;such
            as before renaming a file or directory twice.</para>
        </listitem>
        <listitem>
          <para>It will optionally tag the newly imported directory.</para>
        </listitem>
        <listitem>
          <para>It will optionally add arbitrary properties to files and
            directories that match a regular expression.</para>
        </listitem>
      </itemizedlist>

      <para><command>svn_load_dirs.pl</command> takes three mandatory
        arguments.  The first argument is the URL to the base
        Subversion directory to work in.  This argument is followed by
        the URL&mdash;relative to the first argument&mdash;into which the
        current vendor drop will be imported.  Finally, the third
        argument is the local directory to import.  Using our previous
        example, a typical run of <command>svn_load_dirs.pl</command>
        might look like:</para>

      <screen>
$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>You can indicate that you'd like
        <command>svn_load_dirs.pl</command> to tag the new vendor drop
        by passing the <option>-t</option> command-line option and
        specifying a tag name.  This tag is another URL relative to
        the first program argument.</para>

      <screen>
$ svn_load_dirs.pl -t libcomplex-1.1                              \
                   http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&hellip;
</screen>

      <para>When you run <command>svn_load_dirs.pl</command>, it
        examines the contents of your existing <quote>current</quote>
        vendor drop, and compares them with the proposed new vendor
        drop.  In the trivial case, there will be no files that are in
        one version and not the other, and the script will perform the
        new import without incident.  If, however, there are
        discrepancies in the file layouts between versions,
        <command>svn_load_dirs.pl</command> will prompt you for how
        you would like to resolve those differences.  For example, you
        will have the opportunity to tell the script that you know
        that the file <filename>math.c</filename> in version 1.0 of
        libcomplex was renamed to <filename>arithmetic.c</filename> in
        libcomplex 1.1.  Any discrepancies not explained by moves
        are treated as regular additions and deletions.</para>

      <para>The script also accepts a separate configuration file for
        setting properties on files and directories matching a regular
        expression that are <emphasis>added</emphasis> to the
        repository.  This configuration file is specified to
        <command>svn_load_dirs.pl</command> using the
        <option>-p</option> command-line option.  Each line of the
        configuration file is a whitespace-delimited set of two or
        four values: a Perl-style regular expression to match the
        added path against, a control keyword (either
        <literal>break</literal> or <literal>cont</literal>), and then
        optionally a property name and value.</para>

      <screen>
\.png$              break   svn:mime-type   image/png
\.jpe?g$            break   svn:mime-type   image/jpeg
\.m3u$              cont    svn:mime-type   audio/x-mpegurl
\.m3u$              break   svn:eol-style   LF
.*                  break   svn:eol-style   native
</screen>

      <para>For each added path, the configured property changes whose
        regular expression matches the path are applied in order,
        unless the control specification is <literal>break</literal>
        (which means that no more property changes should be applied
        to that path).  If the control specification is
        <literal>cont</literal>&mdash;an abbreviation for
        <literal>continue</literal>&mdash;then matching will continue
        with the next line of the configuration file.</para>

      <para>Any whitespace in the regular expression, property name,
        or property value must be surrounded by either single or
        double quote characters.  You can escape quote characters that
        are not used for wrapping whitespace by preceding them with a
        backslash (<literal>\</literal>) character.  The backslash
        escapes only quotes when parsing the configuration file, so do
        not protect any other characters beyond what is necessary for
        the regular expression.</para>

    </sect2>
  </sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
