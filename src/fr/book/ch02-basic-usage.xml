<chapter id="svn.tour">
  <title>Utilisation de base</title>

  <para>Nous allons maintenant voir plus en détail l'utilisation de
    Subversion. Quand vous aurez terminé ce chapitre, vous serez
    capable d'effectuer toutes les tâches nécessaires à une
    utilisation quotidienne de Subversion. Nous allons commencer par
    enregistrer nos fichiers dans Subversion, puis extraire
    notre code. Ensuite, nous expliquons comment modifier des
    fichiers et examiner ces changements. Nous voyons aussi comment
    faire pour intégrer les changements venant d'autres personnes dans
    notre copie de travail, les examiner et résoudre les conflits qui
    pourraient apparaître.</para>

  <para>Notez que ce chapitre ne doit pas être vu comme une liste
    complète de toutes les commandes de Subversion, mais plutôt comme
    une introduction conviviale aux opérations Subversion les plus
    courantes que vous êtes susceptible de rencontrer. Ici, nous
    supposons que vous avez lu et compris le <xref
    linkend="svn.basic"/> et que vous êtes familier avec le modèle
    général de Subversion. Pour une liste complète de toutes les
    commandes, reportez-vous au <xref linkend="svn.ref"/>.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
    <title>À l'aide&nbsp;!</title>

    <para>Avant de poursuivre la lecture, voici la commande la plus
      importante de Subversion&nbsp;:
      <command>svn help</command>. Le client en ligne de commande de
      Subversion inclut sa propre documentation&nbsp;: à tout moment,
      un rapide <userinput>svn help
      <replaceable>sous-commande</replaceable></userinput> vous
      renvoie la syntaxe, les options et le comportement de la
      sous-commande.</para>

    <screen>
$ svn help import
import: Charge un fichier ou une arborescence non versionnée dans un dépôt.
usage : import [CHEMIN] URL

  Charge récursivement une copie de CHEMIN vers URL.
  Si CHEMIN est omis, '.' est utilisé.
  Les répertoires parents sont créés si nécessaire dans le dépôt.
  Si CHEMIN est un répertoire, son contenu est ajouté directement sous l'URL.
  Les objects non versionnables tels les périphériques ou les pipes sont
  ignorés si l'option '--force' est spécifiée.

Options valides:
  -q [--quiet]             : n'affiche rien, ou seulement des
                             informations résumées
  -N [--non-recursive]     : obsolète : essayer --depth=files ou
                             --depth=immediates
  --depth ARG              : limite l'opération à cette profondeur
                             (depth empty/files/immediates/infinity)
                             en argument
&hellip;
</screen>

      <sidebar>
        <title>Options, sélecteurs, drapeaux&hellip;
          Doux Jésus&nbsp;!</title>

        <para>Le client en ligne de commande de Subversion possède de
          nombreux modificateurs de commandes (que nous appelons
          options), mais il existe deux types d'options
          distincts&nbsp;: les options courtes sont constituées
          d'un unique tiret suivi d'une unique lettre, tandis que les
          options longues sont formées de deux tirets suivis d'un
          certain nombre de lettres (c'est-à-dire respectivement
           <literal>-s</literal> et
           <literal>--ceci-est-une-option-longue</literal>). Chaque
           option possède une option longue, mais seules certaines
           options ont aussi un format court (ce sont généralement
           des options qui sont utilisées très souvent). Par souci de
           clarté, nous utilisons <emphasis>généralement</emphasis>
           la forme longue dans les exemples de code, mais lorsque
           nous décrivons les options, s'il existe une forme courte,
           nous donnons à la fois la forme longue (pour plus de
           clarté) et la forme courte (car plus facile à retenir).
           Utilisez la forme qui vous convient le mieux, mais
           n'essayez pas d'utiliser les deux.</para>

      </sidebar>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.importing">
    <title>Enregistrement de données dans votre dépôt</title>

    <para>Deux moyens sont à votre disposition pour enregistrer de
      nouveaux fichiers dans votre dépôt Subversion&nbsp;:
      <command>svn import</command> et <command>svn add</command>.
      Nous abordons ici la commande <command>svn import</command> et,
      plus loin dans le chapitre, la commande <command>svn add</command>,
      lorsque nous passerons en revue une journée typique avec
      Subversion.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.import">
      <title>svn import</title>

      <para>La commande <command>svn import</command> est un moyen
        rapide de copier une arborescence non-suivie en versions dans
        le dépôt, créant des dossiers intermédiaires si nécessaire.
        <command>svn import</command> ne nécessite pas de copie de
        travail et vos fichiers sont immédiatement propagés dans le
        dépôt. Ce moyen est utilisé essentiellement quand vous avez
        une arborescence dont vous voulez suivre les changements dans
        votre dépôt Subversion. Par exemple&nbsp;:</para>

      <screen>
$ svnadmin create /var/svn/nouveau-depot
$ svn import mon-arborescence file:///var/svn/nouveau-depot/un/projet \
             -m "Import initial"
Ajout         mon-arborescence/truc.c
Ajout         mon-arborescence/machin.c
Ajout         mon-arborescence/sous-repertoire
Ajout         mon-arborescence/sous-repertoire/bidule.h
</screen>

      <para>L'exemple précédent copie le contenu du dossier
        <filename>mon-arborescence</filename> dans le dossier
        <filename>un/projet</filename> dans le dépôt&nbsp;:</para>

      <screen>
$svn list file:///var/svn/nouveau-depot/un/projet
truc.c
machin.c
sous-repertoire/
</screen>

      <para>Notez qu'après la fin de l'import, l'arborescence
        d'origine n'est <emphasis>pas</emphasis> transformée en copie
        de travail. Pour commencer à travailler, vous devez extraire
        grâce à <command>svn checkout</command> une copie de travail
        toute fraîche de l'arborescence.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.layout">
      <title>Organisation conseillée de votre dépôt</title>

      <para>Bien que Subversion vous permette d'organiser votre dépôt
        de la manière dont vous le voulez, nous vous recommandons de
        créer un dossier appelé <filename>trunk</filename> pour stocker
        la <quote>ligne principale</quote> du développement, un autre
        dossier <filename>branches</filename> qui contiendra les
        copies alternatives (ou branches) et un dossier
        <filename>tags</filename> pour les versions étiquetées.
        Par exemple&nbsp;:</para>

      <screen>
$ svn list file:///var/svn/depot
/trunk
/branches
/tags
</screen>

      <para>Vous en apprendrez plus sur les étiquettes et les branches
        dans le <xref linkend="svn.branchmerge"/>. Pour plus de
        détails et pour voir comment gérer plusieurs projets,
        reportez-vous à <xref linkend="svn.branchmerge.maint.layout"/>,
        et à <xref linkend="svn.reposadmin.projects.chooselayout"/>
        pour en savoir plus sur les répertoires racines
        d'un projet.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
    <title>Extraction initiale</title>

    <para>En général, vous commencerez à utiliser un dépôt Subversion
      en faisant une <firstterm>extraction</firstterm> (<quote>checkout</quote>
      en anglais) de votre projet. Extraire un projet d'un dépôt crée
      sur votre ordinateur une <quote>copie de travail</quote> de ce
      projet. Cette copie contient la version <literal>HEAD</literal>
      (la dernière révision) du dépôt que vous indiquez dans la ligne
      de commande&nbsp;:</para>


    <screen>
$ svn checkout http://svn.apache.org/repos/asf/subversion/
A    subversion/trunk
A    subversion/trunk/NOTICE
A    subversion/trunk/LICENSE
A    subversion/trunk/Makefile.in
A    subversion/trunk/build.conf
&hellip;
Révision 8810 extraite.
</screen>

    <sidebar>
      <title>Qu'y a-t-il dans un
        <emphasis>nom</emphasis>&nbsp;?</title>

      <para>Subversion essaie au maximum de ne pas limiter le type de
        données que vous placez en suivi de versions. Le contenu
        des fichiers et les valeurs des propriétés sont stockés et
        transmis en tant que données binaires,
        <xref linkend="svn.advanced.props.special.mime-type"/> vous
        explique comment indiquer à Subversion que des opérations
        <quote>textuelles</quote> n'ont pas de sens pour un fichier
        particulier. Il existe toutefois quelques cas pour lesquels
        Subversion définit des limitations sur les informations
        qu'il stocke.</para>

      <para>Subversion gère en interne certaines parties des données au 
        format Unicode UTF-8, par exemple les noms de propriétés, les 
        noms de chemins et les messages de trace. Cela ne veut
        toutefois pas dire que toutes vos interactions avec Subversion
        doivent faire intervenir l'UTF-8. En règle générale, les
        clients Subversion vont gérer de façon transparente les
        conversions entre l'UTF-8 et le système de codage utilisé
        par votre ordinateur, si cela a un sens de faire une telle
        conversion (ce qui est le cas pour les codages les plus
        courants utilisés de nos jours).</para>

      <para>Dans les échanges WebDAV ainsi que dans des anciennes
        versions de certains fichiers de gestion interne de
        Subversion, les chemins sont utilisés en tant que valeurs
        d'attribut XML et les noms de propriétés en tant que noms
        de tags XML. Cela veut dire que les chemins ne peuvent
        contenir que des caractères XML&nbsp;(1.0) valides et que les
        noms de propriétés sont encore plus limités, ne pouvant
        contenir que des caractères ASCII. Subversion interdit
        également les caractères <literal>TAB</literal> (tabulation),
        <literal>CR</literal> et <literal>LF</literal>
        (caractères de fin de ligne) dans les noms de chemins pour
        empêcher les chemins d'être coupés en deux lors des
        comparaisons ou dans les sorties de commandes comme
        <command>svn log</command> ou
        <command>svn status</command>.</para>

      <para>Bien que cela fasse beaucoup de choses à se rappeler, ces 
        limitations sont rarement un problème en pratique. Tant que
        vos paramètres locaux sont compatibles avec UTF-8 et que vous
        n'utilisez pas de caractères de contrôle dans les chemins, vous
        ne devriez pas avoir de problème pour communiquer avec
        Subversion. Le client en ligne de commande apporte un peu
        d'aide supplémentaire&nbsp;: afin de créer des versions
        <quote>valides</quote> pour un usage interne, il banalise
        automatiquement, si nécessaire, les caractères illégaux
        contenus dans les chemins d'URL que vous tapez.</para>

    </sidebar>

    <para>Alors que l'exemple précédent extraie le répertoire de
      base <filename>trunk</filename>, vous pouvez tout aussi
      facilement extraire un sous-répertoire situé à n'importe quelle
      profondeur dans le dépôt en spécifiant le sous-répertoire dans
      l'URL d'extraction&nbsp;:</para>

    <screen>
$ svn checkout \
      http://svn.apache.org/repos/asf/subversion/trunk/subversion/tests/cmdline/
A    cmdline/cat_tests.py
A    cmdline/revert_tests.py
A    cmdline/entries_tests.py
A    cmdline/svneditor.bat
A    cmdline/import_tests.py
&hellip;
Révision 8810 extraite.
</screen>

    <para>Comme Subversion utilise le modèle copier-modifier-fusionner
      à la place du modèle verrouiller-modifier-libérer (voir
      <xref linkend="svn.basic.vsn-models"/>), vous pouvez commencer
      immédiatement à modifier les fichiers et les répertoires de
      votre copie de travail. Votre copie de travail n'est qu'un
      ensemble de fichiers et de répertoires comme les autres dans
      votre système. Vous pouvez y éditer des fichiers, la modifier,
      la déplacer, vous pouvez même supprimer toute votre copie de
      travail et l'oublier définitivement.</para>

      <warning>
        <para>Bien que votre copie de travail <quote>n'est qu'un
          ensemble de fichiers et de répertoires comme les autres
          dans votre système</quote>, vous pouvez éditer vos
          fichiers comme vous le voulez, mais vous devez signaler à
          Subversion <emphasis>toutes vos autres opérations</emphasis>.
          Par exemple, si vous voulez copier ou déplacer un élément
          dans votre copie de travail, vous devez utiliser
          <command>svn copy</command> ou <command>svn move</command>
          à la place des commandes de copie ou de déplacement fournies
          par votre système d'exploitation. Nous aborderons plus en
          détail ces commandes plus loin dans ce chapitre.</para>
      </warning>

    <para>À moins que vous ne soyez prêt à propager l'ajout d'un
      nouveau fichier ou d'un nouveau répertoire ou la modification
      d'un fichier ou répertoire existant, il n'est pas nécessaire
      d'informer davantage le serveur Subversion que vous avez fait
      quelque chose.</para>

    <sidebar>
      <title>À propos du répertoire .svn&nbsp;?</title>

      <para>Chaque répertoire dans une copie de travail contient une
        zone administrative, un sous-répertoire nommé
        <filename>.svn</filename>. Habituellement, les commandes
        d'affichage du contenu des répertoires ne font pas
        apparaître ce sous-répertoire, mais il s'agit tout de même
        d'un répertoire important. Quoique vous fassiez, ne supprimez
        ni ne changez rien dans la zone administrative&nbsp;! Subversion
        dépend d'elle pour gérer votre copie de travail.</para>

      <para>Si vous supprimez accidentellement le sous-répertoire
        <filename>.svn</filename>, la façon la plus facile de régler
        le problème est de supprimer entièrement le répertoire qui le
        contenait (via une suppression classique du système, pas un
        appel à <command>svn delete</command>), puis de lancer
        <userinput>svn update</userinput> depuis un répertoire parent.
        Le client Subversion téléchargera alors le répertoire que vous
        avez supprimé, en incluant également une nouvelle zone
        <filename>.svn</filename>.</para>
    </sidebar>

    <para>Certes, vous pouvez extraire une copie de travail avec l'URL
      du dépôt comme seul argument, mais vous pouvez également
      spécifier un répertoire après l'URL du dépôt. Cela place votre
      copie de travail dans le nouveau répertoire indiqué. 
      Par exemple&nbsp;:</para>

    <screen>
$  svn checkout http://svn.apache.org/repos/asf/subversion/trunk subv
A    subv/NOTICE
A    subv/LICENSE
A    subv/Makefile.in
A    subv/build.conf
&hellip;
Révision 8810 extraite.
</screen>

    <para>Ceci place votre copie de travail dans un répertoire nommé
      <literal>subv</literal> au lieu d'un répertoire nommé
      <literal>trunk</literal> comme nous l'avions fait précédemment.
      Le répertoire <literal>subv</literal> est créé s'il n'existait
      pas auparavant.</para>


    <sect2 id="svn.tour.initial.disabling-password-caching">
      <title>Interdiction de la mise en cache du mot de passe</title>

      <para>Lorsque vous réalisez une opération Subversion qui
        nécessite une authentification, Subversion met par défaut
        en cache sur le disque vos éléments d'authentification. Il
        fait cela par commodité, pour que vous ne soyez pas obligé de
        ré-entrer constamment votre mot de passe pour les opérations
        suivantes. Si la mise en cache des mots de passe Subversion
        vous dérange<footnote>
          <para>Bien sûr, cela ne vous inquiète pas outre mesure&nbsp;:
            d'abord parce que vous savez qu'on ne peut jamais rien
            effacer <emphasis>réellement</emphasis> avec Subversion,
            et ensuite parce que votre mot de passe Subversion n'est
            pas le même que les trois millions d'autres mots de passe
            que vous avez déjà, pas vrai&nbsp;? Pas vrai&nbsp;?</para>
        </footnote>,
        vous pouvez désactiver la mise en cache de façon permanente
        ou au cas par cas.</para>

      <para>Pour désactiver la mise en cache du mot de passe pour un
        appel donné d'une commande particulière, passez l'option
        <option>--no-auth-cache</option> sur la ligne de commande.
        Pour désactiver de façon permanente la mise en cache, vous
        pouvez ajouter la ligne <literal>store-passwords = no</literal>
        à votre fichier de configuration Subversion sur votre machine
        locale. Voir <xref
        linkend="svn.serverconfig.netmodel.credcache"/> pour plus de
        détails.</para>

    </sect2>

    <sect2 id="svn.tour.initial.different-user">
      <title>Authentification sous un autre nom</title>

      <para>Puisque Subversion met en cache par défaut les éléments
        d'authentification (à la fois le nom d'utilisateur et le mot
        de passe), il se souvient commodément de qui vous étiez la
        dernière fois que vous avez modifié votre copie de travail.
        Mais parfois, cela n'aide pas, en particulier si vous
        travaillez sur une copie de travail partagée, comme par exemple
        un répertoire de configuration système, ou le répertoire racine
        des documents d'un serveur Web. Dans ce cas, il suffit de
        passer l'option <option>--username</option> à la ligne de
        commande et Subversion essaie alors de vous authentifier en tant
        que cet utilisateur, vous demandant votre mot de passe si
        nécessaire.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
    <title>Cycle de travail de base</title>

    <para>Subversion dispose de nombreuses fonctionnalités, d'options,
      d'avertissements et de garde-fous. Mais dans une utilisation au
      jour le jour, vous n'utilisez qu'un petit nombre d'entre eux.
      Dans cette section, nous passons en revue l'utilisation
      quotidienne de Subversion.</para>

    <para>Le cycle de travail typique ressemble à ceci&nbsp;:</para>

    <orderedlist>
      <listitem>
        <para>Mettre à jour votre copie de travail.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
        </itemizedlist>

      </listitem>

      <listitem>
        <para>Faire des changements.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn add</command></para>
          </listitem>
          <listitem>
            <para><command>svn delete</command></para>
          </listitem>
          <listitem>
            <para><command>svn copy</command></para>
          </listitem>
          <listitem>
            <para><command>svn move</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Examiner les changements effectués.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn status</command></para>
          </listitem>
          <listitem>
            <para><command>svn diff</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Éventuellement annuler des changements.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn revert</command></para>
          </listitem>
        </itemizedlist>
      </listitem>


      <listitem>
        <para>Résoudre les conflits (fusionner les modifications).</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
          <listitem>
            <para><command>svn resolve</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Propager les changements.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn commit</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
      <title>Mettre à jour votre copie de travail</title>

      <para>Si vous travaillez en équipe sur un projet donné, vous
        voulez mettre à jour votre copie locale pour recevoir toutes
        les modifications qui ont pu être faites par les autres
        développeurs du projet depuis votre dernière mise à jour.
        Utilisez <command>svn update</command> pour synchroniser
        votre copie de travail avec la dernière version présente
        dans le dépôt&nbsp;:</para>

      <screen>
$ svn update
U  truc.c
U  machin.c
Actualisé à la révision 2.
</screen>

      <para>Dans cet exemple, il se trouve que quelqu'un a apporté
        des modifications à <filename>truc.c</filename> ainsi qu'à 
        <filename>machin.c</filename> depuis votre dernière mise à jour
        et Subversion vient de répercuter ces modifications dans votre 
        copie de travail.</para>

      <para>Lorsque le serveur envoie des modifications vers votre
        copie de travail via <command>svn update</command>, un code,
        sous forme de lettre, est affiché à coté de chaque élément
        pour vous permettre de savoir quelles actions Subversion
        a effectuées pour mettre votre copie de travail à jour.
        Pour en savoir plus sur le sens de ces lettres, exécutez
        <userinput>svn help update</userinput>.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
      <title>Apporter des modifications à votre copie de travail</title>

      <para>Vous pouvez à présent vous mettre au travail et apporter
        des modifications à votre copie de travail. Il est plus
        commode, habituellement, de démarrer par une modification
        (ou un ensemble de modifications) précise, comme par exemple
        écrire une nouvelle fonctionnalité, corriger un bogue,&nbsp;etc.
        Les commandes Subversion dont vous vous servez pour
        cela sont <command>svn add</command>,
        <command>svn delete</command>, <command>svn copy</command>
        et <command>svn mkdir</command>. Cependant, si vous ne faites
        qu'éditer des fichiers qui sont déjà dans Subversion, vous
        n'avez besoin d'aucune de ces commandes jusqu'à ce que vous
        propagiez vos modifications.</para>

      <para>Vous pouvez apporter deux types de modifications à votre
        copie de travail&nbsp;: des <firstterm>modifications de
        fichier</firstterm> et des <firstterm>modifications
        d'arborescence</firstterm>. Vous n'avez pas besoin de
        signaler à Subversion que vous allez modifier un fichier&nbsp;;
        faites vos changements en utilisant votre éditeur de texte,
        un logiciel de traitement de texte, un logiciel de graphisme,
        ou n'importe quel autre outil que vous utilisez d'habitude.
        Subversion détecte automatiquement quels fichiers ont été
        modifiés et, en plus, il traite les fichiers binaires tout
        aussi facilement et tout aussi efficacement que les fichiers
        textes. Pour les modifications d'arborescence, vous pouvez
        demander à Subversion de <quote>marquer</quote> les fichiers
        et répertoires afin de programmer leur suppression, ajout,
        copie ou renommage. Bien que ces modifications soient
        immédiatement répercutées sur votre copie de travail,
        aucun ajout et aucune suppression ne sera répercuté sur le
        dépôt avant que vous ne les propagiez.</para>

      <sidebar>
        <title>Gérer des liens symboliques</title>

        <para>Dans des environnements non-Windows, Subversion est
          capable de suivre en versions les fichiers de type
          <firstterm>lien symbolique</firstterm> (ou
          <quote>symlink</quote>). Un symlink est un fichier qui agit
          comme une sorte de référence transparente vers un autre
          objet du système de fichiers, permettant à des programmes
          de consulter et de modifier ces objets de façon indirecte
          en effectuant les opérations sur le symlink lui-même.</para>

        <para>Quand un symlink est propagé vers un dépôt Subversion,
          Subversion enregistre que ce fichier était en fait un
          symlink et note l'objet vers lequel il
          <quote>pointait</quote>. Quand ce symlink est extrait vers
          une autre copie de travail sur un système non-Windows,
          Subversion reconstruit un véritable lien symbolique, au
          niveau du système de fichiers, à partir du symlink
          enregistré. Mais ceci ne limite en aucune façon l'usage
          des copies de travail sur des systèmes tels que Windows,
          qui ne possèdent pas d'implémentation des symlinks. Sur
          de tels systèmes, Subversion se contente de créer un
          fichier texte ordinaire, qui contient le chemin vers
          lequel le symlink pointait à l'origine. Bien que ce fichier
          ne puisse être utilisé comme un symlink sur un système
          Windows, il n'empêche pas les utilisateurs de Windows
          d'effectuer leurs autres opérations Subversion.</para> </sidebar>

      <para>Voici un aperçu des cinq sous-commandes Subversion les plus
        utilisées pour faire des modifications sur 
        l'arborescence&nbsp;:</para>

      <variablelist>

        <varlistentry>
          <term><userinput>svn add truc</userinput></term>
          <listitem>
            <para>Marque le fichier, le répertoire ou le lien
              symbolique <filename>truc</filename> pour ajout. Lors
              de la prochaine propagation, <filename>truc</filename>
              devient un fils de son répertoire parent. Notez que
              si <filename>truc</filename> est un répertoire, tout ce
              qui se trouve à l'intérieur de <filename>truc</filename>
              est marqué pour ajout. Si vous ne désirez ajouter que
              <filename>truc</filename> lui-même, passez l'option
              <option>--depth empty</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn delete truc</userinput></term>
          <listitem>
            <para>Marque le fichier, le répertoire ou le lien
              symbolique <filename>truc</filename> pour suppression.
              Si <filename>truc</filename> est un fichier ou un lien,
              il est immédiatement supprimé de votre copie de travail.
              Si <filename>truc</filename> est un répertoire, il n'est
              pas supprimé, mais Subversion le marque pour suppression.
              Quand vous propagez vos modifications,
              <filename>truc</filename> est complètement supprimé de
              votre copie de travail et du dépôt.
              <footnote>
                <para>Bien sûr, rien n'est jamais totalement supprimé
                  du dépôt &mdash; seulement de la révision
                  <literal>HEAD</literal> du dépôt. Vous pouvez
                  récupérer tout ce que vous avez supprimé en
                  extrayant (ou en mettant à jour votre copie de
                  travail à) une révision précédente de celle dans
                  laquelle vous avez fait la suppression. Lisez
                  également <xref
                  linkend="svn.branchmerge.basicmerging.resurrect"
                  />.</para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn copy truc bidule</userinput></term>
          <listitem>
            <para>Crée un nouvel élément
              <filename>bidule</filename> par duplication de
              <filename>truc</filename> et marque automatiquement
              <filename>bidule</filename> pour ajout. Lorsque
              <filename>bidule</filename> est ajouté au dépôt, lors
              de la prochaine propagation, son historique est
              enregistré (comme ayant été créé à partir de
              <filename>truc</filename>). <command>svn copy</command>
              ne crée pas de répertoires intermédiaires, à moins que
              vous ne lui passiez l'option
              <option>--parents</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn move truc bidule</userinput></term>
          <listitem>
            <para>Cette commande équivaut exactement à
            <userinput>svn copy truc bidule; svn delete
            truc</userinput>. C'est-à-dire que
            <filename>bidule</filename> est marqué pour ajout en tant
            que copie de <filename>truc</filename> et que
            <filename>truc</filename> est marqué pour suppression.
            <command>svn move</command> ne crée pas de répertoires
            intermédiaires, à moins que vous ne lui passiez
            l'option <option>--parents</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn mkdir blort</userinput></term>
          <listitem>
            <para>Cette commande équivaut exactement à
              <userinput>mkdir blort; svn add blort</userinput>.
              C'est-à-dire qu'un nouveau répertoire nommé
              <filename>blort</filename> est créé et marqué pour
              ajout.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
        <title>Modifier le dépôt sans copie de travail</title>

        <para>Dans <emphasis>certains</emphasis> cas, les
          modifications d'arborescence sont propagées immédiatement
          vers le dépôt. Cela n'arrive que quand une sous-commande
          opère directement sur une URL et non sur le chemin d'une
          copie de travail. En particulier, certains usages de
          <command>svn mkdir</command>, <command>svn copy</command>,
          <command>svn move</command> et <command>svn delete</command>
          peuvent fonctionner avec des URL (et n'oubliez pas que
          <command>svn import</command> agit toujours sur une
          URL).</para>

        <para>Les opérations sur les URL se comportent de cette
          manière parce que les commandes qui opèrent sur une copie
          de travail peuvent utiliser la copie de travail comme une
          sorte de <quote>zone de transit</quote> pour y préparer vos
          modifications avant de les propager vers le dépôt. Les
          commandes qui opèrent sur des URL ne disposent pas d'un
          tel luxe, donc quand vous opérez directement sur une URL,
          toute action mentionnée ci-dessus est propagée
          immédiatement.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
      <title>Examiner les changements apportés</title>

      <para>Une fois vos modifications apportées, vous devez les
        intégrer au dépôt. Avant de le faire, il est souvent utile de
        jeter un coup d'œil sur ces modifications pour savoir
        exactement ce que vous avez changé. En examinant
        les modifications avant de les intégrer au dépôt, le
        commentaire associé à la propagation sera souvent plus
        pertinent. Éventuellement, vous verrez que vous avez modifié
        un fichier par inadvertance et cela vous donne une chance
        de revenir sur ces modifications avant de les propager au
        dépôt. En outre, c'est une bonne occasion de passer en revue
        et d'examiner les modifications avant de les publier. Vous
        pouvez obtenir une vue d'ensemble des modifications que vous
        avez faites en utilisant <command>svn status</command> et
        voir le détail de ces changements en utilisant
        <command>svn diff</command>.</para>

      <sidebar>
        <title>Regardez ça&nbsp;: pas besoin de réseau&nbsp;!</title>

        <para>Vous pouvez utiliser les commandes
          <command>svn status</command>, <command>svn diff</command>,
          et <command>svn revert</command> sans aucun accès réseau
          même si votre dépôt <emphasis>est</emphasis> distant. C'est
          ainsi plus facile de gérer vos changements lorsque vous êtes
          isolé, dans un avion, dans un train de banlieue ou même sur
          la plage<footnote>
            <para>Et que vous n'avez pas de carte Wifi. Vous ne
              croyiez tout de même pas nous avoir aussi
              facilement&nbsp;?</para>
          </footnote>.
        </para>

        <para>En effet, Subversion garde en cache des copies privées
          des versions originales de chaque fichier suivi en version
          dans les zones administratives <filename>.svn</filename>.
          Cela lui permet d'afficher (et éventuellement d'annuler)
          les modifications faites localement à ces fichiers,
          <emphasis>sans le moindre accès réseau</emphasis>.
          Ce cache (appelé la <quote>base texte</quote>) permet
          également à Subversion, lors d'une propagation,
          de n'envoyer au dépôt,
          sous forme de <firstterm>delta</firstterm>,
          que les modifications (compressées) faites par
          l'utilisateur. Disposer d'un tel cache est un énorme
          avantage, même dans le cas d'une connexion Internet haut
          débit, car il est beaucoup plus rapide d'envoyer des
          différences sur un fichier plutôt que l'ensemble du fichier
          au serveur.</para>

      </sidebar>

      <para>Subversion a été optimisé pour vous aider dans cette
        tâche et il est capable de faire beaucoup de choses sans
        communiquer avec le dépôt. En particulier, votre copie de
        travail conserve, dans le répertoire <filename>.svn</filename>,
        la <quote>copie</quote> de l'original de chaque fichier suivi
        en versions. C'est pour ça que Subversion peut vous indiquer
        rapidement en quoi vos fichiers ont changé, ou même vous
        permettre d'annuler vos changements sans contacter
        le dépôt.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.status">
        <title>Avoir une vue d'ensemble des changements
          effectués</title>

        <para>Pour avoir une vue d'ensemble des changements que vous
          avez effectués, utilisez la commande
          <command>svn status</command>. C'est certainement la
          commande que vous utiliserez le plus.</para>

        <sidebar>
          <title>Utilisateurs de CVS&nbsp;: attention à la commande
            update&nbsp;!</title>

          <para>Vous avez certainement l'habitude d'utiliser
            <command>cvs update</command> pour visualiser les
            changements que vous avez effectués sur votre copie de
            travail. <command>svn status</command> vous donne
            toutes les informations utiles à ce propos, sans accès au
            dépôt et sans incorporer les changements effectués par
            d'autres utilisateurs.</para>

          <para>Dans Subversion, <command>svn update</command> ne
            s'occupe que de la mise à jour&nbsp;: il met à jour votre copie
            de travail avec tous les changements propagés dans le
            dépôt depuis votre dernière mise à jour. Il faut vous
            débarrasser de l'habitude d'utiliser la commande
            <command>update</command> pour visualiser les
            modifications que vous avez effectuées sur votre copie
            de travail locale.</para>

        </sidebar>

        <para>Si vous lancez <command>svn status</command> sans
          argument à la racine de votre copie de travail, Subversion
          détecte toutes les modifications effectuées sur les
          fichiers et sur l'arborescence. Voici quelques exemples de
          codes que la commande <command>svn status</command> affiche
          (notez que le texte après <literal>#</literal> n'est pas
          affiché par <command>svn status</command>).</para>

        <screen>
?       gribouillage.c         # le fichier n'est pas suivi en versions
A       bazar/pognon/machin.h  # le fichier sera Ajouté
C       bazar/pognon/tas.c     # le fichier entre en Conflit
                                 avec une mise à jour
D       bazar/poisson.c        # le fichier sera supprimé
                                 (Deletion en anglais)
M       truc.c                 # le contenu de truc.c a subi
                                 des Modifications
</screen>

        <para>Dans ce format d'affichage, <command>svn status</command>
          affiche six colonnes de caractères, suivis par plusieurs
          espaces, suivis par un nom de fichier ou de répertoire. La
          première colonne indique le statut du fichier ou du
          répertoire et/ou son contenu. Les codes sont&nbsp;:</para>

        <variablelist>

          <varlistentry>
            <term><computeroutput>A      élément</computeroutput></term>
            <listitem>
              <para>Le fichier, répertoire ou lien symbolique
                <filename>élément</filename> est marqué pour ajout
                au dépôt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      élément</computeroutput></term>
            <listitem>

              <para>Le fichier <filename>élément</filename> est dans
              un état de conflit. C'est-à-dire que des modifications
              ont eu lieu dans le dépôt depuis votre dernière mise à
              jour et ces modifications interfèrent avec les
              modifications que vous avez effectuées sur votre copie
              de travail (et la mise à jour n'a pas résolu ce conflit).
              Vous devez résoudre ce conflit avant de propager vos
              changements vers le dépôt.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      élément</computeroutput></term>
            <listitem>
              <para>Le fichier, répertoire ou lien symbolique
                <filename>élément</filename> est marqué pour
                suppression (<quote>Deletion</quote> en
                anglais).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      élément</computeroutput></term>
            <listitem>
              <para>Le contenu du fichier <filename>élément</filename>
                a été modifié.</para>
            </listitem>
          </varlistentry>

        </variablelist>

        <para>Si vous spécifiez un chemin à
          <command>svn status</command>, vous obtenez uniquement
          les informations relatives à ce chemin&nbsp;:</para>

        <screen>
$ svn status bazar/poisson.c
D      bazar/poisson.c
</screen>

        <para><command>svn status</command> possède aussi une option
          <option>--verbose</option> (<option>-v</option>) pour le
          rendre plus verbeux&nbsp;: il affiche alors le statut de
          <emphasis>tous</emphasis> les éléments de votre copie de
          travail, même ceux qui n'ont pas subi de
          modification&nbsp;:</para>

        <screen>
$ svn status -v
M               44        23    sally     LISEZMOI
                44        30    sally     INSTALL
M               44        20    harry     truc.c
                44        18    ira       bazar
                44        35    harry     bazar/truite.c
D               44        19    ira       bazar/poisson.c
                44        21    sally     bazar/divers
A                0         ?     ?        bazar/divers/machin.h
                44        36    harry     bazar/divers/bidule.c
</screen>

        <para>C'est la <quote>version longue</quote> de l'affichage
          de <command>svn status</command>. Les lettres de la première
          colonne ont la même signification que précédemment, mais la
          deuxième colonne indique le numéro de révision de travail
          de l'élément. Les troisième et quatrième colonnes indiquent
          le numéro de la révision dans laquelle a eu lieu le
          changement le plus récent et qui l'a effectué.</para>

        <para>Aucune des commandes citées ci-dessus n'induit de
          connexion vers le dépôt&nbsp;: elles comparent les métadonnées
          du répertoire <filename>.svn</filename> avec la copie de
          travail. Enfin, il y a l'option
          <option>--show-updates</option> (<option>-u</option>) qui
          effectue une connexion au dépôt et ajoute les informations
          sur les éléments périmés&nbsp;:</para>

        <screen>
$ svn status -u -v
M      *        44        23    sally     LISEZMOI
M               44        20    harry     truc.c
       *        44        35    harry     bazar/truite.c
D               44        19    ira       bazar/poisson.c
A                0         ?     ?        bazar/divers/machin.h
État par rapport à la révision   46
</screen>

        <para>Notez les deux astérisques&nbsp;: si vous lanciez la
          commande <command>svn update</command>, vous recevriez les
          changements relatifs à <filename>LISEZMOI</filename> et
          <filename>truite.c</filename>. Cela vous procure des
          informations particulièrement intéressantes&nbsp;: vous devez
          faire une mise à jour et récupérer les changements effectués
          sur <filename>LISEZMOI</filename> avant de propager les
          vôtres, sinon le dépôt rejettera votre propagation en la
          considérant comme périmée (le sujet est approfondi plus
          tard).</para>

          <para><command>svn status</command> peut afficher beaucoup
            plus d'informations sur les fichiers et répertoires de
            votre copie de travail que ce que nous venons de voir
            ici. Pour obtenir une description exhaustive de
            <command>svn status</command> et de ses modes d'affichage,
            reportez-vous à <xref
            linkend="svn.ref.svn.c.status"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.diff">
        <title>Voir en détail les modifications
          que vous avez effectuées</title>

        <para>La commande <command>svn diff</command> offre une autre
          façon d'examiner vos changements. Vous pouvez retrouver
          <emphasis>exactement</emphasis> ce que vous avez modifié
          en lançant la commande <userinput>svn diff</userinput> sans
          argument&nbsp;: elle affiche les changements au format
          <firstterm>diff unifié</firstterm>.</para>

        <screen>
$ svn diff
Index: truc.c
===================================================================
--- truc.c	(révision 3)
+++ truc.c	(copie de travail)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;
 int main(void) {
-  printf("Soixante-quatre tranches de fromage...\n");
+  printf("Soixante-cinq tranches de fromage...\n");
 return 0;
 }
Index: LISEZMOI
===================================================================
--- LISEZMOI	(révision 3)
+++ LISEZMOI	(copie de travail)
@@ -193,3 +193,4 @@
+Pense-bête : passer au pressing.
Index: bazar/poisson.c
===================================================================
--- bazar/poisson.c	(révision 1)
+++ bazar/poisson.c	(copie de travail)
-Bienvenue dans le fichier 'poisson'.
-Plus d'informations seront disponibles prochainement.
Index: bazar/divers/machin.h
==================================================================
--- bazar/divers/machin.h	(révision 8)
+++ bazar/divers/machin.h	(copie de travail)
+Voici un nouveau fichier pour
+écrire sur les machins.
</screen>

        <para>La commande <command>svn diff</command> produit ces
          lignes en comparant vos fichiers de travail aux copies
          <quote>originales</quote> en cache dans la zone
          <filename>.svn</filename>. Les fichiers marqués pour ajout
          sont affichés comme toute section de texte ajoutée,
          et les fichiers marqués pour suppression sont affichés
          comme toute section de texte supprimée.</para>

        <para>L'affichage est conforme au format diff unifié.
          C'est-à-dire que les lignes supprimées commencent par le
          signe <literal>-</literal> et que les lignes ajoutées
          commencent par le signe <literal>+</literal>.
          <command>svn diff</command> affiche également le nom du
          fichier et la localisation dans le fichier, à l'intention
          du programme <command>patch</command>. Vous pouvez ainsi
          créer des <quote>correctifs</quote> en redirigeant la
          sortie de <command>svn diff</command> vers un
          fichier&nbsp;:</para>

        <screen>
$ svn diff &gt; fichier-correctif
</screen>

        <para>Vous pouvez, par exemple, envoyer par mail le fichier
          correctif à un autre développeur pour relecture ou test
          avant de le propager vers le dépôt.</para>

        <para>Subversion utilise son propre moteur de calcul de
          différences, qui produit par défaut des résultats au format
          diff unifié. Si vous désirez obtenir les différences dans un
          autre format, spécifiez un programme de comparaison externe
          en utilisant l'option <option>--diff-cmd</option> et en
          fournissant les paramètres que vous voulez à l'aide de
          l'option <option>--extensions</option> (-<option>x</option>).
          Par exemple, pour obtenir les différences entre votre
          version locale du fichier et l'original de
          <filename>truc.c</filename> au format
          <quote>contexte</quote> et en ignorant la casse des
          caractères, vous pouvez lancer la commande
          <userinput>svn diff --diff-cmd /usr/bin/diff
          --extensions '-i' truc.c</userinput>.</para>

      </sect3>

    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.revert">
      <title>Annuler des changements sur la copie de travail</title>


      <para>Supposons qu'en examinant la sortie de
        <command>svn diff</command>, vous vous rendiez compte que
        tous les changements effectués sur un fichier donné sont
        erronés. Peut-être auriez-vous dû laisser le fichier tel
        quel, ou bien peut-être qu'il serait plus facile de reprendre
        les changements depuis le début.</para>

      <para>C'est l'occasion idéale pour utiliser
        <command>svn revert</command>&nbsp;:</para>

      <screen>
$ svn revert LISEZMOI
'LISEZMOI' réinitialisé
</screen>

      <para>Subversion ramène le fichier dans son état d'avant les
        modifications en le remplaçant par la copie de l'original
        stockée dans la zone <filename>.svn</filename>. Mais notez
        aussi que <command>svn revert</command> peut annuler
        <emphasis>n'importe quelle</emphasis> opération. Par
        exemple, vous pouvez décider que, après tout, vous ne
        voulez pas ajouter tel fichier&nbsp;:</para>

      <screen>
$ svn status truc
?      truc

$ svn add truc
A         truc

$ svn revert truc
'truc' réinitialisé

$ svn status truc
?      truc
</screen>

      <note>
        <para><userinput>svn revert
          <replaceable>element</replaceable></userinput> produit
          exactement le même effet qu'effacer
          <replaceable>element</replaceable> de votre copie de
          travail puis de lancer la commande
          <userinput>svn update -r BASE
          <replaceable>element</replaceable></userinput>.
          Toutefois, si vous voulez revenir à une version antérieure
          d'un fichier, <command>svn revert</command> a un
          comportement notablement différent&nbsp;: il n'a pas besoin de
          contacter le dépôt pour restaurer le fichier.</para>
      </note>

      <para>Ou que vous avez peut-être effacé un fichier par
        mégarde&nbsp;:</para>

      <screen>
$ svn status LISEZMOI

$ svn delete LISEZMOI
D         LISEZMOI

$ svn revert LISEZMOI
'LISEZMOI' réinitialisé

$ svn status LISEZMOI

</screen>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
      <title>Résoudre les conflits (fusionner des modifications)</title>

      <para>Nous avons déjà vu que <userinput>svn status -u</userinput>
        est capable de prévoir les conflits. Supposons que vous lanciez
        <userinput>svn update</userinput> et que le résultat suivant
        apparaisse&nbsp;:</para>

      <screen>
$ svn update
U  INSTALL
G  LISEZMOI
Conflit découvert dans 'machin.c'.
Sélectionner : (p) report, (df) diff complet, (e) édite,
        (h) aide pour plus d'options :
</screen>

      <para>Les codes <computeroutput>U</computeroutput> et
        <computeroutput>G</computeroutput> ne doivent pas vous
        inquiéter, les fichiers correspondants ayant absorbé sans
        problème les modifications venant du dépôt. Les fichiers notés
        <computeroutput>U</computeroutput>
        (pour <quote>Updated</quote>) ne contenaient aucun
        changement local mais ont été mis à jour à partir de
        changements présents dans le dépôt. Le
        <computeroutput>G</computeroutput> (pour <quote>merGed</quote>)
        signifie <firstterm>fusionné</firstterm>, ce qui veut dire que
        le fichier avait subi des changements localement et que les
        changements en provenance du dépôt ont pu être appliqués sans
        affecter les changements locaux.</para>

      <para>Mais les deux lignes suivantes font partie d'une
        fonctionnalité (apparue dans Subversion 1.5) appelée
        <firstterm>résolution interactive des conflits</firstterm>.
        Cela signifie que les changements du dépôt interfèrent avec
        les vôtres et que vous avez la possibilité de résoudre ce
        conflit. Les options les plus utilisées sont affichées, mais
        vous pouvez voir toutes les options possibles en tapant
        <userinput>h</userinput>&nbsp;:</para>

      <screen>
&hellip;
(p)  report        - marque ce conflit pour résolution ultérieure
(df) diff-complet  - montre toutes les différences du fichier fusionné
(e)  édite         - résout manuellement le conflit avec un éditeur
(r)  résolu        - utilise la version fusionnée
(mf) mien complet  - utilise ma version (ignore les autres éditions)
(tf) autre complet - prends la version du dépôt (perds mes éditions)
(l)  lance         - utilise un outil externe pour résoudre le conflit
(h)  aide          - affiche cette liste
</screen>

      <para>Regardons brièvement ce que recèle chaque option avant
        de les détailler&nbsp;:</para>

      <variablelist>
        <varlistentry>
          <term><computeroutput>(p)  report</computeroutput></term>
          <listitem>

            <para>laisser le fichier en état de conflit, conflit que
              vous devrez résoudre après la fin de la mise à
              jour.</para>

          </listitem>
        </varlistentry>



        <varlistentry>
          <term><computeroutput>(df) diff-complet</computeroutput></term>
          <listitem>

            <para>afficher les différences entre la révision de base
              et le fichier en conflit au format diff unifié.</para>

          </listitem>
        </varlistentry>


        <varlistentry>
          <term><computeroutput>(e)  édite</computeroutput></term>
          <listitem>

            <para>ouvrir le fichier en conflit avec votre éditeur de
              texte favori, qui est spécifié dans la variable
              d'environnement <literal>EDITOR</literal>.</para>

          </listitem>
        </varlistentry>


        <varlistentry>
          <term><computeroutput>(r)  résolu</computeroutput></term>
          <listitem>

            <para>après édition du fichier, indiquer à Subversion que
              vous avez résolu les conflits à l'intérieur du fichier
              et qu'il doit accepter son contenu actuel&nbsp;; en bref,
              vous avez <quote>résolu</quote> le conflit.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(mf) mien complet</computeroutput></term>
          <listitem>

            <para>ignorer les changements envoyés par le serveur et
              utiliser uniquement votre version locale pour le
              fichier concerné.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(tf) autre complet</computeroutput></term>
          <listitem>

            <para>ignorer vos changements sur le fichier concerné et
              utiliser la version envoyée par le serveur.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(l)  lance</computeroutput></term>
          <listitem>

            <para>lancer un programme externe pour résoudre le
            conflit. Ceci nécessite un peu de préparation en
            amont.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>(h)  aide</computeroutput></term>
          <listitem>

            <para>afficher la liste de toutes les commandes que vous
              pouvez utiliser dans la résolution interactive des
              conflits.</para>

          </listitem>
        </varlistentry>

      </variablelist>

      <para>Nous allons maintenant passer en revue chaque commande,
        en les classant par fonctionnalité.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.diff">

        <title>Voir les lignes en conflit de façon interactive</title>

        <para>Avant de décider comment résoudre un conflit de manière
          interactive, il est probable que vous vouliez examiner
          le détail des lignes en conflit. La commande
          <quote>diff</quote> (<userinput>d</userinput>)
          est faite pour ça&nbsp;:</para>

        <screen>
&hellip;
Sélectionner : (p) report, (df) diff-complet, (e) édite,
        (h) aide pour plus d'options : d
--- .svn/text-base/sandwich.txt.svn-base      mar. 11 déc. 2007, 21:33:57
+++ .svn/tmp/tempfile.32.tmp     mar. 11 déc. 2007, 21:34:33
@@ -1 +1,5 @@
-Achète-moi un sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mien
+Va chercher un hamburger.
+=======
+Apporte moi un taco !
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
&hellip;
</screen>

        <para>La première ligne du diff correspond à ce que contenait
          la copie de travail dans l'ancienne version (la révision
          <literal>BASE</literal>), la ligne suivante correspond
          à vos modifications et la dernière ligne contient les
          modifications reçues du serveur (la révision
          <literal>HEAD</literal> la plupart du temps). Une fois
          en possession de ces informations, vous êtes prêts pour
          la suite.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.resolve">

        <title>Résoudre les conflits en mode interactif</title>

        <para>Il y a quatre façons de résoudre un conflit avec
          l'interface interactive&nbsp;: deux d'entre elles vous
          permettent de fusionner et d'adapter les modifications de
          manière interactive, alors que les deux autres vous permettent
          simplement de choisir une version du fichier parmi celles
          proposées et de passer à la suite.</para>

        <para>Si vous désirez choisir une combinaison de vos
          modifications locales, vous pouvez utiliser la commande
          <quote>édite</quote> (<userinput>e</userinput>) pour
          modifier manuellement le fichier avec des marqueurs
          indiquant les conflits dans un éditeur de texte (déterminé
          par la valeur de la variable d'environnement
          <literal>EDITOR</literal>). L'édition manuelle de ce
          fichier avec votre éditeur préféré peut sembler quelque peu
          <quote>bas de gamme</quote> (voir
           <xref linkend="svn.tour.cycle.resolve.byhand"/>
           pour une description détaillée), c'est pourquoi certains
           préfèrent utiliser des outils graphiques plus évolués et
           spécialisés dans la fusion de documents.</para>

        <para>Pour utiliser un outil de fusion, vous devez soit
          configurer la variable d'environnement
          <literal>SVN_MERGE</literal>, soit définir l'option
          <literal>merge-tool-cmd</literal> dans votre fichier de
          configuration Subversion (voir
           <xref linkend="svn.advanced.confarea.opts"/> pour plus de
           détails). Subversion passera quatre arguments à l'outil de
           fusion&nbsp;: le fichier dans sa révision
           <literal>BASE</literal>, la version du fichier envoyée par
           le serveur lors de la mise à jour, une copie du fichier
           contenant vos propres modifications et une copie fusionnée
           du fichier (contenant des marqueurs de conflits). Si votre
           outil attend les arguments dans un ordre ou un format
           différents, vous devrez écrire un script de transformation
           que Subversion appellera. Après avoir édité le fichier, si
           vous êtes satisfait de vos changements, vous pouvez
           indiquer à Subversion que le fichier n'est plus en conflit
           en utilisant la commande <quote>résolu</quote>
           (<userinput>r</userinput>).</para>

          <!-- TODO(fitz): I think the above detail on the merge tool -->
          <!-- should probably be in ch07 -->

        <para>Si vous décidez qu'il n'y a pas lieu d'effectuer de
          fusion et si choisir l'une ou l'autre des versions
          proposées du fichier vous convient, vous pouvez soit opter
          pour vos changements (c'est-à-dire <quote>mien</quote>) en
          utilisant la commande <quote>mien complet</quote>
          (<userinput>mf</userinput>) ou opter pour la version des
          autres collaborateurs en utilisant la commande
          <quote>autre complet</quote>
          (<userinput>tf</userinput>).</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.pending">

        <title>Remettre à plus tard la résolution d'un conflit</title>

        <para>Le titre peut laisser penser à un paragraphe sur
          l'amélioration des relations conjugales, mais il s'agit bien
          toujours de Subversion, voyez plutôt. Si, lorsque vous
          effectuez une mise à jour, Subversion soulève un conflit
          que vous n'êtes pas prêt à résoudre, vous pouvez, fichier
          par fichier, taper <userinput>p</userinput>, pour remettre
          à plus tard la résolution du conflit. Si, lors de votre
          mise à jour, vous ne voulez résoudre aucun conflit, vous
          pouvez passer l'option <option>--non-interactive</option>
          à <command>svn update</command> et les fichiers en conflit
          seront automatiquement marqués
          <computeroutput>C</computeroutput>.</para>

        <para>Le <computeroutput>C</computeroutput> indique un
          conflit, c'est-à-dire que les changements sur le serveur
          interfèrent avec les vôtres et vous devez donc choisir
          manuellement entre les différentes modifications après la
          fin de la procédure de mise à jour. Quand vous repoussez à
          plus tard la résolution d'un conflit, Subversion va
          accomplir trois actions qui vous aideront à repérer et à
          résoudre ce conflit&nbsp;:</para>

        <itemizedlist>

          <listitem>
            <para>Subversion affiche un
              <computeroutput>C</computeroutput> pendant la mise à
              jour et enregistre que le fichier est dans un état de
              conflit.</para>
          </listitem>

          <listitem>
            <para>Si Subversion considère que le fichier peut être
              fusionné, il place dans le fichier des
              <firstterm>marqueurs de conflit</firstterm> (des
              chaînes de caractères spéciales qui dénotent les
              <quote>contours</quote> des conflits) pour mettre en
              exergue les zones de conflit (Subversion utilise la
              propriété <literal>svn:mime-type</literal> pour
              déterminer si un fichier peut subir une fusion
              contextuelle ligne par ligne&nbsp;; voir
              <xref linkend="svn.advanced.props.special.mime-type"/>
              pour en apprendre davantage).</para>
          </listitem>

          <listitem>
            <para>Pour chaque fichier en conflit, Subversion place
              trois fichiers supplémentaires non-suivis en versions
              dans votre copie de travail&nbsp;:</para>

            <variablelist>

              <varlistentry>
                <term><filename>nom_du_fichier.mine</filename></term>
                <listitem>
                  <para>C'est votre fichier tel qu'il était dans
                    votre copie de travail avant la mise à jour,
                    c'est-à-dire sans les marqueurs de conflits. Ce
                    fichier ne comporte que vos derniers changements
                    (si Subversion considère que le fichier ne peut
                    pas être fusionné, le fichier
                    <filename>.mine</filename> n'est pas créé, car il
                    serait identique à la version de travail).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>nom_du_fichier.r<replaceable>ANCIENNE_REVISION</replaceable>
                      </filename></term>
                <listitem>
                  <para>C'est le fichier tel qu'il était à la révision
                    <literal>BASE</literal>, avant la mise à jour de
                    votre copie de travail. C'est donc le fichier que
                    vous avez extrait avant de faire vos dernières
                    modifications.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>nom_du_fichier.r<replaceable>NOUVELLE_REVISION</replaceable>
                      </filename></term>
                <listitem>
                  <para>C'est le fichier que vous venez de recevoir du
                    serveur quand vous avez effectué la mise à jour.
                    Ce fichier correspond à la révision
                    <literal>HEAD</literal> du dépôt.</para>
                </listitem>
              </varlistentry>

            </variablelist>

            <para>Ici, <replaceable>ANCIENNE_REVISION</replaceable>
              est le numéro de révision du fichier dans votre
              répertoire <filename>.svn</filename> et
              <replaceable>NOUVELLE_REVISION</replaceable> est le
              numéro de révision de <literal>HEAD</literal> dans le
              dépôt.</para>
          </listitem>

        </itemizedlist>

        <para>Par exemple, Sally effectue un changement sur le
          fichier <filename>sandwich.txt</filename> mais elle ne
          propage pas immédiatement ses modifications. Pendant ce
          temps, Harry propage des changements sur ce même fichier.
          Sally met à jour sa copie de travail avant d'effectuer la
          propagation et un conflit apparaît, dont elle remet la
          résolution à plus tard&nbsp;:</para>

        <screen>
$ svn update
Conflit découvert dans 'sandwich.txt'.
Sélectionner : (p) report, (df) diff-complet, (e) édite,
        (h) aide pour plus d'options : d
C  sandwich.txt
Actualisé à la révision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>

        <para>À partir de là, Subversion n'autorisera
        <emphasis>pas</emphasis> Sally à propager le fichier
        <filename>sandwich.txt</filename> avant que les trois
        fichiers temporaires ne soient effacés&nbsp;:</para>

        <screen>
$ svn commit -m "Quelques petits ajouts"
svn: Échec de la propagation (commit), détails :
svn: Arrêt de la propagation : '/home/sally/travail-svn/sandwich.txt'
                               demeure en conflit
</screen>

        <para>Si vous avez remis à plus tard la résolution d'un
          conflit, vous devez le résoudre pour que Subversion vous
          autorise à propager vos changements. Vous pouvez le faire
          avec la commande <command>svn resolve</command> et l'option
          <option>--accept</option> suivie d'un argument.</para>

        <para>Si vous choisissez la version du fichier que vous avez
          extraite avant de faire vos changements, utilisez l'argument
          <replaceable>base</replaceable>.</para>

        <para>Si vous choisissez la version qui contient uniquement
          vos changements, utilisez l'argument
          <replaceable>mine-full</replaceable>.</para>

        <para>Si vous choisissez la version la plus récente venant du
          serveur (et donc abandonnez tous vos changements), utilisez
          l'argument <replaceable>theirs-full</replaceable>.</para>

        <para>Cependant, si vous comptez effectuer un mélange de vos
          modifications et des modifications rapatriées du serveur,
          fusionnez le fichier en conflit <quote>à la main</quote>
          (examinez et éditez les marqueurs de conflit dans le
          fichier) puis utilisez l'argument
          <replaceable>working</replaceable>.</para>

        <para><command>svn resolve</command> supprime les trois
          fichiers temporaires et retient la version du fichier
          que vous avez spécifié avec l'option
          <option>--accept</option>. Subversion considère dès lors
          que le fichier n'est plus dans un état
          de conflit&nbsp;:</para>

        <screen>
$ svn resolve --accept working sandwich.txt
Conflit sur 'sandwich.txt' résolu
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.byhand">
        <title>Résoudre les conflits à la main</title>

        <para>Résoudre les conflits à la main peut paraître quelque
          peu intimidant la première fois. Mais avec un peu de
          pratique, un enfant de cinq ans y arriverait.</para>

        <para>Prenons un exemple. Par manque de communication entre
          Sally (votre collaboratrice) et vous-même, vous éditez en
          même temps le fichier<filename> sandwich.txt</filename>.
          Sally propage ses changements et, quand vous mettez à jour
          votre copie de travail, un conflit apparaît, que vous devez
          résoudre en éditant <filename>sandwich.txt</filename>.
          Jetons un œil à ce fichier&nbsp;:</para>

        <screen>
$ cat sandwich.txt
Tranche de pain supérieure
Mayonnaise
Laitue
Tomate
Comté
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Saucisson
Mortadelle
Jambon
=======
Choucroute
Poulet rôti
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Moutarde
Tranche de pain inférieure
</screen>

        <para>Les suites de caractères inférieur-à 
          (<literal>&lt;</literal>), égal(<literal>=</literal>) ou
          supérieur-à (<literal>&gt;</literal>) sont des marqueurs de 
          conflit, il ne font pas
          partie des données elles-mêmes. Vous devrez en général vous
          assurer qu'elles ont disparu du fichier avant de propager
          vos modifications. Le texte entre les deux premiers
          marqueurs est constitué des modifications que vous avez
          apportées dans la zone de conflit&nbsp;:</para>

        <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Saucisson
Mortadelle
Jambon
=======
</screen>

        <para>Le texte entre le deuxième et le troisième marqueur est
          celui du fichier propagé par Sally&nbsp;:</para>

        <screen>
=======
Choucroute
Poulet rôti
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>

        <para>Normalement, vous n'allez pas juste supprimer les
          marqueurs et les changements effectués par Sally (elle sera
          affreusement déçue quand on lui apportera un sandwich
          différent de ce qu'elle a commandé). Vous décrochez donc le
          téléphone, ou vous traversez le bureau, pour expliquer à
          Sally qu'on ne met pas de choucroute dans un sandwich.
          <footnote>
            <para>Et si vous commandez ça, on vous chassera de la
            ville à coup de baguette rassie.</para>
          </footnote>
          Après vous être mis d'accord sur les changements à
          enregistrer, éditez votre fichier et enlevez les marqueurs
          de conflit.</para>

        <screen>
Tranche de pain supérieure
Mayonnaise
Laitue
Tomate
Comté
Saucisson
Mortadelle
Jambon
Moutarde
Tranche de pain inférieure
</screen>

        <para>Maintenant utilisez <command>svn resolve</command> et
          vous êtes paré pour propager vos changements&nbsp;:</para>

        <screen>
$ svn resolve --accept working sandwich.txt
Conflit sur 'sandwich.txt' résolu
$ svn commit -m "Va pour mon sandwich et au diable celui de Sally !"
</screen>

        <para>Notez que <command>svn resolve</command>, contrairement
          à la plupart des autres commandes que nous présentons dans
          ce chapitre, requiert que vous listiez explicitement les
          noms de tous les fichiers concernés. Dans tous les cas,
          soyez prudent et ne lancez <command>svn resolve</command>
          qu'une fois certain que vous avez résolu le conflit dans
          votre fichier (une fois les fichiers temporaires effacés,
          Subversion vous laisse propager le fichier même s'il
          contient toujours des marqueurs de conflit).</para>

        <para>Si jamais vous êtes perdu lors de l'édition du fichier
          en conflit, vous pouvez toujours consulter les trois
          fichiers que Subversion a créé pour vous dans votre copie
          de travail, y compris le fichier tel qu'il était avant que
          vous ne lanciez la mise à jour. Vous pouvez même utiliser
          un outil externe interactif spécialisé dans les fusions pour
          examiner ces trois fichiers.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.theirsfull">
        <title>Abandonner vos modifications au profit de la révision
          la plus récente</title>

        <para>Si vous faites face à un conflit et que vous décidez
          d'abandonner vos changements, vous pouvez lancer
          <userinput>svn resolve --accept theirs-full
          <replaceable>CHEMIN-DU-CONFLIT</replaceable></userinput>,
          et Subversion abandonne vos modifications et supprime
          les fichiers temporaires&nbsp;:</para>

       <screen>
$ svn update
Conflit découvert dans 'machin.c'.
Sélectionner : (p) report, (df) diff complet, (e) édite,
        (h) aide pour plus d'options :
C    sandwich.txt
Actualisé à la révision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Conflit sur 'sandwich.txt' résolu
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.revert">
        <title>Revenir en arrière&nbsp;: utiliser svn revert</title>

        <para>Si vous faites face à un conflit et qu'après examen
          de la situation, vous décidez d'abandonner vos changements
          et de repartir de zéro (peu importe en fait que ce soit
          après un conflit ou à n'importe quel autre moment),
          contentez-vous de revenir en arrière sur vos
          changements&nbsp;:</para>

        <screen>
$ svn revert sandwich.txt
'sandwich.txt' réinitialisé
$ ls sandwich.*
sandwich.txt
</screen>

        <para>Notez que quand vous revenez en arrière sur un fichier
          en conflit, vous n'avez pas besoin de lancer
          <command>svn resolve</command>.</para>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
      <title>Propager vos modifications</title>

      <para>Enfin&nbsp;! Vos modifications sont terminées, vous les avez
        fusionnées avec celles du serveur et vous êtes prêt à les
        propager vers le dépôt.</para>

      <para>La commande <command>svn commit</command> envoie vos
       changements au dépôt. Quand vous propagez un changement,
       vous devez l'accompagner d'un
       <firstterm>message de propagation</firstterm> qui décrit ce
       changement. Votre message est associé à la nouvelle révision
       que vous créez. Si votre message est bref, vous pouvez le passer
       en ligne de commande en utilisant l'option
       <option>--message</option> (ou <option>-m</option>)&nbsp;:</para>

      <screen>
$ svn commit -m "J'ai corrigé le nombre de tranches de fromage."
Envoi        sandwich.txt
Transmission des données .
Révision 3 propagée.
</screen>

      <para>Cependant, si vous avez rédigé votre message au fur et à
        mesure, vous souhaitez sûrement indiquer à Subversion de
        récupérer le message dans un fichier en lui donnant le nom
        du fichier avec l'option <option>--file</option>
        (<option>-F</option>)&nbsp;:</para>

      <screen>
$ svn commit -F message_de_propagation
Envoi        sandwich.txt
Transmission des données .
Révision 4 propagée.
</screen>

      <para>Si vous ne spécifiez
        ni l'option <option>--message</option>
        ni l'option <option>--file</option>, Subversion lance
        automatiquement votre éditeur de texte favori (voir les
        détails de <literal>editor-cmd</literal> dans
        <xref linkend="svn.advanced.confarea.opts.config"/>) pour
        que vous rédigiez le message de propagation.</para>

      <tip>
        <para>Si, au moment où vous rédigez votre message de
          propagation, vous décidez d'annuler la propagation, vous
          n'avez qu'à quitter l'éditeur de texte sans sauvegarder
          les changements. Si vous avez déjà sauvegardé le message,
          effacez le texte, sauvegardez à nouveau puis choisissez
          d'annuler&nbsp;:</para>

        <screen>
$ svn commit
Attente de Emacs...Fait

Entrée du journal non modifié ou non précisé
a)nnule, c)ontinue, e)dite
a
$
</screen>
      </tip>

      <para>Le dépôt ne sait pas si vos changements ont un sens ou
        pas (d'ailleurs, il s'en fiche)&nbsp;; il vérifie seulement que
        personne n'a modifié, pendant que vous aviez le dos tourné,
        un des fichiers que vous-même avez modifié. Si
        <emphasis>c'est le cas</emphasis>, la propagation toute
        entière échoue, affichant un message vous informant qu'un
        ou plusieurs de vos fichiers ne sont plus à jour&nbsp;:</para>

      <screen>
$ svn commit -m "Ajout d'une autre règle"
Envoi        regles.txt
svn: Echec de la propagation (commit), détails :
svn: Fichier '/regles.txt' obsolète
&hellip;
</screen>

      <para>Notez que le phrasé exact de ce message d'erreur
        dépend du protocole réseau et du serveur que vous utilisez,
        mais l'idée reste la même.</para>

      <para>Maintenant, vous devez lancer
        <userinput>svn update</userinput>, traiter les fusions ou
        conflits qui apparaissent et retenter une propagation.</para>

      <para>Nous en avons terminé avec le cycle d'utilisation de
        base de Subversion. Subversion offre beaucoup d'autres
        fonctionnalités pour gérer votre dépôt et votre copie de
        travail, mais l'utilisation quotidienne de Subversion ne
        requiert pratiquement que les commandes que nous venons de
        voir dans ce chapitre. Intéressons-nous quand même à quelques
        commandes supplémentaires utilisées relativement
        souvent.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
    <title>Utilisation de l'historique</title>

    <para>Votre dépôt Subversion est comme une machine à remonter le
      temps. Il garde une trace de tous les changements jamais
      propagés et permet de parcourir cet historique en examinant
      aussi bien les versions précédentes des fichiers et des
      répertoires que les métadonnées associées. D'une simple commande
      Subversion, vous pouvez extraire (ou restaurer) une copie de
      travail du dépôt tel qu'il était à n'importe quelle date ou
      numéro de révision passée. Cependant, vous voulez parfois
      juste <emphasis>sonder</emphasis> le passé sans y
      retourner.</para>

    <para>Plusieurs commandes renvoient des informations sur
      l'historique des données présentes dans le dépôt&nbsp;:</para>

      <variablelist>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
            <para>fournit beaucoup d'informations&nbsp;: les messages de
              propagation avec la date et l'auteur de la révision
              ainsi que les chemins qui ont été modifiés à chaque
              révision.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
            <para>affiche les détails, ligne par ligne, d'un
              changement donné.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
            <para>récupère le fichier tel qu'il existait à une
              révision donnée et l'affiche à l'écran.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
            <para>liste les fichiers contenus dans un répertoire à
              une révision donnée.</para>
          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
      <title>Affichage de l'historique</title>

      <para>Pour connaître l'historique d'un fichier ou d'un
        répertoire, utilisez la commande <command>svn log</command>.
        Elle affiche la liste des gens qui
        ont modifié le fichier ou le répertoire en question, le
        numéro de chaque révision où il a changé, l'heure et la date
        de cette révision et, s'il y en avait un, le message associé
        à la propagation&nbsp;:</para>

      <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | 2008-05-15 23:09:28 -0500 (jeu. 15 Mai 2008) | 1 ligne

Ajout des lignes include et correction du nombre de tranches de fromage.
------------------------------------------------------------------------
r2 | harry | 2008-05-14 18:43:15 -0500 (mer. 14 Mai 2008) | 3 lignes

Ajout des méthodes main().
------------------------------------------------------------------------
r1 | sally | 2008-05-10 19:50:31 -0500 (sam. 10 Mai 2008) | 1 ligne

Import initial
------------------------------------------------------------------------
</screen>

      <para>Notez que, par défaut, l'historique est affiché en ordre
        chronologique inverse. Si vous voulez afficher un intervalle
        de révisions donné dans un ordre particulier ou juste une
        seule révision, ajoutez l'option
        <option>--revision</option> (<option>-r</option>)&nbsp;:</para>

      <screen>
$ svn log -r 5:19    # affiche l'historique a partir de la révision 5
                     # jusqu'à la révision 19 dans l'ordre chronologique

$ svn log -r 19:5    # affiche l'historique à partir de la révision 5
                     # jusqu'à la révision 19 dans l'ordre
                     # chronologique inverse

$ svn log -r 8       # affiche l'historique de la révision 8
</screen>

      <para>Vous pouvez aussi afficher l'historique d'un fichier ou d'un
        répertoire particulier. Par exemple&nbsp;:</para>

      <screen>
$ svn log machin.c
&hellip;
$ svn log http://machin.com/svn/trunk/code/machin.c
&hellip;
</screen>

      <para>Ceci n'affiche le contenu de l'historique
        <emphasis>que</emphasis> pour les révisions dans lesquelles
        le fichier de travail (ou l'URL) a changé.</para>

      <sidebar>

        <title>Pourquoi svn log n'affiche-t-il pas ce que je viens
          de propager&nbsp;?</title>

        <para>Si vous effectuez une propagation puis tapez
          immédiatement <userinput>svn log</userinput> sans argument,
          vous remarquerez peut-être que votre propagation la plus
          récente est absente de l'historique obtenu. Ceci est dû à
          une combinaison de deux facteurs&nbsp;: la façon dont
          fonctionne <command>svn commit</command> et le fonctionnement
          par défaut de <command>svn log</command>. Tout d'abord, quand
          vous propagez des modifications vers le dépôt, Subversion
          ne récupère que la révision des fichiers (et répertoires)
          qu'il propage, donc le répertoire parent demeure
          généralement à l'ancienne révision (voir
          <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/>
          pour savoir pourquoi). La commande <command>svn log</command> 
          ne récupère ensuite par défaut que l'historique du répertoire
          à la révision actuelle et n'affiche donc pas les
          modifications propagées dernièrement. La solution à ce
          problème consiste soit à mettre à jour votre copie de
          travail soit à fournir explicitement à
          <command>svn log</command> un numéro de révision grâce
          à l'option <option>--revision</option>
          (<option>-r</option>).</para>


      </sidebar>

      <para>Si vous voulez obtenir plus d'informations sur un fichier
        ou un répertoire, svn log accepte également l'option
        <option>--verbose</option> (<option>-v</option>). Comme
        Subversion autorise les déplacements et les copies de
        répertoires et de fichiers, il est important de pouvoir
        tracer ces modifications de chemin dans le système de
        fichiers. Ainsi, en mode verbeux, <command>svn log</command>
        affiche la liste des déplacements au cours de la révision
        concernée&nbsp;:</para>

      <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2008-05-21 13:19:25 -0500 (mer. 21 Mai 2008) | 1 ligne
Chemins modifiés :
M /trunk/code/machin.c
M /trunk/code/bidule.h
A /trunk/code/doc/LISEZMOI

Machination du bidule.

------------------------------------------------------------------------
</screen>

      <para>
        <command>svn log</command> accepte aussi l'option
        <option>--quiet</option> (<option>-q</option>), qui permet
        de ne pas afficher le contenu du message de propagation. En
        combinaison avec <option>--verbose</option>,
        <command>svn log</command> n'affiche que les noms des
        fichiers qui ont changé.</para>

      <sidebar>
        <title>Pourquoi svn log me donne-t-il une réponse
          vide&nbsp;?</title>

        <para>Après un certain temps de pratique de Subversion,
          la plupart des utilisateurs sont confrontés à un
          affichage de ce genre&nbsp;:</para>

        <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>

        <para>Au premier abord, cela ressemble à une erreur. Mais
          rappelez-vous que chaque révision concerne l'ensemble du
          dépôt et que <command>svn log</command> n'opère que sur
          une arborescence à l'intérieur du dépôt. Si vous ne passez
          pas d'argument pour le chemin, Subversion utilise le
          répertoire courant par défaut. En conséquence, si vous êtes
          dans un sous-répertoire de votre copie de travail et que
          vous demandez à voir l'historique d'une révision pour
          laquelle aucun changement n'a eu lieu sur lesdits fichiers
          et répertoires, Subversion affiche un historique vierge.
          Si vous voulez connaître tous les changements relatifs à
          cette révision, invoquez <command>svn log</command> avec
          l'URL du répertoire racine de votre dépôt, par exemple
          <userinput>svn log -r 840076
          http://svn.apache.org/repos/asf/subversion/</userinput>.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
      <title>Détail des modifications passées</title>

      <para>Nous avons déjà vu la commande <command>svn diff</command>,
       qui affiche les différences entre fichiers au format diff
       unifié&nbsp;; nous l'avons utilisée pour afficher les
       modifications locales effectuées sur notre copie de travail
       avant de les propager vers le dépôt.</para>

      <para>En fait, il y a <emphasis>trois</emphasis> façons
        différentes d'utiliser<command> svn diff</command>&nbsp;:</para>

      <itemizedlist>

        <listitem>
          <para>Examiner des modifications locales.</para>
        </listitem>

        <listitem>
          <para>Comparer votre copie de travail au dépôt.</para>
        </listitem>

        <listitem>
          <para>Comparer des révisions du dépôt.</para>
        </listitem>

      </itemizedlist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.local">
        <title>Modifications locales</title>

        <para>Comme nous l'avons vu précédemment,
          <userinput>svn diff</userinput>, s'il est invoqué sans
          option, compare les fichiers de votre copie de travail à
          leurs versions <quote>originales</quote> gardées en cache
          dans la zone <filename>.svn</filename>&nbsp;:</para>

        <screen>
$ svn diff
Index: regles.txt
===================================================================
--- regles.txt	(révision 3)
+++ regles.txt	(copie de travail)
@@ -1,4 +1,5 @@
 Être attentif envers les autres
 Liberté = Responsabilité
 Tout dans la modération
-Mâcher la bouche ouverte
+Mâcher la bouche fermée
+Écouter quand les autres parlent
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.wcrepos">
        <title>Comparaison d'une copie de travail au dépôt</title>

        <para>Si un seul numéro de révision est fourni à l'option
          <option>--revision</option> (<option>-r</option>), votre
          copie de travail est comparée à la révision spécifiée du
          dépôt&nbsp;:</para>

        <screen>
$ svn diff -r 3 regles.txt
Index: regles.txt
===================================================================
--- regles.txt	(révision 3)
+++ regles.txt	(copie de travail)
@@ -1,4 +1,5 @@
 Être attentif envers les autres
 Liberté = Responsabilité
 Tout dans la modération
-Mâcher la bouche ouverte
+Mâcher la bouche fermée
+Écouter quand les autres parlent
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.reposrepos">
        <title>Comparaison de révisions du dépôt</title>

        <para>Si deux numéros de révision sont fournis à l'option
          <option>--revision</option> (<option>-r</option>), séparés
          par le caractère deux-points (<literal>:</literal>), les deux
          révisions sont directement comparées&nbsp;:</para>

        <screen>
$ svn diff -r 2:3 regles.txt
Index: regles.txt
===================================================================
--- regles.txt	(révision 2)
+++ regles.txt	(révision 3)
@@ -1,4 +1,4 @@
 Être attentif envers les autres
-Liberté = Glace Au Chocolat
+Liberté = Responsabilité
 Tout dans la modération
 Mâcher la bouche ouverte
$
</screen>

        <para>Une autre façon de comparer une révision à la
          précédente, plus conviviale, est d'utiliser l'option
          <option>--change</option> (<option>-c</option>)&nbsp;:</para>

        <screen>
$ svn diff -c 3 regles.txt
Index: regles.txt
===================================================================
--- regles.txt	(révision 2)
+++ regles.txt	(révision 3)
@@ -1,4 +1,4 @@
 Être attentif envers les autres
-Liberté = Glace Au Chocolat
+Liberté = Responsabilité
 Tout dans la modération
 Mâcher la bouche ouverte
$
</screen>

        <para>Enfin, vous pouvez comparer des révisions du dépôt même
          si vous n'avez pas de copie de travail en local sur votre
          ordinateur, simplement en incluant l'URL appropriée sur la
          ligne de commande&nbsp;:</para>

        <screen>
$ svn diff -c 5 http://svn.exemple.com/depot/exemple/trunk/texte/regles.txt
&hellip;
$
</screen>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.browsing">
      <title>Navigation dans le dépôt</title>

      <para>Grâce aux commandes <command>svn cat</command> et
        <command>svn list</command>, vous pouvez afficher des
        révisions variées des fichiers et répertoires sans changer
        la révision de votre copie de travail. En fait, vous n'avez
        même pas besoin d'avoir une copie de travail
        pour les utiliser.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.cat">
         <title>svn cat</title>


        <para>Si vous voulez examiner une version antérieure d'un
          fichier et pas nécessairement les différences entre deux
          fichiers, vous pouvez utiliser
          <command>svn cat</command>&nbsp;:</para>

        <screen>
$ svn cat -r 2 regles.txt
Être attentif envers les autres
Liberté = Glace Au Chocolat
Tout dans la modération
Mâcher la bouche ouverte
$
</screen>

        <para>Vous pouvez également rediriger la sortie de
          <command>svn cat</command> directement dans
          un fichier&nbsp;:</para>

        <screen>
$ svn cat -r 2 regles.txt > regles.txt.v2
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.list">
        <title>svn list</title>

        <para>La commande <command>svn list</command> liste les
          fichiers présents dans le dépôt sans pour autant
          les télécharger&nbsp;:</para>

        <screen>
$ svn list http://svn.apache.org/repos/asf/subversion/
README
branches/
developer-resources/
mk.xiv/
site/
svn-logos/
tags/
trunk/
</screen>

        <para>Si vous désirez une liste plus détaillée, passez
          l'option <option>--verbose</option> (<option>-v</option>)
          et vous obtenez alors quelque chose comme ceci&nbsp;:</para>

        <screen>
$ svn list -v http://svn.apache.org/repos/asf/subversion/
 904709 hwright               30 janv., 03:06 ./
 880872 cmpilato         5362 16 nov., 18:49 README
 904644 danielsh              29 janv., 23:05 branches/
 861356 lgo                   27 août 2006 developer-resources/
 868798 brane                 02 janv. 2008 mk.xiv/
 904663 cmpilato              30 janv., 00:19 site/
 863801 anonymou              02 sept. 2002 svn-logos/
 901971 cmpilato              22 janv., 04:39 tags/
 904709 hwright               30 janv., 03:06 trunk/
</screen>

        <para>Les colonnes vous indiquent la révision à laquelle le
          fichier ou le répertoire a été modifié pour la dernière
          fois, qui est l'auteur de ce changement, la taille du
          fichier si c'en est un, la date de dernière modification
          et le nom de l'élément.</para>

        <warning>
          <para>La commande <command>svn list</command> sans argument
          prend pour cible l'<emphasis>URL du dépôt</emphasis>
          correspondant au répertoire local en cours, pas le
          répertoire en cours de la copie de travail. Après tout, si
          vous voulez voir le contenu de votre répertoire local, vous
          pouvez utiliser <command>ls</command>, tout simplement
          (ou l'équivalent sur votre système non-Unix).</para>
        </warning>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.snapshots">
      <title>Anciennes versions d'un dépôt</title>

      <para>En plus de toutes les commandes citées précédemment, vous
        pouvez utiliser <command>svn update</command> et
        <command>svn checkout</command> avec l'option
        <option>--revision</option> pour ramener une copie de
        travail complète <quote>dans le passé</quote>&nbsp;:
        <footnote>
          <para>Vous voyez, on vous avait bien dit que Subversion
            était une machine à remonter le temps.</para>
        </footnote>
        </para>

      <screen>
$ svn checkout -r 1729 # extrait une nouvelle copie de travail
                       # à la révision r1729
&hellip;
$ svn update -r 1729 # met à jour une copie de travail existante
                     # à la révision r1729
&hellip;
</screen>

      <tip>
        <para>Beaucoup de nouveaux utilisateurs de Subversion
          essaient d'utiliser <command>svn update</command> comme
          dans l'exemple précédent pour annuler des changements
          propagés, mais ça ne marche pas, puisque vous ne pouvez
          pas propager des changements obtenus en ramenant à une
          vieille version une copie de travail, si les fichiers
          modifiés ont subi des modifications depuis. Voir
          <xref linkend="svn.branchmerge.basicmerging.resurrect"/>
          pour une description de la manière d'
          <quote>annuler</quote> une propagation.</para>
      </tip>

      <para>Enfin, si vous êtes en train de réaliser une version
        officielle et que vous voulez extraire vos fichiers de
        Subversion sans avoir ces satanés répertoires
        <filename>.svn</filename>, vous pouvez utiliser
        <command>svn export</command> pour créer une copie locale
        de tout ou partie de votre dépôt sans les répertoires
        <filename>.svn</filename>. De même que pour
        <command>svn update</command> et
        <command>svn checkout</command>, vous pouvez passer
        l'option <option>--revision</option> à
        <command>svn export</command>&nbsp;:</para>

      <screen>
$ svn export http://svn.exemple.com/svn/depot1 # Exporte la dernière révision
&hellip;
$ svn export http://svn.exemple.com/svn/depot1 -r 1729
# Exporte la révision r1729
&hellip;
</screen>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cleanup">
    <title>Parfois, il suffit de faire le ménage</title>

    <para>Maintenant que nous avons traité les tâches quotidiennes
      pour lesquelles vous utiliserez Subversion, nous allons passer
      en revue quelques tâches administratives liées à votre copie
      de travail.</para>


    <sect2 id="svn.tour.cleanup.disposal">

      <title>Se débarrasser d'une copie de travail</title>

      <para>Subversion ne conserve sur le serveur aucune trace de
        l'état ni de l'existence des copies de travail, il n'y a donc
        aucun impact côté serveur si des copies de travail traînent
        un peu partout. De la même façon, pas besoin de prévenir le
        serveur quand vous effacez une copie de travail.</para>

      <para>Si vous envisagez de réutiliser une copie de travail, ça
        ne pose aucun problème de la laisser sur le disque jusqu'à
        ce que vous soyez prêts à l'utiliser à nouveau et, le moment
        venu, il suffit de lancer <command>svn update</command> pour
        la mettre à jour et ainsi la rendre utilisable.</para>

      <para>Cependant, si vous êtes certain de ne plus utiliser une
        copie de travail, vous pouvez la supprimer entièrement, mais
        vous seriez bien inspirés d'y jeter un œil au cas où des
        fichiers non-suivis en versions s'y trouveraient encore.
        Pour trouver ces fichiers, lancez
        <userinput>svn status</userinput> et examinez tous les fichiers
        marqués d'un <literal>?</literal> pour vous assurer qu'ils ne
        sont d'aucune importance. Une fois cet examen terminé, vous
        pouvez supprimer votre copie de travail
        en toute sécurité.</para>

    </sect2>

    <sect2 id="svn.tour.cleanup.interruption">

      <title>Reprendre après une interruption</title>

      <para>Quand Subversion modifie votre copie de travail (ou
        toute information dans <filename>.svn</filename>), il essaie
        de le faire de la manière la plus sûre possible. Avant de
        modifier votre copie de travail, Subversion inscrit ses
        intentions dans un fichier de traces. Ensuite, il exécute
        les commandes du fichier de traces pour appliquer les
        modifications demandées, en plaçant un verrou sur la partie
        concernée de la copie de travail pendant cette opération
        (pour empêcher d'autres clients Subversion d'accéder à cette
        copie de travail au beau milieu des changements). Pour finir,
        Subversion supprime le fichier de traces. D'un point de vue
        architectural, c'est le même fonctionnement qu'un système de
        fichiers journalisé. Si une opération Subversion est
        interrompue (c'est-à-dire le processus est tué ou la machine
        plante), le fichier de traces reste sur le disque. En
        exécutant de nouveau le fichier de traces, Subversion peut
        terminer l'opération en cours et votre copie de travail
        retrouve un état cohérent.</para>

      <para>C'est exactement ce que fait la commande
        <command>svn cleanup</command>&nbsp;: elle trouve et exécute les
        fichiers de traces restant dans votre copie de travail, en
        enlevant les verrous au passage. Si un beau jour Subversion
        vous indique qu'une partie de votre copie de travail est
        verrouillée (<quote>locked</quote> en anglais), c'est la
        commande qu'il faut lancer. Par ailleurs,
        <command>svn status</command> affiche un
        <literal>L</literal> devant les éléments verrouillés&nbsp;:</para>

      <screen>
$ svn status
  L    un-repertoire
M      un-repertoire/machin.c

$ svn cleanup
$ svn status
M      un-repertoire/machin.c
</screen>

      <para>Ne confondez pas ces verrous agissant sur la copie de
        travail avec les verrous ordinaires que les utilisateurs de
        Subversion créent quand ils utilisent le modèle de gestion
        de versions parallèles verrouiller-modifier-libérer&nbsp;; voir
        l'encadré <xref linkend="svn.advanced.locking.meanings"/>
        pour des éclaircissements.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
    <title>Résumé</title>

      <para>Nous en avons maintenant terminé avec la plupart des
        commandes du client Subversion. Les exceptions notables
        concernent les branches et la fusion (voir le
        <xref linkend="svn.branchmerge"/>) ainsi que les propriétés (voir 
        le <xref linkend="svn.ref"/>). Cependant, prenez le temps de
        parcourir le <xref linkend="svn.ref"/> pour vous faire une
        idée de toutes les commandes de Subversion et de la manière
        dont vous pouvez les utiliser pour rendre votre travail
        plus convivial.</para>

  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
