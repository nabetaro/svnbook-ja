<chapter id="svn.intro">

  <!-- @ENGLISH {{{
  <title>Introduction</title>
  @ENGLISH }}} -->
  <title>Introduksjon</title>

  <simplesect>
    <!-- @ENGLISH {{{
    <para>Version control is the art of managing changes to
      information.  It has long been a critical tool for programmers,
      who typically spend their time making small changes to software
      and then undoing those changes the next day.  But the usefulness
      of version control software extends far beyond the bounds of the
      software development world.  Anywhere you can find people using
      computers to manage information that changes often, there is
      room for version control.  And that's where Subversion comes
      into play.</para>
    @ENGLISH }}} -->
    <para>Versjonskontroll er kunsten å behandle forandringer i 
      informasjon.
      Det har lenge vært et kritisk verktøy for programmerere, som 
      typisk nok bruker tiden sin på å gjøre små forandringer i 
      programvare og deretter forandrer det tilbake dagen etterpå.
      Men nyttigheten av versjonskontroll rekker langt forbi grensene 
      for programutviklingsverdenen.
      Alle steder du finner folk som bruker datamaskiner til å behandle 
      informasjon som forandrer seg ofte, der er det plass for 
      versjonskontroll.
      Og det er her Subversion kommer inn i bildet.</para>

    <!-- @ENGLISH {{{
    <para>This chapter contains a high-level introduction to
      Subversion&mdash;what it is; what it does; how to get it.</para>
    @ENGLISH }}} -->
    <para>Dette kapitlet inneholder en høytsvevende introduksjon til 
      Subversion – hva det er, hva det gjør og hvordan få tak i 
      det.</para>

  </simplesect>



  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.install">

    <!-- @ENGLISH {{{
    <title>Installing Subversion</title>
    @ENGLISH }}} -->
    <title>Installering av Subversion</title>

    <!-- @ENGLISH {{{
    <para>Subversion is built on a portability layer called
      APR&mdash;the Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      as one of its network server programs, its dependence on APR
      <emphasis>does not</emphasis> mean that Apache is a required
      component.  APR is a standalone library useable by any
      application.  It does mean, however, that like Apache,
      Subversion clients and servers run on any operating system that
      the Apache httpd server runs on: Windows, Linux, all flavors of
      BSD, Mac OS X, Netware, and others.</para>
    @ENGLISH }}} -->
    <para>Subversion er bygget på et portabilitetslag kalt APR – 
      <foreignphrase>Apache Portable Runtime</foreignphrase>.
      APR-biblioteket inneholder alle grensesnitt som Subversion trenger 
      for å fungere på forskjellige operativsystemer: Diskaksess, 
      nettverkstilgang, styring av hukommelsen og så videre.
      Selv om Subversion er i stand til å bruke Apache som 
      nettverks&server;, fører <emphasis>ikke</emphasis> Subversions 
      APR-avhengighet til at Apache er en nødvendig komponent.
      APR er et selvstendig bibliotek som kan brukes av mange 
      programmer.
      Det det derimot betyr, er at Subversion skal kunne kjøre på alle 
      operativsystemer som Apache httpd-&the_server; kjører på:
      Windows, Linux, alle varianter av BSD, Mac OS X, Netware og 
      andre.</para>

    <!-- @ENGLISH {{{
    <para>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's website
      (<ulink url="http://subversion.tigris.org"/>) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion.</para>
    @ENGLISH }}} -->
    <para>Den letteste måten å få tak i Subversion er å hente en binær 
      pakke bygget for ditt operativsystem.
      Subversions hjemmeside (<ulink 
      url="http://subversion.tigris.org"/>) har ofte disse pakkene 
      tilgjengelig for nedlasting, lagt ut av frivillige.
      Denne plassen inneholder vanligvis grafiske installasjonspakker 
      for brukere av operativsystemer fra Microsoft.
      Hvis du kjører et Unix-lignende operativsystem, kan du bruke 
      systemets innebygde distribusjonssystem (RPM-filer, DEB-filer, 
      <quote>ports</quote>-treet, osv.) for å hente Subversion.</para>

    <!-- @ENGLISH {{{
    <para>Alternately, you can build Subversion directly from source
      code.  From the Subversion website, download the latest
      source-code release.  After unpacking it, follow the
      instructions in the <filename>INSTALL</filename> file to build
      it.  Note that a released source package contains everything you
      need to build a command-line client capable of talking to a
      remote repository (in particular, the apr, apr-util, and neon
      libraries).  But optional portions of Subversion have many other
      dependencies, such as Berkeley DB and possibly Apache httpd.  If
      you want to do a complete build, make sure you have all of the
      packages documented in the <filename>INSTALL</filename> file.
      If you plan to work on Subversion itself, you can use your
      client program to grab the latest, bleeding-edge source code.
      This is documented in <xref
      linkend="svn.developer.contrib.get-code"/>.</para>
    @ENGLISH }}} -->
    <para>Du kan også bygge Subversion direkte fra kildekode.
      Siste versjon av programmet kan hentes fra Subversions hjemmeside.
      Etter at du har pakket det ut, følg instruksjonene i fila 
      <filename>INSTALL</filename> for å kompilere den.
      Merk at en offentliggjort kildekodepakke inneholder alt du trenger 
      for å bygge en kommandolinjeklient i stand til å kommunisere med 
      et fjerntliggende depot (mer spesifikt, bibliotekene apr, apr-util 
      og neon).
      Men valgfrie deler av Subversion har mange andre avhengigheter, 
      som Berkeley DB og muligens Apache httpd.
      Hvis du vil foreta en komplett kompilering, vær sikker på at du 
      har alle pakkene dokumentert i <filename>INSTALL</filename>-fila.
      Hvis du planlegger å arbeide på selve Subversion, kan du bruke 
      svn-klienten din for å hente den siste rykende ferske kildekoden.
      Dette er dokumentert i <xref 
      linkend="svn.developer.contrib.get-code"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.quickstart">

    <!-- @ENGLISH {{{
    <title>A Quick Start</title>
    @ENGLISH }}} -->
    <title>En rask start</title>
    
    <!-- @ENGLISH {{{
    <para>Some people have trouble absorbing a new technology by
      reading the sort of <quote>top down</quote> approach provided by
      this book.  This section is a very short introduction to
      Subversion, and is designed to give <quote>bottom up</quote>
      learners a fighting chance.  If you prefer to learn by
      experimentation, the following demonstration will get you up and
      running.  Along the way, we give links to the relevant chapters
      of this book.</para>
    @ENGLISH }}} -->
    <para>Noen personer har problemer med å absorbere en ny teknologi 
      ved å lese dokumentasjon lagt ut etter et <quote>ovenfra og 
      ned</quote>-prinsipp som i denne boka.
      Denne seksjonen er en veldig kort introduksjon til Subversion, og 
      er ment å gi personer som lærer <quote>nedenfra og opp</quote> en 
      sjanse.
      Hvis du foretrekker å lære gjennom eksperimentering, vil den 
      følgende demonstrasjonen få deg i gang.
      Under gjennomgangen vil vi gi deg lenker til de relevante 
      kapitlene i denne boka.</para>

    <!-- @ENGLISH {{{
    <para>If you're new to the entire concept of version control or to
      the <quote>copy-modify-merge</quote> model used by both CVS and
      Subversion, then you should read <xref linkend="svn.basic"/>
      before going any further.</para>
    @ENGLISH }}} -->
    <para>Hvis du er ny innen hele konseptet med versjonskontroll eller 
      til <quote>kopier-rediger-flett</quote>-modellen brukt av både CVS 
      og Subversion, bør du lese <xref linkend="svn.basic"/> før du går 
      videre.</para>

    <note>
      <!-- @ENGLISH {{{
      <para>The following example assumes that you have
        <command>svn</command>, the Subversion command-line client,
        and <command>svnadmin</command>, the administrative tool,
        ready to go.  It also assumes you are using Subversion 1.2 or
        later (run <command>svn -&#64738;-version</command> to check.)</para>
      @ENGLISH }}} -->
      <para>Det følgende eksempelet forutsetter at du har 
        <command>svn</command>, kommandolinjeklienten, og 
        <command>svnadmin</command>, det administrative verktøyet, klar 
        til kjøring.
        Det forutsetter også at du bruker Subversion 1.2 eller senere 
        (kjør <command>svn --version</command> for å sjekke).</para>
    </note>

    <!-- @ENGLISH {{{
    <para>Subversion stores all versioned data in a central
      repository.  To begin, create a new repository:</para>
    @ENGLISH }}} -->
    <para>Subversion lagrer alle versjonerte data i et sentralt depot.
      For å begynne, lag et nytt depot:</para>

    <!-- @ENGLISH {{{
    <screen>
$ svnadmin create /path/to/repos
$ ls /path/to/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>
    @ENGLISH }}} -->
    <screen>
$ svnadmin create /sti/til/depot
$ ls /sti/til/depot
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>

    <!-- @ENGLISH {{{
    <para>This command creates a new directory
      <filename>/path/to/repos</filename> which contains a Subversion
      repository.  This new directory contains (among other things) a
      collection of database files.  You won't see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see
      <xref linkend="svn.reposadmin"/>.</para>
    @ENGLISH }}} -->
    <para>Denne kommandoen lager en ny katalog 
      <filename>/sti/til/depot</filename> som inneholder et 
      Subversiondepot.
      Denne nye katalogen inneholder (sammen med andre ting) en samling 
      databasefiler.
      Du vil ikke se dine versjonerte filer hvis du tar en kikk 
      innenfor.
      For mer informasjon om opprettelse og vedlikehold av depot, se 
      <xref linkend="svn.reposadmin"/>.</para>

    <!-- @ENGLISH {{{
    <para>Subversion has no concept of a <quote>project</quote>.  The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  The merits of each approach are discussed
      in <xref linkend="svn.reposadmin.projects.chooselayout"/>.
      Either way, the repository only manages files and directories,
      so it's up to humans to interpret particular directories
      as <quote>projects</quote>.  So while you might see references
      to projects throughout this book, keep in mind that we're only
      ever talking about some directory (or collection of directories)
      in the repository.</para>
    @ENGLISH }}} -->
    <para>Subversion har ikke noen oppfatning av et 
      <quote>prosjekt</quote>.
      Depotet er kun et virtuelt versjonert filsystem, et stort tre som 
      kan inneholde hva du vil.
      Noen administratorer foretrekker å lagre bare ett prosjekt i et 
      depot, andre foretrekker å lagre flere prosjekter i et depot ved å 
      plassere dem i egne kataloger.
      Fordeler og ulemper med hvert system diskuteres i <xref 
      linkend="svn.reposadmin.projects.chooselayout"/>.
      Uansett, depotet holder bare rede på filer og kataloger, så det er 
      opp til mennesker å se på spesielle kataloger som 
      <quote>prosjekter</quote>.
      Så selv om du ser referanser til prosjekter i denne boka, husk på 
      at vi bare snakker om en katalog (eller samling av kataloger) i 
      depotet.</para>

    <!-- @ENGLISH {{{
    <para>In this example, we assume that you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing them into a single directory
      called <filename>myproject</filename> (or whatever you wish).
      For reasons that will be clear later (see
      <xref linkend="svn.branchmerge"/>), your project's tree
      structure should contain three top-level directories
      named <filename>branches</filename>,
      <filename>tags</filename>, and
      <filename>trunk</filename>.  The <filename>trunk</filename>
      directory should contain all of your data,
      while <filename>branches</filename>
      and <filename>tags</filename> directories are empty:</para>
    @ENGLISH }}} -->
    <para>I dette eksempelet går vi ut i fra at du allerede har en form 
      for prosjekt (en samling av filer og kataloger) som du vil 
      importere inn i det nyopprettede Subversiondepotet ditt.
      Start med å organisere dem i en enkel katalog kalt 
      <filename>mittprosjekt</filename> eller noe annet, hvis du vil.
      På grunn av ting som bli avklart senere (se <xref 
      linkend="svn.branchmerge"/>), bør katalogstrukturen til prosjektet 
      inneholde tre kataloger på toppnivå som kalles 
      <filename>branches</filename>, <filename>tags</filename> og 
      <filename>trunk</filename>.
      <filename>trunk</filename>-katalogen inneholder alle dine data, 
      mens katalogene <filename>branches</filename> og 
      <filename>tags</filename> er tomme:</para>

    <!-- @ENGLISH {{{
    <screen>
/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     &hellip;
</screen>
    @ENGLISH }}} -->
    <screen>
/tmp/mittprosjekt/branches/
/tmp/mittprosjekt/tags/
/tmp/mittprosjekt/trunk/
                     foo.c
                     bar.c
                     Makefile
                     …
</screen>

    <!-- @ENGLISH {{{
    <para>The <filename>branches</filename>, <filename>tags</filename>,
      and <filename>trunk</filename> subdirectories aren't actually
      required by Subversion.  They're merely a popular convention
      that you'll most likely want to use later on.</para>
    @ENGLISH }}} -->
    <para>Katalogene <filename>branches</filename>, 
      <filename>tags</filename> og <filename>trunk</filename> er 
      egentlig ikke nødvendig for at Subversion skal fungere.
      Det er bare en utbredt konvensjonell måte å gjøre ting på som du 
      også sannsynligvis vil komme til å bruke.</para>

    <!-- @ENGLISH {{{
    <para>Once you have your tree of data ready to go, import it into
      the repository with the <command>svn import</command> command
      (see <xref linkend="svn.tour.other.import"/>):</para>
    @ENGLISH }}} -->
    <para>Når du har klargjort treet med data, importer det inn i 
      depotet med kommandoen <command>svn import</command> (se <xref 
      linkend="svn.tour.other.import"/>):</para>

    <!-- @ENGLISH {{{
    <screen>
$ svn import /tmp/myproject file:///path/to/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
&hellip;
Committed revision 1.
$ 
</screen>
    @ENGLISH }}} -->
    <screen>
$ svn import /tmp/mittprosjekt file:///sti/til/depot/mittprosjekt -m "Innledende import"
Legger til         /tmp/mittprosjekt/branches
Legger til         /tmp/mittprosjekt/tags
Legger til         /tmp/mittprosjekt/trunk
Legger til         /tmp/mittprosjekt/trunk/foo.c
Legger til         /tmp/mittprosjekt/trunk/bar.c
Legger til         /tmp/mittprosjekt/trunk/Makefile
…
La inn revisjon 1.
$ 
</screen>

    <!-- @ENGLISH {{{
    <para>Now the repository contains this tree of data.  As mentioned
      earlier, you won't see your files by directly peeking into the
      repository;  they're all stored within a database.  But the
      repository's imaginary filesystem now contains a top-level
      directory named <filename>myproject</filename>, which in turn
      contains your data.</para>
    @ENGLISH }}} -->
    <para>Nå inneholder depotet dette treet med data.
      Som nevnt tidligere, vil du ikke se filene dine ved å se direkte 
      inn i depotet; de er lagret i en database.
      Men depotets virtuelle filsystem inneholder nå en toppkatalog kalt 
      <filename>mittprosjekt</filename>, som igjen inneholder dine 
      data.</para>

    <!-- @ENGLISH {{{
    <para>Note that the original <filename>/tmp/myproject</filename>
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  In order to
      start manipulating repository data, you need to create a new
      <quote>working copy</quote> of the data, a sort of private
      workspace.  Ask Subversion to <quote>check out</quote> a working
      copy of the <filename>myproject/trunk</filename> directory in
      the repository:</para>
    @ENGLISH }}} -->
    <para>Legg merke til at den originale 
      <filename>/tmp/mittprosjekt</filename>-katalogen er uforandret, 
      Subversion kjenner ikke til den.
      (Faktisk kan du til og med slette denne katalogen hvis du ønsker 
      det.)
      For å starte med å manipulere dataene i depotet, må du lage en ny 
      <quote>arbeidskopi</quote> av dataene, et slags personlig 
      arbeidsområde.
      Be Subversion om å <quote>hente ut</quote> en arbeidskopi fra 
      katalogen <filename>mittprosjekt/trunk</filename> i 
      depotet:</para>

    <!-- @ENGLISH {{{
    <screen>
$ svn checkout file:///path/to/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
&hellip;
Checked out revision 1.
</screen>
    @ENGLISH }}} -->
    <screen>
$ svn checkout file:///sti/til/depot/mittprosjekt/trunk mittprosjekt
A  mittprosjekt/foo.c
A  mittprosjekt/bar.c
A  mittprosjekt/Makefile
…
Sjekket ut revisjon 1.
</screen>

    <!-- @ENGLISH {{{
    <para>Now you have a personal copy of part of the repository in a
      new directory named <filename>myproject</filename>.  You can edit
      the files in your working copy and then commit those changes
      back into the repository.</para>
    @ENGLISH }}} -->
    <para>Nå har du en personlig kopi av en del av depotet i en ny 
      katalog kalt <filename>mittprosjekt</filename>.
      Du kan redigere filene i arbeidskopien og deretter legge disse 
      forandringene inn i depotet.</para>

    <itemizedlist>
      <!-- @ENGLISH {{{
      <listitem>
        <para>Enter your working copy and edit a file's
          contents.</para>
      </listitem>
      <listitem>
        <para>Run <command>svn diff</command> to see unified diff
          output of your changes.</para>
      </listitem>
      <listitem>
        <para>Run <command>svn commit</command> to commit the new
          version of your file to the repository.</para>
      </listitem>
      <listitem>
        <para>Run <command>svn update</command> to bring your working
          copy <quote>up-to-date</quote> with the repository.</para>
      </listitem>
      @ENGLISH }}} -->
      <listitem>
        <para>Gå inn i arbeidskopien og rediger innholdet av en 
          fil.</para>
      </listitem>
      <listitem>
        <para>Kjør kommandoen <command>svn diff</command> for å se en 
          <foreignphrase>unified diff</foreignphrase> (forskjellsfil) 
          over forandringene dine.</para>
      </listitem>
      <listitem>
        <para>Kjør <command>svn commit</command> for å legge inn den nye 
          versjonen av fila di til depotet.</para>
      </listitem>
      <listitem>
        <para>Kjør <command>svn update</command> for å oppdatere 
          arbeidskopien din i forhold til depotet.</para>
      </listitem>
    </itemizedlist>

    <!-- @ENGLISH {{{
    <para>For a full tour of all the things you can do with your
      working copy, read <xref linkend="svn.tour"/>.</para>
    @ENGLISH }}} -->
    <para>For en full gjennomgang av tingene som du kan gjøre med 
      arbeidskopien din, les <xref linkend="svn.tour"/>.</para>

    <!-- @ENGLISH {{{
    <para>At this point, you have the option of making your repository
      available to others over a network.  See <xref
      linkend="svn.serverconfig"/> to learn about the different sorts of
      server processes available and how to configure them.</para>
    @ENGLISH }}} -->
    <para>Ved dette punktet har du valget å gjøre depotet ditt 
      tilgjengelig over et nettverk.
      Se <xref linkend="svn.serverconfig"/> for å lære om de 
      forskjellige &server;prosessene tilgjengelig og hvordan du setter 
      dem opp.</para>

  </sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
vim: set ft=svnbook :
-->
