<chapter id="svn.intro">

  <title>Introdução</title>

  <simplesect>
    <para>Controle de versão é a arte de gerenciar mudanças em
      informações. Ele tem sido uma ferramenta crítica para programadores,
      que tipicamente gastam seu tempo fazendo mudanças pequenas em software
      e então desfazendo essas mudanças no dia seguinte. Mas a utilidade
      do software de controle de versão se estende muito além dos limites do
      mundo do desenvolvimento de software. Em qualquer lugar que você encontrar
      pessoas usando computadores para gerenciar informações que mudam com
      freqüência, há espaço para controle de versão. E é aí que o Subversion
      entra em cena.</para>

    <para>Este capítulo contém uma introdução geral ao
      Subversion&mdash;o que ele é; o que faz; como obtê-lo.</para>

  </simplesect>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.whatis">

    <title>O que é Subversion?</title>
      
    <para>Subversion é um sistema de controle de versão livre/open-source.
      Isto é, Subversion gerencia arquivos e diretórios ao longo do tempo. Uma
      árvore de arquivos é colocada em um <firstterm>repositório</firstterm>
      central. O repositório se parece muito com um servidor de arquivos
      ordinário, exceto que ele se lembra de todas as mudanças
      feitas em seus arquivos e diretórios. Isso permite a você
      recuperar versões antigas dos seus dados, ou examinar o histórico de
      como seus dados foram alterados. Em relação a isso, muitas pessoas imaginam
      o sistema de controle de versão como sendo um tipo de <quote>máquina
      do tempo</quote>.</para>
    
    <para>O Subversion pode acessar seu repositório através da rede, o que
      permite que ele seja usado por pessoas em diferentes computadores. Até
      certo ponto, a habilidade de várias pessoas poderem modificar e gerenciar o
      mesmo conjunto de dados a partir de seus respectivos locais aumenta
      a colaboração. Progressos podem acontecer mais rapidamente sem necessitar
      de um único canal por onde todas as modificações devem ocorrer. E porque
      o trabalho é "versionado", você não precisa temer a perda de qualidade
      por causa da falta desse canal&mdash;se alguma mudança incorreta
      é feita nos dados, simplesmente desfaça essa mudança.</para>

    <para>Alguns sistemas de controle de versão também são sistemas de
      gerenciamento de configuração de software (SCM - <foreignphrase>Software
      Configuration Management</foreignphrase>). Esses sistemas são
      especificamente feitos para gerenciar árvores de código-fonte, e
      eles têm muitas características que são específicas para desenvolvimento
      de software&mdash;tais como entender nativamente linguages de
      programação, ou fornecer ferramentas para construir software. O
      Subversion, no entanto, não é um desses sistemas. Ele é um sistema
      genérico que pode ser usado para gerenciar <emphasis>qualquer</emphasis>
      coleção de arquivos. Para você, esses arquivos podem ser
      código-fonte&mdash;para outros, qualquer coisa desde lista de compra de
      alimentos até mixagens de vídeo digital.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.history">

    <title>História do Subversion</title>

    <para>No início do ano 2000, a CollabNet
      Inc. (<ulink url="http://www.collab.net"/>) começou a procurar
      desenvolvedores para escrever um substituto para o CVS. A CollabNet oferece
      uma suíte de software de colaboração chamada CollabNet Enterprise Edition
      (CEE)
      <footnote>
        <para>Há também uma oferta do CollabNet Team Edition (CTE)
          direcionado para grupos pequenos.</para>
      </footnote>
      do qual um dos componentes é o controle de versão. Embora
      o CEE usou o CVS inicialmente como seu sistema de controle de versão, as
      limitações do CVS eram óbvias desde o início, e a CollabNet sabia que
      eventualmente teria que encontrar algo melhor.
      Infelizmente, o CVS havia se tornado o padrão <foreignphrase>de
      facto</foreignphrase> no mundo open source, em grande parte
      porque <emphasis>não</emphasis> havia nada melhor, pelo menos
      não sob uma licença livre. Então a CollabNet decidiu
      escrever um novo sistema de controle de versão a partir do zero, retendo
      as idéias básicas do CVS, mas sem os seus bugs e suas características ruins.</para>

    <para>Em Fevereiro de 2000, eles contataram Karl Fogel, o autor de
      <citetitle>Open Source Development with CVS</citetitle>
      (Coriolis, 1999), e perguntaram se ele gostaria de trabalhar nesse novo
      projeto. Coincidentemente, na época Karl já estava
      discutindo um projeto para um novo sistema de controle de versão com seu
      amigo Jim Blandy. Em 1995, os dois abriram a Cyclic
      Software, uma empresa provendo contratos de suporte ao CVS, e
      embora mais tarde eles venderam o negócio, eles ainda usavam CVS todos
      os dias nos seus empregos. Suas frustrações com CVS levaram Jim a
      pensar cuidadosamente sobre melhores maneiras de gerenciar versões de dados,
      e ele já veio não só com o nome
      <quote>Subversion</quote>, mas também com o projeto básico do
      repositório Subversion. Quando a CollabNet chamou Karl, ele imediatamente
      aceitou trabalhar no projeto, e Jim conseguiu que a Red Hat Software,
      empresa onde trabalhava, essencialmente doasse ele ao projeto por um
      tempo indefinido de tempo. A CollabNet contratou Karl e Ben
      Collins-Sussman, e um trabalho detalhado começou em Maio. Com
      a ajuda de <!-- TODO: some well-placed prods --> de Brian Behlendorf e
      Jason Robbins da CollabNet, e Greg Stein (na época um
      desenvolvedor independente ativo no processo de especificação
      do WebDAV/DeltaV), o Subversion rapidamente atraiu uma comunidade de
      desenvolvedores ativos. Aconteceu que muitas pessoas tinham as mesmas
      experiências frustrantes com CVS e deram boas vindas à chance de
      finalmente fazer algo a respeito disso.</para>

    <para>O time do projeto original estabeleceu alguns objetivos simples. Eles
      não queriam ir além da metodologia de controle de versão existente,
      eles apenas desejavam consertar o CVS. Eles decidiram que o Subversion
      teria as mesmas características do CVS e preservaria o mesmo modelo
      de desenvolvimento, mas não duplicaria as falhas mais óbvias do CVS. E
      embora não precisasse ser um substituto <!-- TODO: drop-in --> para o CVS,
      ele deveria ser semelhante o suficiente para que qualquer usuário CVS
      pudesse fazer a troca com um pequeno esforço.</para>

    <para>Depois de quatorze meses de codificação, o Subversion se tornou
      <quote>auto-hospedável</quote> em 31 de Agosto de 2001. Ou seja,
      os desenvolvedores do Subversion pararam de usar o CVS para gerenciar
      o próprio código-fonte do Subversion e começar o usar o Subversion
      em seu lugar.</para>

    <para>Ainda que a CollabNet tenha começado o projeto e ainda financia uma
      grande parte do trabalho (ela paga os salários de alguns desenvolvedores
      Subversion de tempo integral), o Subversion funciona como muitos
      projetos open-source, governados por um conjunto liberal e transparente
      de regras que encorajam a meritocracia. A licença de direitos autorais
      da CollabNet obedece totalmente ao Debian Free Software Guidelines. Em
      outras palavras, qualquer um é livre para baixar, modificar e redistribuir
      o Subversion como quiser; nenhuma permissão da CollabNet ou de qualquer
      outra pessoa é requerida.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.features">

    <title>Características do Subversion</title>

    <para>Ao discutir as características que o Subversion traz para a
      mesa do controle de versão, é freqüentemente de grande ajuda falar sobre elas
      em termos de como elas melhoram o projeto do CVS. Se o CVS não é familiar
      para você, talvez você não compreenda algumas dessas características.
      E ainda se controle de versão não é familiar para você, talvez
      você não compreenda nenhuma delas a menos que você primeiramente leia o <xref
      linkend="svn.basic"/> no qual nós damos uma introdução amigável
      a controle de versão em geral.</para>

    <para>O Subversion oferece:</para>

    <variablelist>
      <varlistentry>
        <term>Controle de versão de diretórios</term>
        <listitem>
          <para>O CVS rastreia o histórico apenas de arquivos individuais, mas
            o Subversion implementa um sistema de arquivos <quote>virtual</quote>
            sob controle de versão que rastreia mudanças em árvores inteiras
            de diretório ao longo do tempo. Arquivos <emphasis>e</emphasis>
            diretórios têm controle de versão.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Verdadeiro histórico de versão</term>
        <listitem>
          <para>Por causa da limitação do CVS de controlar versões apenas
            de arquivos, operações tais como cópias e renomeações&mdash;que podem
            acontecer em arquivos, mas que são realmente mudanças no conteúdo de
            algum diretório&mdash;não são suportadas no CVS.
            Além disso, no CVS você não pode substituir um arquivo que está sob
            controle de versão com alguma coisa nova (talvez sem relação alguma)
            que tenha o mesmo nome sem que o novo item herde o histórico do arquivo
            antigo. Com Subversion, você pode adicionar, deletar, copiar e renomear
            ambos arquivos e diretórios. E cada arquivo novo adicionado inicia um
            novo histórico limpo e fresquinho.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Commits atômicos</term>
        <listitem>
          <para>Um conjunto de modificações ou vai completamente para o
            repositório ou absolutamente nada vai. Isso permite aos
            desenvolvedores construir e enviar alterações ao repositório
            em blocos lógicos e prevenir problemas que podem ocorrer quando apenas
            uma porção do conjunto de alterações é enviada ao repositório
            com sucesso.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Controle de versão de metadados</term>
        <listitem>
          <para>Cada arquivo e diretório tem um conjunto de
            propriedades&mdash;chaves e seus valores&mdash;associadas
            a ele. Você pode criar e armazenar qualquer par de chave e
            valor arbitrário que você quiser. Assim como acontece com
            conteúdo de arquivos, propriedades também têm controle
            de versão ao longo do tempo.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Escolha de camadas de rede</term>
        <listitem>
          <para>O Subversion tem uma noção abstraída de acesso
            a repositório, deixando fácil para as pessoas implementarem
            novos mecanismos de rede. O Subversion pode plugar no Apache
            HTTP Server como um módulo de extensão. Isso dá ao Subversion
            uma grande vantagem em estabilidade e interoperabilidade, e
            acesso instantâneo a características existentes providas pelo
            servidor&mdash;autenticação, autorização, compressão de dados,
            entre outras coisas. Também está disponível um servidor
            standalone mais leve. Esse servidor se comunica usando um
            protocolo customizado que pode ser facilmente tunelizado sobre
            SSH.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Manipulação consistente de dados</term>
        <listitem>
          <para>O Subversion expressa diferenças de arquivo usando um
            algoritmo binário de diferenciamento, que trabalha igualmente
            em arquivos texto (humanamente legíveis) e binário (humanamente
            ilegíveis). Ambos tipos de arquivo são comprimidos e armazenados
            da mesma forma no repositório, e as diferenças são transmitidas
            em ambas as direções pela rede.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Branching e tagging eficientes</term>
        <listitem>
          <para>O custo de branching e tagging não necessitam ser
            proporcionais ao tamanho do projeto. O Subversion cria
            branches e tags simplesmente copiando o projeto, usando
            um mecanismo similar ao hard-link. Logo, essas operações
            tomam apenas uma pequena e constante quantidade de tempo.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Hackabilidade</term>
        <listitem>
          <para>O Subversion não tem bagagem histórica; ele é
            implementado como uma coleção de bibliotecas C compartilhadas
            com APIs bem definidas. Isso torna o Subversion extremamente
            manutenível e utilizável por outras aplicações e
            linguagens.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.architecture">

    <title>Arquitetura do Subversion</title>

    <para><xref linkend="svn.intro.architecture.dia-1"/> ilustra o projeto
      do Subversion em uma perspectiva de alto nível.</para>
    
    <figure id="svn.intro.architecture.dia-1">
      <title>Arquitetura do Subversion</title>
      <graphic fileref="images/ch01dia1.png"/>
    </figure>

    <para>De um lado está um repositório do Subversion que contém todos
      os seus dados sob controle de versão. De outro lado está o seu
      programa cliente de Subversion, que gerencia reflexões locais de
      porções daqueles dados sob controle de versão (chamadas <quote>
      cópias de trabalho</quote>). Entre esses dois extremos estão
      múltiplas rotas por várias camadas de Acesso a Repositório (RA).
      Algumas dessas rotas passam por redes de computadores e por redes
      de servidores que então acessam o repositório. Outras não passam
      pela rede e acessam o repositório diretamente.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.install">

    <title>Instalando Subversion</title>

    <para>O Subversion é construído sobre uma camada de portabilidade chamada
      APR&mdash;a biblioteca Apache Portable Runtime. A biblioteca APR
      provê todas as interfaces que o Subversion necessita para funcionar em
      diferentes sistemas operacionais: acesso ao disco, acesso à rede, gerenciamento
      de memória, e assim por diante. Mesmo sendo o Subversion capaz de usar o Apache
      como um de seus programas de servidor de rede, sua dependência sobre a APR
      <emphasis>não</emphasis> significa que o Apache é um componente
      obrigatório. A APR é uma biblioteca standalone utilizável por qualquer
      aplicação. Isso significa, entretanto, que, assim como o Apache,
      os clientes e servidores de Subversion rodam em qualquer sistema operacional onde
      o servidor Apache httpd é capaz de rodar: Windows, Linux, todos os sabores de
      BSD, Mac OS X, Netware, entre outros.</para>

    <para>O modo mais fácil de obter o Subversion é baixando um pacote
      binário construído para o seu sistema operacional. O website do Subversion
      (<ulink url="http://subversion.tigris.org"/>) freqüentemente tem esses
      pacotes disponíveis para download, oferecidos por voluntários. O site
      geralmente contém pacotes de instaladores gráficos para usuários de
      sistemas operacionais Microsoft. Se você roda um clone do sistema operacional
      Unix, pode usar o seu sistema nativo de distribuição de pacotes
      (RPMs, DEBs, árvore de ports, etc.) para obter o Subversion.</para>

    <para>Alternativamente, você pode construir o Subversion diretamente do
      código-fonte. Baixe do website do Subversion o último pacote liberado
      de código-fonte. Após desempacotá-lo, siga as instruções do arquivo
      <filename>INSTALL</filename> para construí-lo.
      Note que um pacote liberado de código-fonte contém tudo o que você
      precisa (em particular, as bibliotecas apr, apr-util, e neon) para
      construir um cliente de linha de comando capaz de conversar com um
      repositório remoto. Mas porções opcionais do Subversion têm muitas outras
      dependências, tais como o Berkeley DB e possivelmente o Apache httpd. Se
      você que fazer uma construção completa, certifique-se de que você tem todos
      os pacotes que estão documentados no arquivo <filename>INSTALL</filename>.
      Se você planeja trabalhar no próprio Subversion, você pode usar o seu
      programa cliente para obter o código-fonte mais recente.
      Isso está documentado em <xref
      linkend="svn.developer.contrib.get-code"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.components">

    <title>Componentes do Subversion</title>
    
    <para>O Subversion, uma vez instalado, é composto por diversas partes.
      A seguir, está uma rápida visão geral do que você pode ter instalado.
      Não se preocupe se as breves descrições deixam você coçando a
      cabeça&mdash;há uma <emphasis>grande quantidade</emphasis> de páginas
      neste livro dedicadas a diminuir essa confusão.</para>
    
    <variablelist>
      <varlistentry>
        <term>svn</term>
        <listitem>
          <para>O programa cliente de linha de comando.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnversion</term>
        <listitem>
          <para>Um programa para reportar o estado (em termos de
            revisões dos itens presentes) de uma cópia de trabalho.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnlook</term>
        <listitem>
          <para>Uma ferramenta para inspecionar um repositório Subversion.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnadmin</term>
        <listitem>
          <para></para>
          <para>Uma ferramenta para criar, ajustar ou reparar um repositório
            Subversion.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svndumpfilter</term>
        <listitem>
          <para>Um programa para filtrar fluxos de dumps de repositório.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mod_dav_svn</term>
        <listitem>
          <para>Um módulo plug-in para o servidor Apache HTTP Server, usado para
            tornar o seu repositório disponível para outros através da
            rede.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>svnserve</term>
        <listitem>
          <para>Um programa servidor independente, que roda como um
            processo daemon ou é invocado por SSH; é outro modo de tornar
            seu repositório disponível para outros através da rede.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Supondo que você instalou o Subversion corretamente, você deve
      estar pronto para começar. Os próximos dois capítulos devem tratar
      do uso do <command>svn</command>, o programa cliente de linha de
      comando do Subversion.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.intro.quickstart">

    <title>Uma Introdução Rápida</title>
    
    <para>Algumas pessoas têm dificuldades em absorver uma nova tecnologia
      apenas lendo o tipo de abordagem <foreignphrase>top down</foreignphrase>
      apresentada por este livro. Esta seção é uma curta introdução ao Subversion,
      e é projetada para dar uma excelente chance aos aprendizes
      <foreignphrase>bottom up</foreignphrase>. Se você prefere aprender
      experimentando, a demonstração a seguir é justamente o que você procura.
      Ao longo do caminho, nós referenciamos os capítulos relevantes deste livro.</para>

    <para>Se você é novo ao conceito de controle de versão ou ao modelo
      <quote>copiar-modificar-fundir</quote> usado por ambos CVS e
      Subversion, então você deve ler <xref linkend="svn.basic"/>
      antes de continuar.</para>

    <note>
      <para>O seguinte exemplo pressupõe que você tem
        <command>svn</command>, que é o cliente de linha de comando
        do Subversion, e <command>svnadmin</command>, a ferramenta
        administrativa, instalados. Ele também pressupõe que você está
        usando Subversion 1.2 ou mais recente (execute
        <command>svn --version</command> para checar).</para>
    </note>

    <para>O Subversion armazena todos os dados sob controle de versão em
      um repositório central. Para começar, crie um novo repositório:</para>

    <screen>
$ svnadmin create /caminho/ao/repositório
$ ls /caminho/ao/repositório
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>

    <para>Esse comando cria um novo diretório
      <filename>/caminho/ao/repositório</filename> que contém um repositório
      Subversion. Esse novo diretório contém (entre outras coisas) uma
      coleção de arquivos de banco de dados. Você não verá seus arquivos
      sob controle de versão se você olhar dentro dele. Para mais informações
      sobre criação e manutenção de repositório, veja
      <xref linkend="svn.reposadmin"/>.</para>

    <para>O Subversion não tem um conceito de <quote>projeto</quote>.
      O repositório é apenas um sistema virtual de arquivos sob controle
      de versão, uma grande árvore que pode conter qualquer coisa que você
      quiser. Alguns administradores preferem armazenar apenas um projeto
      em um repositório, e outros preferem armazenar múltiplos projetos
      colocando-os em diretórios separados. Os méritos de cada abordagem
      são discutidos em <xref linkend="svn.reposadmin.projects.chooselayout"/>.
      Seja qual for a escolha, o repositório apenas gerencia arquivos e
      diretórios, e assim fica aos humanos o interpretar certos diretórios
      como sendo <quote>projetos</quote>. Mesmo você podendo encontrar
      referências a projetos ao longo deste livro, tenha em mente que 
      nós apenas estamos falando sobre algum diretório (ou coleção de
      diretórios) no repositório.</para>

    <para>Neste exemplo, nós presumimos que você já tem algum tipo de
      projeto (uma coleção de arquivos e diretórios) que você quer
      importar para dentro do seu recém-criado repositório Subversion.
      Comece organizando-os em um único diretório chamado
      <filename>meuprojeto</filename> (ou qualquer outra coisa).
      Por razões que serão esclarecidas adiante
      (veja <xref linkend="svn.branchmerge"/>), a estrutura de árvore
      do seu projeto deve conter três diretórios de primeiro nível
      chamados <filename>branches</filename>,
      <filename>tags</filename>, e
      <filename>trunk</filename>.  O diretório <filename>trunk</filename>
      deve conter todos os seus dados, enquanto que os diretórios
      <filename>branches</filename> e <filename>tags</filename> estão
      vazios:</para>

    <screen>
/tmp/meuprojeto/branches/
/tmp/meuprojeto/tags/
/tmp/meuprojeto/trunk/
                     foo.c
                     bar.c
                     Makefile
                     &hellip;
</screen>

    <para>Os subdiretórios <filename>branches</filename>, <filename>tags</filename>,
      e <filename>trunk</filename> não são requeridos pelo Subversion.
      Eles são meramente uma convenção popular que você muito provavelmente
      desejará usar mais tarde.</para>

    <para>Uma vez que você criou sua árvore de dados, importe-a para dentro
      do repositório com o comando <command>svn import</command>
      (veja <xref linkend="svn.tour.other.import"/>):</para>

    <screen>
$ svn import /tmp/meuprojeto file:///caminho/ao/repositorio/meuprojeto -m "Importação inicial"
Adicionando    /tmp/meuprojeto/branches
Adicionando    /tmp/meuprojeto/tags
Adicionando    /tmp/meuprojeto/trunk
Adicionando    /tmp/meuprojeto/trunk/foo.c
Adicionando    /tmp/meuprojeto/trunk/bar.c
Adicionando    /tmp/meuprojeto/trunk/Makefile
&hellip;
Commit da revisão 1.
$ 
</screen>

    <para>Agora o repositório contém essa árvore de dados. Como foi mencionado
      antes, você não verá seus arquivos se olhar diretamente dentro do
      repositório; eles estão armazenados em um banco de dados. Mas o sistema
      imáginário de arquivos do repositório agora contém um diretório de
      primeiro nível chamado <filename>meuprojeto</filename>, que por sua
      vez contém os seus dados.</para>

    <para>Note que o diretório original <filename>/tmp/meuprojeto</filename>
      está inalterado; o Subversion sabe disso. (De fato, você pode até
      mesmo deletar o diretório se quiser). Para começar a manipular os
      dados do repositório, você precisa criar uma nova <quote>cópia de
      trabalho</quote> dos dados, um tipo de área privada de trabalho.
      Peça ao Subversion para <quote>obter</quote> uma cópia de trabalho
      do diretório <filename>meuprojeto/trunk</filename> que está no
      repositório:</para>

    <screen>
$ svn checkout file:///caminho/ao/repositório/meuprojeto/trunk meuprojeto
A  meuprojeto/foo.c
A  meuprojeto/bar.c
A  meuprojeto/Makefile
&hellip;
Gerado cópia de trabalho para revisão 1.
</screen>

    <para>Agora você tem uma cópia pessoal de parte do seu repositório
      em um diretório chamado <filename>meuprojeto</filename>. Você pode
      editar os arquivos na sua cópia de trabalho e então enviar essas
      alterações ao repositório.</para>

    <itemizedlist>
      <listitem>
        <para>Entre na sua cópia de trabalho e edite o conteúdo de
          um arquivo.</para>
      </listitem>
      <listitem>
        <para>Execute <command>svn diff</command> para ver as suas
          alterações em formato <quote>unified diff</quote>.</para>
      </listitem>
      <listitem>
        <para>Execute <command>svn commit</command> para enviar a
          nova versão do seu arquivo ao repositório.</para>
      </listitem>
      <listitem>
        <para>Execute <command>svn update</command> para
          <quote>atualizar</quote> sua cópia de trabalho de acordo
          com o repositório.</para>
      </listitem>
    </itemizedlist>

    <para>Para um tour completo em todas as coisas que você pode fazer
      com sua cópia de trabalho, leia <xref linkend="svn.tour"/>.</para>

    <para>A esta altura, você tem a opção de tornar seu repositório
      disponível a outros através da rede. Veja <xref
      linkend="svn.serverconfig"/> para aprender sobre os diferentes tipos
      de processos de servidor disponíveis e como configurá-los.</para>

  </sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
