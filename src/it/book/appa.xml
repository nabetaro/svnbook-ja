<appendix id="svn.forcvs">
  <title>Subversion per utenti CVS</title>

  <simplesect>

    <para lang="en">This appendix is a guide for CVS users new to Subversion.
      It's essentially a list of differences between the two systems
      as <quote>viewed from 10,000 feet</quote>.  For each section, we
      provide backreferences to relevant chapters when
      possible.</para>

    <para>Questa appendice è una guida per utenti CVS nuovi a Subversion.
      È essenzialmente una lista di differenze tra i due sistemi
      come <quote>visto da 10.000 piedi</quote>.  Per ogni sezione, quando possibile,
      verranno fornite referenze a capitoli rilevanti antecedenti.</para>

    <para lang="en">Although the goal of Subversion is to take over the current
      and future CVS user base, some new features and design changes
      were required to fix certain <quote>broken</quote> behaviors
      that CVS had.  This means that, as a CVS user, you may need to
      break habits&mdash;ones that you forgot were odd to begin
      with.</para>

    <para>Anche se lo scopo di Subversion è quello di conquistare l'utenza base
      corrente e futura di CVS, alcune nuove caratteristiche e cambiamenti di disegno
      vennero richieste per aggiustare alcuni comportamenti <quote>errati</quote>
      di CVS.  Questo significa che, come utente CVS, si potrà aver bisogno di
      abbandonare certe abitudini&mdash;ones that you forgot were odd to begin
      with.</para>

  </simplesect>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.revnums">
    <title>Adesso i numeri di revisione sono differenti</title>

    <para lang="en">In CVS, revision numbers are per-file.  This is because CVS
      stores its data in RCS files; each file has a corresponding RCS
      file in the repository, and the repository is roughly laid out
      according to the structure of your project tree.</para>

    <para>In CVS, i numeri di revisione sono per file.  Questo perché CVS
      immagazzina i propri dati in file RCS; ogni file ha un corrispondente
      file RCS nel repository, e il repository è presentato approssimativamente
      in base alla struttura del proprio albero del progetto.</para>

    <para lang="en">In Subversion, the repository looks like a single
      filesystem.  Each commit results in an entirely new filesystem
      tree; in essence, the repository is an array of trees.  Each of
      these trees is labeled with a single revision number.  When
      someone talks about <quote>revision 54</quote>, they're talking
      about a particular tree (and indirectly, the way the filesystem
      looked after the 54th commit).</para>

    <para>In Subversion, il repository si presenta come un singolo
      filesystem.  Ogni commit risulta in un intero nuovo albero del
      filesystem; essenzialmente, il repository è un vettore di alberi.  Ognuno
      di questi alberi è etichettato con un singolo numero di revisione.  Quando
      qualcuno parla di <quote>revisione 54</quote>, sta parlando
      di un particolare albero (e indirettamente, del modo in cui il filesystem
      si presenta dopo il 54° commit).</para>

    <para lang="en">Technically, it's not valid to talk about <quote>revision 5
      of <filename>foo.c</filename></quote>.  Instead, one would say
      <quote><filename>foo.c</filename> as it appears in revision
      5</quote>.  Also, be careful when making assumptions about the
      evolution of a file.  In CVS, revisions 5 and 6 of
      <filename>foo.c</filename> are always different.  In Subversion,
      it's most likely that <filename>foo.c</filename> did
      <emphasis>not</emphasis> change between revisions 5 and
      6.</para>

    <para>Tecnicamente, non è corretto parlare di <quote>revisione 5
      di <filename>foo.c</filename></quote>.  Invece, si dovrebbe dire
      <quote><filename>foo.c</filename> come compare nella revisione
      5</quote>.  Inotre, occorre fare attenzione quando si fanno delle assunzioni
      circa l'evoluzione di un file.  In CVS, le revisioni 5 e 6 di
      <filename>foo.c</filename> sono sempre differenti.  In Subversion,
      è molto più facile che <filename>foo.c</filename>
      <emphasis>non</emphasis> sia cambiato tra le revisioni 5 e
      6.</para>

    <para lang="en">For more details on this topic, see <xref
      linkend="svn.basic.in-action.revs" />.</para>

    <para>Per ulteriori dettagli su questo argomento, vedere <xref
      linkend="svn.basic.in-action.revs" />.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.directories">
    <title>Versioni delle directory</title>

    <para lang="en">Subversion tracks tree structures, not just file contents.
      It's one of the biggest reasons Subversion was written to
      replace CVS.</para>

    <para>Subversion tiene conto delle strutture dell'albero, non solo del contenuto
      dei file. È uno dei motivi principali per cui Subversion è stato scritto per
      rimpiazzare CVS.</para>

    <para lang="en">Here's what this means to you, as a former CVS user:</para>

    <para>Questo è quello che significa per un precedente utente di CVS:</para>

    <itemizedlist>
      <listitem>
        <para lang="en">The <command>svn add</command> and <command>svn
          delete</command> commands work on directories now, just as
          they work on files.  So do <command>svn copy</command> and
          <command>svn move</command>.  However, these commands do
          <emphasis>not</emphasis> cause any kind of immediate change
          in the repository.  Instead, the working items are simply
          <quote>scheduled</quote> for addition or deletion.  No
          repository changes happen until you run <command>svn
          commit</command>.</para>

        <para>Adesso i comandi <command>svn add</command> e <command>svn
          delete</command> lavorano su directory, così come lavorano
          sui file.  Così come <command>svn copy</command> and
          <command>svn move</command>.  Comunque, questi comandi
          <emphasis>non</emphasis> causano nessun tipo di cambiamento immediato
          nel repository.  Invece, gli elementi di lavoro sono semplicemente
          <quote>pianificati</quote> per aggiunta o eliminazione.  Nessun
          cambiamento al repository viene effettuato fino a quando non si esegue
          <command>svn commit</command>.</para>
      </listitem>
      <listitem>
        <para lang="en">Directories aren't dumb containers anymore; they have
          revision numbers like files.  (Or more properly, it's
          correct to talk about <quote>directory
          <filename>foo/</filename> in revision 5</quote>.)</para>

        <para>Le directory non sono più degli sciocchi contenitori; hanno
          dei numeri di revisione come i file.  (O più propriamente, è corretto
          parlare di <quote>directory <filename>foo/</filename> nella revisione
          5</quote>.)</para>
      </listitem>
    </itemizedlist>

    <para lang="en">Let's talk more about that last point.  Directory versioning
      is a hard problem; because we want to allow mixed-revision
      working copies, there are some limitations on how far we can
      abuse this model.</para>

    <para>Parliamo maggiormente dell'ultimo punto.  Il versionamento delle
      directory è un duro problema; dato che si vogliono permettere copie di lavoro
      con revisioni miste, ci sono alcune limitazioni su quanto si possa abusare
      di questo modello.</para>

    <para lang="en">From a theoretical point of view, we define <quote>revision
      5 of directory <filename>foo</filename></quote> to mean a
      specific collection of directory-entries and properties.  Now
      suppose we start adding and removing files from
      <filename>foo</filename>, and then commit.  It would be a lie
      to say that we still have revision 5 of
      <filename>foo</filename>.  However, if we bumped
      <filename>foo</filename>'s revision number after the commit,
      that would be a lie too; there may be other changes to
      <filename>foo</filename> we haven't yet received, because we
      haven't updated yet.</para>

    <para>Da un punto di vista teorico, si definisce <quote>revisione
      5 della directory <filename>foo</filename></quote> 
      una collezione specifica di voci di directory e proprietà.  Adesso
      supponete di iniziare ad aggiungere e rimuovere file da
      <filename>foo</filename>, e poi fare il commit.  Sarebbe sbagliato
      dire che si ha ancora la revisione 5 di
      <filename>foo</filename>.  Comunque, se si modificasse
      il numero di revisione di <filename>foo</filename> dopo il commit,
      sarebbe uno sbaglio anche questo; ci possono essere altri cambiamenti a
      <filename>foo</filename> che ancora non sono stati ricevuti, perché non
      sono stati ancora aggiornati.</para>

    <para lang="en">Subversion deals with this problem by quietly tracking
      committed adds and deletes in the <filename>.svn</filename>
      area.  When you eventually run <command>svn update</command>,
      all accounts are settled with the repository, and the
      directory's new revision number is set correctly.
      <emphasis>Therefore, only after an update is it truly safe to
      say that you have a <quote>perfect</quote> revision of a
      directory.</emphasis> Most of the time, your working copy will
      contain <quote>imperfect</quote> directory revisions.</para>

    <para>Subversion affronta questo problema tenendo traccia silenziosamente
      delle aggiunte e delle eliminazioni di cui è stato fatto il commit
      nell'area <filename>.svn</filename>.
      Quando eventualmente si esegue <command>svn update</command>,
      tutti gli account sono impostati con il repository, e il nuovo numero di
      revisione della directory è impostato correttamente.
      <emphasis>Di conseguenza, solo dopo un aggiornamento è corretto dire che
      si ha una <quote>perfetta</quote> revisione di una
      directory.</emphasis> La maggior parte del tempo, la propria copia di
      lavoro conterrà revisioni <quote>non perfette</quote> della directory.</para>

    <para lang="en">Similarly, a problem arises if you attempt to commit
      property changes on a directory.  Normally, the commit would
      bump the working directory's local revision number.  But again,
      that would be a lie, because there may be adds or deletes that
      the directory doesn't yet have, because no update has happened.
      <emphasis>Therefore, you are not allowed to commit
      property-changes on a directory unless the directory is
      up-to-date.</emphasis></para>

    <para>Similmente, un problema si presenta se si tenta di fare il commit
      dei cambiamenti di proprietà di una directory.  Normalmente, il commit
      incrementerebbe il numero di revisione locale della directory di lavoro.
      Ma ancora, sarebbe sbagliato, perché ci possono essere aggiunte o eliminazioni
      che la directory ancora non ha, perché nessun aggiurnamento è accaduto.
      <emphasis>Di conseguenza, non è permesso fare il commit dei cambiamenti di
      proprietà su una directory a meno che la directory sia aggiornata.</emphasis></para>

    <para lang="en">For more discussion about the limitations of directory
      versioning, see <xref linkend="svn.basic.in-action.mixedrevs"/>.</para>

    <para>Per una maggiore discussione circa le limitazioni del versionamento
      delle directory, vedere <xref linkend="svn.basic.in-action.mixedrevs"/>.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.disconnected">
    <title>Più operazioni disconnessi</title>

    <para lang="en">In recent years, disk space has become outrageously cheap
      and abundant, but network bandwidth has not.  Therefore, the
      Subversion working copy has been optimized around the scarcer
      resource.</para>

    <para>Negli ultimi anni, la spazio disco è diventato enormemente economico
      e abbondante, ma non la quantità di banda di rete.  Di conseguenza, la copia
      di lavoro di Subversion è stata ottimizzata intorno alla scarsa risorsa.</para>

    <para lang="en">The <filename>.svn</filename> administrative directory
      serves the same purpose as the <filename>CVS</filename>
      directory, except that it also stores read-only,
      <quote>pristine</quote> copies of your files.  This allows you
      to do many things off-line:</para>

    <para>La directory amministrativa <filename>.svn</filename>
      serve allo stesso scopo della directory <filename>CVS</filename>,
      eccetto per il fatto che contiene copie <quote>di ripristino</quote>di 
      sola lettura dei propri file.  Questo permette di fare più cose fuori
      linea:</para>

    <variablelist>

      <varlistentry>
        <term><command>svn status</command></term>
        <listitem>
          <para lang="en">Shows you any local changes you've made (see <xref
            linkend="svn.tour.cycle.examine.status"/>)</para>

          <para>Mostra ogni cambiamento che è stato effettuato in locale (vedere <xref
            linkend="svn.tour.cycle.examine.status"/>)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command>svn diff</command></term>
        <listitem>
          <para lang="en">Shows you the details of your changes (see <xref
            linkend="svn.tour.cycle.examine.diff"/>)</para>

          <para>Mostra i dettagli dei cambiamenti (vedere <xref
            linkend="svn.tour.cycle.examine.diff"/>)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command>svn revert</command></term>
        <listitem>
          <para lang="en">Removes your local changes (see <xref
            linkend="svn.tour.cycle.examine.revert"/>)</para>

          <para>Rimuove i cambiamenti effettuati in locale (vedere <xref
            linkend="svn.tour.cycle.examine.revert"/>)</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para lang="en">Also, the cached pristine files allow the Subversion client
      to send differences when committing, which CVS cannot do.</para>

    <para>Inoltre, i file di ripristino nella cache permettono al client Subversion
      di inviare le differenze quando viene effettuato il commit, cosa che CVS non può fare.</para>

    <para lang="en">The last subcommand in the list is new; it will not only
      remove local changes, but it will un-schedule operations such as
      adds and deletes.  It's the preferred way to revert a file;
      running <command>rm file; svn update</command> will still work, but
      it blurs the purpose of updating.  And, while we're on this
      subject&hellip;

    </para>

    <para>L'ultimo sottocomando nella lista è nuovo; non rimuoverà solamente
      i cambiamenti locali, ma toglierà dalla pianificazione operazioni come
      aggiunte ed eliminazioni.  È il modo preferito per tornare indietro su un file;
      eseguendo <command>rm file; svn update</command> funzionerà ancora, ma
      offusca lo scopo dell'aggiornamento.  E, mentre si è in questo
      soggetto&hellip;

    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.status-vs-update">
    <title>Distinzione tra Stato e Aggiornamento</title>

    <para lang="en">In Subversion, we've tried to erase a lot of the confusion
      between the <command>cvs status</command> and
      <command>cvs update</command> commands.</para>

    <para>In Subversion, si è cercato di eliminare la grossa confusione
      tra i comandi <command>cvs status</command> e
      <command>cvs update</command>.</para>

    <para lang="en">The <command>cvs status</command> command has two purposes:
      first, to show the user any local modifications in the working
      copy, and second, to show the user which files are out-of-date.
      Unfortunately, because of CVS's hard-to-read status output, many
      CVS users don't take advantage of this command at all.  Instead,
      they've developed a habit of running <command>cvs
      update</command> or <command>cvs -n update</command> to quickly
      see their changes.  If users forget to use
      the <option>-n</option> option, this has the side effect of
      merging repository changes they may not be ready to deal
      with.</para>

    <para>Il comando <command>cvs status</command> ha due scopi:
      primo, mostrare all'utente ogni modifica locale nella copia di lavoro,
      e secondo, mostrare all'utente quali file sono non aggiornati.
      Sfortunatamente, dato che la visualizzazione di CVS è difficile da leggere, molti
      utenti CVS non ricevono affatto vantaggio da questo comando.  Invece,
      hanno sviluppato l'abitudine di eseguire <command>cvs
      update</command> o <command>cvs -n update</command> per vedere
      velocemente i loro cambiamenti.  Se gli utenti dimenticano di utilizzare 
      l'opzione <option>-n</option>, questo ha l'effetto secondario di fondere
      i cambiamenti del repository per i quali potrebbero non essere pronti
      ad occuparsi.</para>

    <para lang="en">With Subversion, we've tried to remove this muddle by making
      the output of <command>svn status</command> easy to read for
      both humans and parsers.  Also, <command>svn update</command>
      only prints information about files that are updated,
      <emphasis>not</emphasis> local modifications.</para>

    <para>Con Subversion, è stato provato a rimuovere questa confusione rendendo
      la visualizzazione di <command>svn status</command> facile da leggere sia per
      le persone che per i parser.  Inoltre, <command>svn update</command>
      visualizza solamente informazioni sui file che sono stati aggiornati,
      <emphasis>non</emphasis> le modifiche locali.</para>

    <sect2 id="svn.forcvs.status-vs-update.status">
      <title>Stato</title>

      <para lang="en"><command>svn status</command> prints all files that have
        local modifications.  By default, the repository is not
        contacted.  While this subcommand accepts a fair number of
        options, the following are the most commonly used ones:</para>

      <para><command>svn status</command> stampa tutti i file che hanno
        modifiche locali.  In modo predefinito, il repository non viene
        contattato.  Mentre questo sottocomando accetta un bel numero di opzioni,
        le seguenti sono quelle maggiormente utilizzate:</para>

      <variablelist>
        <varlistentry>
          <term><option>-u</option></term>
          <listitem>
            <para lang="en">Contact the repository to determine, and then display,
              out-of-dateness information.</para>

            <para>Contatta il repository per determinare, e poi mostrare,
              informazioni non aggiornate.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v</option></term>
          <listitem>
            <para lang="en">Show <emphasis>all</emphasis> entries under
              version control.</para>

            <para>Mostra <emphasis>tutte</emphasis> le voci sotto
              controllo di versione.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-N</option></term>
          <listitem>
            <para lang="en">Run non-recursively (do not descend into
              subdirectories).</para>

            <para>Esecuzione non ricorsiva (non discende all'interno
              delle sottodirectory).</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para lang="en">The <command>status</command> command has two output
        formats.  In the default <quote>short</quote> format, local
        modifications look like this:</para>

      <para>Il comando <command>status</command> ha due formati di visualizzazione.
        Nel formato <quote>corto</quote> predefinito, le modifiche locali
        si presentano così:</para>

      <screen>
$ svn status
M      foo.c
M      bar/baz.c
</screen>

      <para lang="en">If you specify the <option>--show-updates</option>
        (<option>-u</option>) switch, a longer output format is
        used:</para>

      <para>Se si specifica l'opzione <option>--show-updates</option>
        (<option>-u</option>), viene utilizzato un formato lungo:</para>

      <screen>
$ svn status -u
M            1047   foo.c
       *     1045   faces.html
       *            bloo.png
M            1050   bar/baz.c
Status against revision:   1066
</screen>

      <para lang="en">In this case, two new columns appear.  The second column
        contains an asterisk if the file or directory is out-of-date.
        The third column shows the working-copy's revision number of the
        item.  In the example above, the asterisk indicates that
        <filename>faces.html</filename> would be patched if we updated,
        and that <filename>bloo.png</filename> is a newly added file in
        the repository.  (The absence of any revision number next to
        <filename>bloo.png</filename> means that it doesn't yet exist in
        the working copy.)</para>

      <para>In questo caso, appaiono due nuove colonne.  La seconda colonna
        contiene un asterisco se il file o la directory non è aggiornata.
        La terza colonna mostra il numero di revisione della copia di lavoro
        dell'elemento.  Nell'esempio sopra, l'asterisco indica che
        <filename>faces.html</filename> dovrebbe essere modificato se lo aggiorniamo,
        e che <filename>bloo.png</filename> è un file aggiunto nuovo nel
        repository.  (L'assenza di ogni numero di revisione accanto a
        <filename>bloo.png</filename> significa che non esiste ancora nella
        copia di lavoro.)</para>

      <!-- ###TODO describe -v here as well as -uv. -u and -v use
           different <quote>long</quote> formats and need to be
           documented separately.  Moreover, as you can combine -u and
           -v, it needs to be explained what each of them does.  As -u is
           much more important than -v, and the example following that
           paragraph *is* about -u, not -v, my patch concentrated on
           that. -->

      <para lang="en">Lastly, here's a quick summary of the most common status codes that
        you may see:</para>

      <para>Infine, ecco qui un sommario veloce dei codici di stato più comuni
        che si possono vedere:</para>

      <screen>
A    Resource is scheduled for Addition
D    Resource is scheduled for Deletion
M    Resource has local Modifications
C    Resource has Conflicts (changes have not been completely merged
       between the repository and working copy version)
X    Resource is eXternal to this working copy (may come from another
       repository).  See <xref linkend="svn.advanced.props.special.externals" />
?    Resource is not under version control
!    Resource is missing or incomplete (removed by another tool than
       Subversion)
</screen>

      <screen lang="en">
A    Risorsa pianificata per aggiunta
D    Risorsa pianificata per eliminazione
M    Risorsa con modifiche locali
C    Risorsa con conflitti (i cambiamenti non sono stati completamenti fusi
       tra il repository e la versione della copia di lavoro)
X    Risorsa esterna a questa copia di lavoro (può provenire da un altro
       repository).  Vedere <xref linkend="svn.advanced.props.special.externals" />
?    Risorsa non sotto versione di controllo
!    Risorsa mancante o incompleta (rimossa da uno strumento diverso da
       Subversion)
</screen>

      <para lang="en">For a more detailed discussion of <command>svn
        status</command>, see <xref linkend="svn.tour.cycle.examine.status" />.</para>

      <para>Per una discussione maggiormente dettagliata su <command>svn
        status</command>, vedere <xref linkend="svn.tour.cycle.examine.status" />.</para>
    </sect2>

    <sect2 id="svn.forcvs.status-vs-update.update">
      <title>Update</title>

      <para lang="en"><command>svn update</command> updates your working copy,
        and only prints information about files that it updates.</para>

      <para><command>svn update</command> aggiorna la propria copia locale,
        e stampa informazioni solamente sui file che aggiorna.</para>

      <para lang="en">Subversion has combined the CVS <literal>P</literal> and
        <literal>U</literal> codes into just <literal>U</literal>.  When
        a merge or conflict occurs, Subversion simply prints
        <literal>G</literal> or <literal>C</literal>, rather than a
        whole sentence about it.</para>

      <para>Subversion ha unito i codici CVS <literal>P</literal> e
        <literal>U</literal> nel codice <literal>U</literal>.  Quando si verificano
        una unione o un conflitto, Subversion semplicemente stampa
        <literal>G</literal> o <literal>C</literal>, piuttosto che un'intera
        frase su di essi.</para>

      <para lang="en">For a more detailed discussion of <command>svn
        update</command>, see <xref linkend="svn.tour.cycle.update" />.</para>

      <para>Per una discussione maggiormente dettagliata su <command>svn
        update</command>, vedere <xref linkend="svn.tour.cycle.update" />.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.branches-and-tags">
    <title>Rami e tag</title>

    <para lang="en">Subversion doesn't distinguish between filesystem space and
      <quote>branch</quote> space; branches and tags are ordinary
      directories within the filesystem.  This is probably the single
      biggest mental hurdle a CVS user will need to climb.  Read all
      about it in <xref linkend="svn.branchmerge"/>.</para>

    <para>Subversion non fa distinzione tra lo spazio del filesystem e lo spazio
      <quote>rami</quote>; branch e tag sono directory ordinarie all'interno
      del filesystem.  Questa è probabilmente la più grande singola difficoltà
      che un utente CVS dovrà superare.  Si legga tutto riguardo a questo in
      <xref linkend="svn.branchmerge"/>.</para>

    <warning>
      <para lang="en">Since Subversion treats branches and tags as ordinary
        directories, always remember to check out the
        <literal>trunk</literal>
        (<literal>http://svn.example.com/repos/calc/trunk/</literal>)
        of your project, and not the project itself
        (<literal>http://svn.example.com/repos/calc/</literal>).  If
        you make the mistake of checking out the project itself,
        you'll wind up with a working copy that contains a copy of
        your project for every branch and tag you
        have.<footnote><para>That is, providing you don't run out of
        disk space before your checkout
        finishes.</para></footnote></para>

    <para>Poiché Subversion considera branch e tag come directory ordinarie,
        occorre ricordarsi sempre di fare il check out di <literal>trunk</literal>
        (<literal>http://svn.example.com/repos/calc/trunk/</literal>)
        del proprio progetto, e non del progetto stesso
        (<literal>http://svn.example.com/repos/calc/</literal>).
        Se si fa l'errore di tirar fuori il progetto stesso, si finirà con
        la copia di lavoro contenente una copia del progetto per ogni branch e tag.
        <footnote><para>Proprio così, ma solo se prima di finire il check out
        non si esaurisce lo spazio sul proprio disco fisso.</para></footnote></para>
    </warning>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.properties">
    <title>Metadati proprietà</title>

    <para lang="en">A new feature of Subversion is that you can attach arbitrary
      metadata (or <quote>properties</quote>) to files and
      directories.  Properties are arbitrary name/value pairs
      associated with files and directories in your working
      copy.</para>

    <para>Una nuova caratteristica di Subversion è che si possono allegare metadati
      arbitrari (o <quote>proprietà</quote>) ai file e alle
      directory.  Le proprietà sono coppie arbitrarie nome/valore
      associati con i file e le directory nella propria copia di lavoro.</para>

    <para lang="en">To set or get a property name, use the <command>svn
      propset</command> and <command>svn propget</command>
      subcommands.  To list all properties on an object, use
      <command>svn proplist</command>.</para>

    <para>Per impostare o vedere un nome di proprietà, utilizzare i sottocomandi
      <command>svn propset</command> e <command>svn propget</command>.
      Per vedere tutte le proprietà di un oggetto, utilizzare
      <command>svn proplist</command>.</para>

    <para lang="en">For more information, see <xref linkend="svn.advanced.props"/>.</para>

    <para>Per ulteriori informazioni, vedere <xref linkend="svn.advanced.props"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.conflicts">
    <title>Risoluzione dei conflitti</title>

    <para lang="en">CVS marks conflicts with in-line <quote>conflict
      markers</quote>, and prints a <literal>C</literal> during an
      update.  Historically, this has caused problems, because CVS
      isn't doing enough.  Many users forget about (or don't see) the
      <literal>C</literal> after it whizzes by on their terminal.
      They often forget that the conflict-markers are even present,
      and then accidentally commit files containing
      conflict-markers.</para>

    <para>CVS marca i conflitti con dei <quote>marcatori di conflitto</quote>
      in linea, e stampa una <literal>C</literal> durante un
      aggiornamento.  Storicamente, questo ha causato problemi, perché CVS
      non sta facendo abbastanza.  Molti utenti si dimenticano (o non vedono) la
      <literal>C</literal> dopo che è passata velocemente sul loro terminale.
      Spesso dimenticano persino che i marcatori di conflitto sono presenti,
      e quindi accidentalmente fanno il commit dei file che contengono
      marcatori di conflitto.</para>

    <para lang="en">Subversion solves this problem by making conflicts more
      tangible.  It remembers that a file is in a state of conflict,
      and won't allow you to commit your changes until you run
      <command>svn resolved</command>.  See <xref
      linkend="svn.tour.cycle.resolve"/> for more details.</para>

    <para>Subversion risolve questo problema rendendo i conflitti più
      tangibili.  Subversion ricorda che un file è in uno stato di conflitto,
      e non permetterà di fare il commit dei propri cambiamenti fino a quando
      non si esegue <command>svn resolved</command>.  Vedere <xref
      linkend="svn.tour.cycle.resolve"/> per maggiori dettagli.</para>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.binary-and-trans">
    <title>File binari e traduzioni</title>

    <para lang="en">In the most general sense, Subversion handles binary files
      more gracefully than CVS does.  Because CVS uses RCS, it can
      only store successive full copies of a changing binary file.
      Subversion, however, expresses differences between files using a
      binary-differencing algorithm, regardless of whether they
      contain textual or binary data.  That means that all files are
      stored differentially (compressed) in the repository.</para>

    <para>Nel senso più generale, Subversion gestisce i file binari
      con più garbo di come lo faccia CVS.  Dato che CVS utilizza RCS, può
      solamente immagazzinare copie successive complete di un file binario 
      modificato. Subversion, comunque, fa uscire le differenze tra i file
      utilizzando un algoritmo di differenza binaria, senza tener conto se questi
      contengono dati testuali o binari.  Questo significa che tutti i file sono
      immagazzinati nel repository in modo differenziale (compressi).</para>

    <para lang="en">CVS users have to mark binary files with
      <option>-kb</option> flags, to prevent data from being garbled
      (due to keyword expansion and line-ending translations).  They
      sometimes forget to do this.</para>

    <para>Gli utenti CVS devono marcare i file binari con indicatori
      <option>-kb</option>, per prevenire che i dati vengano alterati
      (a causa di espansioni di parole chiave o conversioni della fine linea).
      A volte si dimenticano di farlo.</para>

    <para lang="en">Subversion takes the more paranoid route&mdash;first, it never
      performs any kind of keyword or line-ending translation unless
      you explicitly ask it do so (see <xref
      linkend="svn.advanced.props.special.keywords"/> and <xref
      linkend="svn.advanced.props.special.eol-style"/> for more details).  By default,
      Subversion treats all file data as literal byte strings, and
      files are always stored in the repository in an untranslated
      state.</para>

    <para>Subversion usa la strada più paranoica&mdash;primo, non effettua
      mai nessun tipo di traduzione di parola chiave performs o fine riga
      a meno che non gli venga chiesto eplicitamente di farlo (vedere <xref
      linkend="svn.advanced.props.special.keywords"/> e <xref
      linkend="svn.advanced.props.special.eol-style"/> per maggiori dettagli).
      In modo predefinito, Subversion tratta tutti i file di dati come una stringa
      di byte letterali, e i file sono sempre immagazzinati nel repository
      in uno stato non tradotto.</para>

    <para lang="en">Second, Subversion maintains an internal notion of whether a
      file is <quote>text</quote> or <quote>binary</quote> data, but
      this notion is <emphasis>only</emphasis> extant in the working
      copy.  During an <command>svn update</command>, Subversion will
      perform contextual merges on locally modified text files, but
      will not attempt to do so for binary files.</para>

    <para>Secondo, Subversion mantiene una nozione interna del fatto che un
      file sia di dati <quote>testo</quote> o <quote>binari</quote>, ma questa
      nozione è <emphasis>solamente</emphasis> esistente nella copia di
      lavoro.  Durante un <command>svn update</command>, Subversion effettuerà
      fusioni contestuali sui file di testo modificati localmente, ma non
      tenterà di farlo per i file binari.</para>

    <para lang="en">To determine whether a contextual merge is possible,
      Subversion examines the <literal>svn:mime-type</literal>
      property.  If the file has no <literal>svn:mime-type</literal>
      property, or has a mime-type that is textual (e.g.
      <literal>text/*</literal>),
      Subversion assumes it is text.  Otherwise, Subversion assumes
      the file is binary.  Subversion also helps users by running a
      binary-detection algorithm in the <command>svn import</command>
      and <command>svn add</command> commands.  These commands will
      make a good guess and then (possibly) set a binary
      <literal>svn:mime-type</literal> property on the file being
      added.  (If Subversion guesses wrong, the user can always remove
      or hand-edit the property.)</para>

    <para>Per determinare su una fusione contestuale sia possibile,
      Subversion esamina la proprietà <literal>svn:mime-type</literal>.
      Se il file non ha la proprietà <literal>svn:mime-type</literal>,
      o se ha un mime-type che è testuale (es.
      <literal>text/*</literal>),
      Subversion assume che sia testo.  Altrimenti, Subversion assume
      che il file sia binario.  Subversion inoltre aiuta gli utenti eseguendo
      un algoritmo di rilevamento binario nei comandi <command>svn import</command>
      e <command>svn add</command>.  Questi comandi faranno una buona
      congettura e poi (possibilmente) imposteranno una proprietà binaria
      <literal>svn:mime-type</literal> sul file che sta per essere
      aggiunto.  (Se Subversion sbaglierà a fare la congettura, l'utente può
      sempre rimuovere o gestire manualmente la proprietà.)</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.modules">

    <title>Moduli versionati</title>

    <para lang="en">Unlike CVS, a Subversion working copy is aware that it has
      checked out a module.  That means that if somebody changes the
      definition of a module (e.g. adds or removes components), then a
      call to <command>svn update</command> will update the working
      copy appropriately, adding and removing components.</para>

    <para>A differenza di CVS, una copia di lavoro di Subversion è informata che
      è stato fatto il check out di un modulo.  Questo significa che se qualcuno
      cambia la definizione di un modulo (es. aggiunge o rimuove componenti), allora
      una chiamata a <command>svn update</command> aggiornerà la copia di lavoro
      in modo appropriato, aggiungendo o rimuovendo i componenti.</para>

    <para lang="en">Subversion defines modules as a list of directories within a
      directory property:  see <xref linkend="svn.advanced.externals"/>.</para>

    <para>Subversion definisce i moduli come una lista di directory all'interno
      di una proprietà della directory:  vedere <xref linkend="svn.advanced.externals"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.auth">

    <title>Autenticazione</title>

    <para lang="en">With CVS's pserver, you are required to <quote>login</quote>
      to the server before any read or write operation&mdash;you even
      have to login for anonymous operations.  With a Subversion
      repository using Apache <command>httpd</command> or
      <command>svnserve</command> as the server, you don't provide
      any authentication credentials at the outset&mdash;if an
      operation that you perform requires authentication, the server
      will challenge you for your credentials (whether those
      credentials are username and password, a client certificate, or
      even both).  So if your repository is world-readable, you will
      not be required to authenticate at all for read
      operations.</para>

    <para>Con il pserver di CVS, viene richiesto di fare <quote>login</quote>
      al server prima di ogni operazione di lettura o scrittura&mdash;si deve
      perfino fare il login per operazioni anonime.  Con un repository Subversion
      utilizzando come server Apache <command>httpd</command> o
      <command>svnserve</command>, all'inizio non si fornisce
      nessuna credenziale di autenticazione&mdash;se un'operazione
      che viene eseguita richiede autenticazione, il server
      richiederà le crendenziali (dove queste credenziali sono
      nome utente e password, un certificato client, o persino entrambe).
      Così se il proprio repository è leggibile a tutti, non verrà affatto 
      richiesto di autenticarsi per operazioni di lettura.</para>

    <para lang="en">As with CVS, Subversion still caches your credentials on
      disk (in your <filename>~/.subversion/auth/</filename>
      directory) unless you tell it not to by using the
      <option>--no-auth-cache</option> switch.</para>

    <para>Così come CVS, Subversion continua a mettere in cache le credenziali su
      disco (nella propria directory <filename>~/.subversion/auth/</filename>)
      a meno che non gli venga detto di non farlo con l'opzione
      <option>--no-auth-cache</option>.</para>

    <para lang="en">The exception to this behavior, however, is in the case of
      accessing an <command>svnserve</command> server over an SSH
      tunnel, using the <literal>svn+ssh://</literal> URL schema.  In
      that case, the <command>ssh</command> program unconditionally
      demands authentication just to start the tunnel.</para>

    <para>L'eccezione a questo comportamento, comunque, è nel caso si acceda
      a un server <command>svnserve</command> attraverso un tunnel SSH,
      utilizzando lo schema di URL <literal>svn+ssh://</literal>.  In
      questo caso, il programma <command>ssh</command> richiede incondizionatamente
      l'autenticazione appena prima di iniziare il tunnel.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.convert">

    <title>Convertire un repository da CVS a Subversion</title>

    <para lang="en">Perhaps the most important way to familiarize CVS users with
      Subversion is to let them continue to work on their projects
      using the new system.  And while that can be somewhat
      accomplished using a flat import into a Subversion repository of
      an exported CVS repository, the more thorough solution involves
      transferring not just the latest snapshot of their data, but all
      the history behind it as well, from one system to another.  This
      is an extremely difficult problem to solve that involves
      deducing changesets in the absence of atomicity, and translating
      between the systems' completely orthogonal branching policies,
      among other complications.  Still, there are a handful of tools
      claiming to at least partially support the ability to convert
      existing CVS repositories into Subversion ones.</para>

    <para>Probabilmente il modo più importante per far familiarizzare gli utenti
      CVS con Subversion è lasciarli continuare a lavorare sui loro progetti
      utilizzando il nuovo sistema.  E mentre questo può essere fatto utilizzando
      un'importazione netta all'interno del repository di Subversion di un
      repository esportato di CVS, la soluzione più esauriente implica
      il trasferimento non solo dell'ultimo snapshot dei loro dati, ma anche di
      tutta la storia dietro a questo, da un sistema all'altro.  Questo è un
      problema estremamente difficile da risolvere che implica
      la deduzione di cambiamenti in assenza di atomicità, e la conversione
      tra le politiche di sistemi di ramificazione completamente ortogonali,
      in mezzo ad altre complicazioni.  Tuttora, ci sono una manciata di strumenti
      che sostengono almeno parzialmente di supportare l'abilità
      di convertire repository CVS esistenti in repository di Subversion.</para>

    <para lang="en">One such tool is cvs2svn
      (<ulink url="http://cvs2svn.tigris.org/"/>), a Python script
      originally created by members of Subversion's own development
      community.  Others include Lev Serebryakov's RefineCVS
      (<ulink url="http://lev.serebryakov.spb.ru/refinecvs/"/>).
      These tools have various levels of completeness, and may make
      entirely different decisions about how to handle your CVS
      repository history.  Whichever tool you decide to use, be sure
      to perform as much verification as you can stand on the
      conversion results&mdash;after all, you've worked hard to build
      that history!</para>

    <para>Uno di questi strumenti è cvs2svn
      (<ulink url="http://cvs2svn.tigris.org/"/>), uno script Python
      originariamente creato dai membri della comunità di sviluppo di
      Subversion.  Altri includono RefineCVS di Lev Serebryakov
      (<ulink url="http://lev.serebryakov.spb.ru/refinecvs/"/>).
      Questi strumenti hanno vari livelli di completezza, e possono portare
      a decisioni totalmente differenti su come gestire lo storico del repository
      CVS.  Quale sia lo strumento che si decide di utilizzare, occorre assicurarsi
      di eseguire il maggior numero possibile di verifiche sui
      risultati della conversione&mdash;dopo tutto, si è lavorato duro per costruire
      questa storico!</para>

    <para lang="en">For an updated collection of links to known converter tools,
      visit the Links page of the Subversion website
      (<ulink url="http://subversion.tigris.org/project_links.html"/>).</para>

    <para>Per una collezione aggiornata di collegamenti a strumenti di conversione conosciuti,
      visitare la pagina dei collegamenti del sito di Subversion
      (<ulink url="http://subversion.tigris.org/project_links.html"/>).</para>

  </sect1>

</appendix>

<!--
local variables:
sgml-parent-document: ("book.xml" "appendix")
end:
-->
