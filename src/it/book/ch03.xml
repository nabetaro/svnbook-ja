<chapter id="svn.tour">
  <title>Visita guidata</title>

  <simplesect>

    <para lang="en">
      Now we will go into the details of using Subversion.  By the
      time you reach the end of this chapter, you will be able to
      perform almost all the tasks you need to use Subversion in a
      normal day's work.  You'll start with an initial checkout of
      your code, and walk through making changes and examining those
      changes.  You'll also see how to bring changes made by others
      into your working copy, examine them, and work through any
      conflicts that might arise.
    </para>

    <para>
      Entriamo nei dettagli dell'utilizzo di Subversion. Alla fine
      di questo capitolo, sarete  in grado di compiere al meglio tutte
      le attività di cui si ha bisogno per utilizzare Subversion in un normale
      giorno di lavoro.      
      La prima cosa da fare è il checkout del proprio
      codice, per poi procedere effettuando modifiche ed esaminando i cambiamenti.
      Si imparerà  anche ad importare cambiamenti fatti da altri nella propria directory di lavoro,
      ad esaminarli ed a risolvere qualsiasi tipo di conflitto  possa nascere.
    </para>

    <para lang="en">
      Note that this chapter is not meant to be an exhaustive list
      of all Subversion's commands&mdash;rather, it's a conversational
      introduction to the most common Subversion tasks you'll
      encounter.  This chapter assumes that you've read and understood
      <xref linkend="svn.basic"/> and are familiar with the general
      model of Subversion.  For a complete reference of all commands,
      see <xref linkend="svn.ref"/>.
    </para>

    <para>
      Questo capitolo non vuole essere un elenco esaustivo di tutti
      i comandi di Subversion &mdash; quanto piuttosto un'introduzione alle più comuni attività
      che si possono compiere con Subversion. Si assume che si sia stato letto e compreso
      <xref linkend="svn.basic"/> e che si abbia familiarità  con il modello di Subversion.
      Per un riferimento completo a tutti i comandi si rimanda a <xref linkend="svn.ref"/>.
    </para>

  </simplesect>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
    <title>Help!</title>
  


    <para lang="en">
      Before reading on, here is the most important command you'll
      ever need when using Subversion: <command>svn help</command>.
      The Subversion command-line client is
      self-documenting&mdash;at any time, a quick <command>
        svn help
        &lt;subcommand&gt;
      </command> will describe the syntax,switches,
      and behavior of the <command>subcommand</command>.
    </para>


    <para>
      Prima di andare oltre, segue uno dei comando più importanti di cui si ha bisogno
      quando si usa Subversion: <command>svn help</command>.
      Il client a riga di comando di Subversion è autoesplicativo;
      ad ogni modo, il veloce ricorso al comando svn help ,<command>
        svn help
        &lt;subcommand&gt;
      </command>,descriverà la sintassi,
      le opioni e il comportamento del  <command>sottocomando</command>
    </para>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.import">
    <title>Import</title>

    <para lang="en">
      You use <command>svn import</command> to import a new
      project into a Subversion repository.  While this is most likely
      the very first thing you will do when you set up your Subversion
      server, it's not something that happens very often.  For a
      detailed description of import, see <xref
      linkend="svn.tour.other.import"/> later in this chapter.
    </para>



    <para>
      Per importare un nuovo progetto nel repository di Subversion, si usa il comando
      <command>svn import</command>. Sebbene questa sia la prima cosa da fare quando
      si prepara un server Subversion server, non è una cosa che si debba fare frequentemente.
      Per una descrizione dettagliata dell'import si rimanda a  <xref
      linkend="svn.tour.other.import"/> nel seguito di questo capitolo
    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.revs">
    <title>Revisioni:Numeri,Chiavi e Date, Accidenti</title>

    <para lang="en">
      Before we go on, you should know a bit about how to identify
      a particular revision in your repository.  As you learned in
      <xref linkend="svn.basic.in-action.revs"/>, a revision is a
      <quote>snapshot</quote> of the repository at a particular moment
      in time.  As you continue to commit and grow your repository,
      you need a mechanism for identifying these snapshots.
    </para>


    <para>
      Prima di andare avanti, bisogna sapere qualcosa su come identificare
      una particolare revisione nel proprio repository.  Come si è visto in
      <xref linkend="svn.basic.in-action.revs"/>, una revisione è <quote>un'istantanea </quote>
      del repository fatta in  un particolare istante di tempo.  Man mano che
      si continua a fare commit  aumentano le dimensioni del repository,
      perciò bisogna avere un metodo per identificare queste istantanee..
    </para>

    <para lang="en">
      You specify these revisions by using the
      <option>--revision</option> (<option>-r</option>) switch plus
      the revision you want (<command>svn --revision REV</command>) or
      you can specify a range by separating two revisions with a colon
      (<command>svn --revision REV1:REV2</command>).  And Subversion
      lets you refer to these revisions by number, keyword, or
      date.
    </para>
    <para>
      Per specificare le revisioni si usa l'opzione <option>--revision</option>
      (<option>-r</option>) specificando la revisione desiderata (<command>svn --revision REV</command>)
      oppure si può specificare un intervallo separando le due revisioni con i due punti ":"
      (<command>svn --revision REV1:REV2</command>).Subversion permette di referenziare
      queste revisioni attraverso numeri,chiavi oppure data.
    </para>
    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.numbers">
      <title>Numeri di revisione</title>

      <para lang="en">
        When you create a new Subversion repository, it begins its
        life at revision zero and each successive commit increases the
        revision number by one.  After your commit completes, the
        Subversion client informs you of the new revision
        number:
      </para>
      <para>
        Quando si crea un nuovo repository Subversion, esso comincia la sua vita dalla revisione zero
        e ogni successivo commit incrementa il numero di revisione di uno.
        Quando si completa il commit, il client Subversion vi comunica il nuovo numero della revisione:
      </para>
      <screen>
        $ svn commit --message "Corrected number of cheese slices."
        Sending        sandwich.txt
        Transmitting file data .
        Committed revision 3.
      </screen>

      <para lang="en">
        If at any point in the future you want to refer to that
        revision (we'll see how and why we might want to do that later
        in this chapter), you can refer to it as
        <quote>3</quote>.
      </para>
      <para>
        Se ad un certo punto, in seguito ci si vuole riferire a quella particolare revisione
        (si vedrà come e perchè si dovrebbe volerlo nel seguito di questo capitolo),
        ci si potrà riferire ad essa in questo modo : <quote>3</quote>.
      </para>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.keywords">
      <title>Chiavi per le Revisioni</title>


      <para lang="en">
        The Subversion client understands a number of
        <firstterm>revision keywords</firstterm>.  These keywords
        can be used instead of integer arguments to the
        <option>--revision</option> switch, and are resolved into
        specific revision numbers by Subversion:
      </para>
      <para>
        Il client Subversion riconosce un numero di <firstterm>
          chiavi per le revisioni
        </firstterm>.
        Queste chiavi possono essere usate al posto degli argomenti interi
        per richiamare le <option>--revisioni</option> e vengono risolte
        da Subversion in specifici numeri di revisione:
      </para>
      <note>
        <para lang="en">
          Each directory in your working copy contains an
          administrative subdirectory called
          <filename>.svn</filename>.  For every file in a directory,
          Subversion keeps a copy of each file in the administrative
          area.  This copy is an unmodified (no keyword expansion, no
          end-of-line translation, no nothing) copy of the file as it
          existed in the last revision (called the <quote>BASE</quote>
          revision) that you updated it to in your working copy.  We
          refer to this file as the <firstterm>
            pristine
            copy
          </firstterm> or <firstterm>text-base</firstterm> version
          of your file, and it's always an exact byte-for-byte copy of
          the file as it exists in the repository.
        </para>
        <para>

          Ogni cartella della propria copia di lavoro contiene una sottocartella
          di amministrazione chiamata <filename>.svn</filename>.
          Per ogni file in una cartella, Subversion mantiene una copia nell'area d'amministrazione.
          Questa copia non modificata da parte di Subversion (non è stato applicata l'espansione delle chiavi,
          non è stata effettuata la conversione dei fine riga, non è stato fatto nulla) è una copia dell'ultima revisione
          del file (chiamata la revisione <quote>BASE</quote>) che è stata aggiornata nella propria copia di lavoro.
          Ci si riferirà a questo file come alla revisione <firstterm>copia di ripristino</firstterm> oppure
          <firstterm>testo-base</firstterm>, esso è sempre una copia esatta byte per byte del file che
          si trova nel repository.
          
        </para>
      </note>

      <variablelist>

        <varlistentry>
          <term>HEAD</term>
          <listitem>
            <para lang="en">
              The latest (or <quote>youngest</quote>) revision in
              the repository.
            </para>
            <para>
              L'ultima revisione (o <quote>la più recente</quote>)nel repository.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>BASE</term>
          <listitem>
            <para>
              The revision number of an item in a working copy.
              If the item has been locally modified, the <quote>
                BASE
                version
              </quote> refers to the way the item appears
              without those local modifications.
            </para>
            <para>
              Il numero di revisione di un oggetto in una copia di lavoro.
              Se l'oggetto è stato modificato in locale, la  <quote>
                versione BASE
              </quote> fa riferimento al modo in cui l'oggetto appare
              senza le modifiche effettuate.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>COMMITTED</term>
          <listitem>
            <para lang ="en">
              The most recent revision prior to, or equal to,
              <literal>BASE</literal>, in which an item changed.
            </para>
            <para>
              La revisione più recente "prima di" oppure "uguale a"
              <literal>BASE</literal>,nella quale un oggetto è cambiato.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>PREV</term>
          <listitem>
            <para lang="en">
              The revision immediately <emphasis>before</emphasis>
              the last revision in which an item changed.
              (Technically, <literal>COMMITTED</literal> - 1.)
            </para>
            <para>
              La revisione immediatamente <emphasis>precedente</emphasis> rispetto
              all'ultima revisione nella quale un oggetto è cambiato.
              (Tecnicamente, <literal>COMMITTED</literal> - 1.)
            </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <note>
        <para lang ="en">
          <literal>PREV</literal>, <literal>BASE</literal>, and
          <literal>COMMITTED</literal> can be used to refer to local
          paths, but not to URLs.
        </para>
        <para>
          <literal>PREV</literal>,<literal>BASE</literal>, and
          <literal>COMMITTED</literal> possono essere usati per far riferimento a percorsi locali
          ma non a URLs.

        </para>
      </note>

      <para lang="en">
        Here are some examples of revision keywords in action.
        Don't worry if the commands don't make sense yet; we'll be
        explaining these commands as we go through the chapter:
      </para>
      <para>
        Diamo alcuni esempi di chiavi di revisione in azione.
        Non bisogna preoccuparsi se i comandi sembrano non aver senso;
        saranno spiegati in seguito.
      </para>

      <screen>
        $ svn diff --revision PREV:COMMITTED foo.c
        # shows the last change committed to foo.c

        $ svn log --revision HEAD
        # shows log message for the latest repository commit

        $ svn diff --revision HEAD
        # compares your working file (with local changes) to the latest version
        # in the repository

        $ svn diff --revision BASE:HEAD foo.c
        # compares your <quote>pristine</quote> foo.c (no local changes) with the
        # latest version in the repository

        $ svn log --revision BASE:HEAD
        # shows all commit logs since you last updated

        $ svn update --revision PREV foo.c
        # rewinds the last change on foo.c
        # (foo.c's working revision is decreased)
      </screen>

      <para lang="en">
        These keywords allow you to perform many common (and
        helpful) operations without having to look up specific
        revision numbers or remember the exact revision of your
        working copy.
      </para>
      <para>
        Queste chiavi permettono di effettuare le più comuni
        (ed utili) operazioni senza bisogno di specificare i numeri di revisione
        o di ricordare l'esatta revisione della propria copia di lavoro.
      </para>

    </sect2>
    <!-- =============================================================== -->
    <sect2 id="svn.tour.revs.dates">
      <title>Date di revisione</title>
      
      <para lang="en">Anywhere that you specify a revision number or revision
        keyword, you can also specify a date
        inside curly braces <quote>{}</quote>.  You can even access
        a range of changes in the repository using both dates and
        revisions together!</para>
	
      <para>Ovunque si specifichi un numero di revisione o una chiave 
      di revisione, si può anche specificare una data racchiusa 
      fra parentesi graffe <quote>{}</quote>.  Sara addiritturà possibile accedere ad un insieme
      di cambiamenti nel repository usando assieme le date e le revisioni!
      </para>
      
      <para lang="en"> Here are examples of the date formats that Subversion
        accepts.  Remember to use quotes around any date that contains
        spaces.</para>
	
      <para> Qui potete trovare alcuni esempi di formati di data accettati 
      	da Subversion. Ricordarsi di racchiudere la data tra le doppie 
	      virgolette se al suo interno sono presenti degli spazi.      	
      </para>
      <screen>
$ svn checkout --revision {2002-02-17}
$ svn checkout --revision {15:30}
$ svn checkout --revision {15:30:00.200000}
$ svn checkout --revision {"2002-02-17 15:30"}
$ svn checkout --revision {"2002-02-17 15:30 +0230"}
$ svn checkout --revision {2002-02-17T15:30}
$ svn checkout --revision {2002-02-17T15:30Z}
$ svn checkout --revision {2002-02-17T15:30-04:00}
$ svn checkout --revision {20020217T1530}
$ svn checkout --revision {20020217T1530Z}
$ svn checkout --revision {20020217T1530-0500}
&hellip;
</screen>
      
      <para lang="en">When you specify a date as a revision, Subversion finds
        the most recent revision of the repository as of that
        date:</para>
        <para lang="en">Quando si speicifica una data come revisione, 
	           Subversion trova la più recente revisione del repository registrata
	           fino a quella specifica data:</para>
      <screen>
$ svn log --revision {2002-11-28}
------------------------------------------------------------------------
r12 | ira | 2002-11-27 12:31:51 -0600 (Wed, 27 Nov 2002) | 6 lines
&hellip;
</screen>
        
      <sidebar>
        
        <title>Subversion è indietro di un giorno?</title>
	
        <para lang="en">If you specify a single date as a revision without
          specifying a time of day (for example
          <literal>2002-11-27</literal>), you may think that Subversion
          should give you the last revision that took place on the
          27th of November.  Instead, you'll get back a revision from
          the 26th, or even earlier.  Remember that Subversion will
          find the <emphasis>most recent revision of the
          repository</emphasis> as of the date you give.  If you give
          a date without a timestamp, like
          <literal>2002-11-27</literal>, Subversion assumes a time of
          00:00:00, so looking for the most recent revision won't
          return anything on the day of the 27th.</para>
	  
	 <para>Se si specifica una singola data come revisione senza
	 specificare l'ora (ad esempio
          <literal>2002-11-27</literal>), si potrebbe pensare che Subversion
          restituisca l'ultima revisione effettuata il 
          27 Novembre.  Invece , restituirà una revisione del 
          26 Novembre, o anche precedente.  Bisogna ricordare che Subversion 
          troverà la <emphasis>più recente revisione del 
	  repositroy</emphasis> a partire dalla data inserita.  Se inseriamo
          una data senza un timestamp, come 
          <literal>2002-11-27</literal>, Subversion assumerà 
          00:00:00 come timestamp, cosi cercando la revisione più recente non 
	  troveremo nulla effettuato il 27 Novembre.</para>
	  
	  
        <para lang="en">If you want to include the 27th in your search, you can
          either specify the 27th with the time (<literal>{"2002-11-27
          23:59"}</literal>), or just specify the next day
          (<literal>{2002-11-28}</literal>).</para>
	  
        <para>Se volessimo includere il 27 Novembre nelle nostre ricerche,
          potremmo specificare assieme alla data anche l'ora  (<literal>{"2002-11-27
          23:59"}</literal>), oppure semplicemente inserire la data del giorno
          successivo (<literal>{2002-11-28}</literal>).</para>
      </sidebar>
      
      <para lang="en">You can also use a range of dates.  Subversion will find
        all revisions between both dates, inclusive:</para>
	
	<para>Si può anche usare un intervallo di date.  Subversion troverà
        tutte le revisioni comprese tra le due date (estremi compresi):</para>
      
      <screen>
$ svn log --revision {2002-11-20}:{2002-11-29}
&hellip;
</screen>
        
      <para lang="en">As we pointed out, you can also mix dates and revisions:</para>
      <para>Come abbiamo visto, è possibile combinare le date e le revisioni:</para>
      <screen>
$ svn log --revision {2002-11-20}:4040
</screen>

      <para lang="en">Users should be aware of a subtlety that can become quite
        a stumbling-block when dealing with dates in Subversion.  Since
        the timestamp of a revision is stored as a property of the
        revision&mdash;an unversioned, modifiable
        property&mdash;revision timestamps can be changed to represent
        complete falsifications of true chronology, or even removed
        altogether.  This will wreak havoc on the internal
        date-to-revision conversion that Subversion performs.</para>
	
      <para>Gli utenti dovrebbero fare attenzione ad una sottigliezza che si potrebbe
        rilevare un ostacolto quando si utilizzano le date in Subversion. Poiché
        il timestamp di una revision è salvato come una proprietà della
        revisione&mdash;una proprietà modificabile e non gestita dal sistema
	di controllo di versione&mdash;i timestamp di revisione possono essere
        modificati per falsificare completamente l'ordine cronologico, o possono
        essere rimossi completamente.  Questo porterà problemi sul sistema 
	di conversione data-revisione utilizzato da Subversion.</para>
    </sect2>
      
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
    <title>Checkout iniziale</title>

    <para lang="en">Most of the time, you will start using a Subversion
      repository by doing a <firstterm>checkout</firstterm> of your
      project.  Checking out a repository creates a copy of it on your
      local machine.  This copy contains the <literal>HEAD</literal>
      (latest revision) of the Subversion repository that you specify
      on the command line:</para>
      
     <para>La maggior parte delle volte si inizierà ad 
     utilizzare un repository Subversion, effettuando un 
     <firstterm>checkout</firstterm> di un determinato progetto.
      Il checkout crea una copia sulla macchina locale di un repository.
      Questa copia contiene la <literal>HEAD</literal>
      (ultima versione) del repository di Subversion che abbiamo 
      specificato dalla linea di comando:</para>

    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk
A  trunk/subversion.dsw
A  trunk/svn_check.dsp
A  trunk/COMMITTERS
A  trunk/configure.in
A  trunk/IDEAS
&hellip;
Checked out revision 2499.
</screen>
    
    <sidebar>
     
      <title>Cosa c'è in un Nome ?</title>
      
      <para lang="en">Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
	
      <para>Subversion cerca energicamente di non limitare i tipi di dati che
        possono essere messi mettere sotto il controllo di versione.  
	Il contenuto dei files e i valori delle proprietà sono salvati e 
	trasmessi come dati binari, e 
        <xref linkend="svn.advanced.props.special.mime-type"/>
        ci dirà come informare Subversion che operazioni 
        <quote>testuali</quote> su un particolare tipo di file non hanno senso
	.  Comunque ci sono vari posti dove Subversion 
	inserisce delle restrizioni sulle informazioni memorizzate.</para>
	
	
      <para lang="en">Subversion internally handles certain bits of
        data&mdash;for example, property names, path names, and log
        messages&mdash;as UTF-8 encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
	
      <para>Subversion gestisce internamente alcune informazioni
        &mdash;ad esempio, nomi delle proprietà, percorsi e messaggi di log
	&mdash;come Unicode codificato UTF-8.  Questo non vuol dire, comunque, 
        che tutte le interazioni con Subversion debbano utilizzare la 
	codifica UTF-8. Come regola generale, i client Subversion gesticono con 
        eleganza e trasparenza la conversione tra UTF-8 e il sistema di codifica
        ultizzato dal computer dell'utente, se questa conversione può essere  
	portata a termine correttamente (che è il caso nella maggior parte
	sistemi di codifica odierni).</para>
	
	
      <para lang="en">In addition, path names are used as XML attribute values
        in WebDAV exchanges, as well in as some of Subversion's
        housekeeping files.  This means that path names can only
        contain legal XML (1.0) characters.  Subversion also prohibits
        TAB, CR, and LF characters in path names, so they aren't
        broken up in diffs, or in the output of commands like <xref
        linkend="svn.ref.svn.c.log"/> or <xref
        linkend="svn.ref.svn.c.status"/>.</para>
	
      <para>In aggiunta, i percorsi dei file sono usati come attributi XML 
        negli scambi WebDAV, così come in alcuni file di configurazione di 
	Subversion.  Questo significa che i percorsi possono solo contenere 
        caratteri XML (1.0) valdii.  Subversion proibisce l'uso dei caratteri
        TAB, CR, and LF nei percorsi, cosi non saranno scomposti nelle diff, 
	o nell'output di comandi come <xref linkend="svn.ref.svn.c.log"/> o 
	<xref linkend="svn.ref.svn.c.status"/>.</para>
	
      <para lang="en">While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8, and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&mdash;it will automatically escape legal
        path characters as needed in URLs you type to create
        <quote>legally correct</quote> versions for internal
        use.</para>
	
     <para>Potrebbe sembrare di dover ricordare molte cose: in pratica
        raramente queste limitazioni si rivelano un problema.  Fin quando i
        settaggi locali sono compatibili con UTF-8, e non si utilizzano 
	caratteri di controllo nei percorsi dei file, non si 
	avranno problemi di comunicazione con Subversion.  
	I client da linea di comando ci danno un aiuto in più 
        &mdash;si occupano, ove necessario, di sostituire i caratteri legali
	presenti nelle URL da noi inserite in sequenze di escape creando cosi versioni di
		URL <quote>legittime</quote>per un uso interno.
	</para>
	
      <para lang="en">Experienced users of Subversion have also developed a set
        of best-practice conventions for laying out paths in the
        repository.  While these aren't strict requirements like the
        syntax described above, they help to organize frequently
        performed tasks.  The <literal>/trunk</literal> part of URLs
        you'll find throughout this book is one of these conventions;
        we'll talk a lot more about it and related recommendations in
        <xref linkend="svn.branchmerge"/>.</para>
	
	<para>Utenti esperti di Subversion hanno sviluppato un insieme 
	di convenzioni per costruire percorsi nel repository.
        Anche se l'adozione di queste convenzioni non sono strettamente 
	necessarie come la sintassi descritta sopra, portano sicuramente
	benifici nell'organizzazione ed esecuzione di operazioni che avvengono 
	con una certa frequenza. La parte <literal>/trunk</literal> degli URLs
        che in questo libro si trova ovunque, è una di queste convenzioni;
        in seguito parleremo diffusamente sia di queste convenzioni sia delle 
	relative raccomandazioni
        <xref linkend="svn.branchmerge"/>.</para>

    </sidebar>

    <para lang="en">Although the above example checks out the trunk directory,
      you can just as easily check out any deep subdirectory of a
      repository by specifying the subdirectory in the checkout
      URL:</para>
      
    <para>Sebbene l'esempio sopra effettui un ckeckout della directory trunk,
      si puo' semplicemente effettuare il chekout di una qualunque 
      sottodirectory di un repository specificando la sottodirectory nel URL
    </para>
    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk/doc/book/tools
A  tools/readme-dblite.html
A  tools/fo-stylesheet.xsl
A  tools/svnbook.el
A  tools/dtd
A  tools/dtd/dblite.dtd
&hellip;
Checked out revision 2499.
</screen>
    
    <para lang="en">Since Subversion uses a <quote>copy-modify-merge</quote>
      model instead of <quote>lock-modify-unlock</quote> (see <xref
      linkend="svn.basic"/>), you're already able to start making
      changes to the files and directories in your working copy.  Your
      working copy is just like any other collection of files and
      directories on your system.  You can edit and change them, move
      them around, you can even delete the entire working copy and
      forget about it.</para>
    
    <para>Dal momento che Subversion utilizza un modello 
      <quote>copy-modify-merge</quote> invece di uno 
      <quote>lock-modify-unlock</quote> (see <xref linkend="svn.basic"/>), 
      possiamo direttamente effettuare cambiamenti sui file e le directory
      della nostra working copy. La nostra working copy è semplicemente come
      ogni altro file e directory sul nostro sistema.  
      Si possono modificare e spostare, si può anche cancellare l'intera
      working copy e dimenticarsi completamente della sua esistenza.</para>
      
      <note>
        <para lang="en">While your working copy is <quote>just like any other
          collection of files and directories on your system</quote>,
          you need to let Subversion know if you're going to be
          rearranging anything inside of your working copy.  If you
          want to copy or move an item in a working copy, you should
          use <command>svn copy</command> or <command>svn
          move</command> instead of the copy and move commands
          provided by your operating system.  We'll talk more about
          them later in this chapter.</para>
	  
	  <para>Mentre la nostra working copy <quote> è come ogni altro 
          insieme di file e directory sul nostro sistema</quote>,
          dobbiamo far sapere a Subversion se stiamo ridisponendo qualcosa
	  all'interna della working copy.  Se volessimo sposare o copiare
          un elemento facente parte della working copy, dovremmo utilizzare
          <command>svn copy</command> oppure <command>svn
          move</command> invece dei rispettivi comandi forniti dal sistema 
          operativo da noi utlizzato. Nel parleremo in modo più approfondito 
	  più avanti nel capitolo.</para>
      </note>

    <para lang="en">Unless you're ready to commit a new file or directory, or
      changes to existing ones, there's no need to further notify the
      Subversion server that you've done anything.</para>
     
     <para> A meno che non dobbiamo fare un commit di un nuovo file o 
      di una nuova directory, oppure dei cambiamenti effettuati su un file 
      esistente, non ci sono ulteriori notifiche al Subversion server di quanto
      efettuato.</para>

    <sidebar>
      <!--title lang="en">What's with the <filename>.svn</filename> directory?</title>-->
      <title>Cosa è la directory<filename>.svn</filename>?</title>
      
       <para lang="en">Every directory in a working copy contains an
        administrative area, a subdirectory named
        <filename>.svn</filename>.  Usually, directory listing
        commands won't show this subdirectory, but it is nevertheless
        an important directory.  Whatever you do, don't delete or
        change anything in the administrative area!  Subversion
        depends on it to manage your working copy.</para>

      <para>Ogni directory in una working copy contiene un area di 
      	amministrazione, la subdirectory 
        <filename>.svn</filename>.  Di solito, i comandi per elencare
	il contenuto di una directory non mostrano questa subdirectory,
        , ma tuttavia è una directory importante.  
	Qualunque cosa facciamo la cosa importante non modificare, o 
	cancellare, nulla nell'area di amministrazione.
        Per Subversion questa area è fondamentale per gestire la nostra 
        working copy.</para>

    </sidebar>

    <para lang="en">While you can certainly check out a working copy with the
      URL of the repository as the only argument, you can also specify
      a directory after your repository URL.  This places your working
      copy in the new directory that you name.  For example:</para>
      
    <para>Mentre si può cercatemente effettuare un ckeckout di una working copy
      con l'URL del repository come unico argomento, si può anche specificare 
      una directory dopo l'URL del repository.  Questo posiziona la working copy
      nella directory con quel nome.  Ad esempio:</para>
    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk subv
A  subv/subversion.dsw
A  subv/svn_check.dsp
A  subv/COMMITTERS
A  subv/configure.in
A  subv/IDEAS
&hellip;
Checked out revision 2499.
</screen>
    
    <para lang="en">That will place your working copy in a directory named
      <literal>subv</literal> instead of a directory named
      <literal>trunk</literal> as we did previously.</para>
	<para>Questo posizionerà la nostra working copy nella directory
      <literal>subv</literal> invece che nella directory 
      <literal>trunk</literal> come era accaduto precedentemente.</para>
  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
    <title>Ciclo Base di Lavoro</title>

   <para lang="en">Subversion has numerous features, options, bells and
      whistles, but on a day-to-day basis, odds are that you will only
      use a few of them.  In this section we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
    <para> Subversion ha numerose caratteristiche e opzioni e offre moltissime
     opportunità, ma nel lavoro quotidiano è probabile che servirà  usarne solo alcune.
    In questa sezione si farà  una panoramica delle cose più comuni
    che bisogna imparare a fare
    con Subversion nel corso di un normale lavoro quotidiano.
    </para>
    <para lang="en">The typical work cycle looks like this:</para>
    <para> Un tipico ciclo di lavoro è più o meno così: </para>

     <itemizedlist>
      <listitem>
     <para lang="en">Update your working copy</para>
       <para> Aggiornamento della propria copia di lavoro </para>

        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>

          </listitem>
        </itemizedlist>

      </listitem>

      <listitem>
        <para lang="en">Make changes</para>
       <para>Effettuare cambiamenti</para>

        <itemizedlist>
          <listitem>
            <para><command>svn add</command></para>
          </listitem>
          <listitem>
            <para><command>svn delete</command></para>
          </listitem>
          <listitem>
            <para><command>svn copy</command></para>
          </listitem>
          <listitem>
            <para><command>svn move</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para lang="en">Examine your changes</para>
       <para>Esaminare i cambiamenti</para>

        <itemizedlist>
          <listitem>
            <para><command>svn status</command></para>
          </listitem>
          <listitem>
            <para><command>svn diff</command></para>
          </listitem>
          <listitem>
            <para><command>svn revert</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para lang="en">Merge others' changes into your working copy</para>
        <para>Far confluire i cambiamenti operati da altri nella
        propria copia di lavoro</para>

        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
          <listitem>
            <para><command>svn resolved</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para lang="en">Commit your changes</para>
        <para>Fare il commit dei propri cambiamenti</para>

        <itemizedlist>
          <listitem>
            <para><command>svn commit</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
      <title>Aggiornare la propria copia di lavoro</title>

      <para lang="en">When working on a project with a team, you'll want to
        update your working copy to receive any changes made since
        your last update by other developers on the project.  Use
        <command>svn update</command> to bring your working copy into
        sync with the latest revision in the repository.</para>
      <para>Quando si lavora ad un progetto in team,si dovrà aggiornare
		la propia copia di lavoro per ricevere tutte le modifiche fatte,
		dopo l'ultimo aggiornamento, dagli altri sviiluppatori.
	      Si usa il comando <command>svn update</command> per allineare
          la propria copia di lavoro  con l'ultima versione nel repository.  </para>
      <screen>
$ svn update
U  foo.c
U  bar.c
Updated to revision 2.
</screen>

      <para lang="en">In this case, someone else checked in modifications to
        both <filename>foo.c</filename> and <filename>bar.c</filename>
        since the last time you updated, and Subversion has updated
        your working copy to include those changes.</para>
	<para> In questo caso,qualcun altro ha effettuato delle modifiche
		ad entrambi i file <filename>foo.c</filename>
		e <filename>bar.c</filename> dall'ultima volta che si è fatto
		l'uppdate,e Subversion ha aggiornato la copia di lavoro per
		includere queste modifiche.
 	 </para>

      <para lang="en">Let's examine the output of <command>svn update</command>
        a bit more.  When the server sends changes to your working
        copy, a letter code is displayed next to each item to let you
        know what actions Subversion performed to bring your working
        copy up-to-date:</para>
       <para>Andiamo ad esaminare un pò meglio l'output del comando
		<command>svn update</command>.Quando il server invia le modifiche
		alla propria copia di lavoro,viene visualizzata una lettera
		subito dopo ogni oggetto per indicare l'azione compiuta da
		Subversion per aggiornare la copia di lavoro:</para>


      <variablelist>

        <varlistentry>
          <term><computeroutput>U      foo</computeroutput></term>
          <listitem>
            <para lang="en">File <filename>foo</filename> was
              <computeroutput>U</computeroutput>pdated (received changes
              from the server).</para>
		<para> File <filename>foo</filename> è stato  <computeroutput>U</computeroutput>pdated
		(ha ricevuto le modifiche dal server).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>A      foo</computeroutput></term>
          <listitem>
            <para lang="en">File or directory <filename>foo</filename> was
              <computeroutput>A</computeroutput>dded to your working
              copy.</para>
            <para>Il file o la directory <filename>foo</filename> è stata
			<computeroutput>A</computeroutput>ggiunta alla propria
			copia di lavoro. </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>D      foo</computeroutput></term>
          <listitem>
            <para lang="en">File or directory <filename>foo</filename> was
              <computeroutput>D</computeroutput>eleted from your working
              copy.</para>
		<para>Il file o la directory <filename>foo</filename> è stata
              <computeroutput>C</computeroutput>ancellata dalla propria copia
              di lavoro.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>R      foo</computeroutput></term>
          <listitem>
            <para lang="en">File or directory <filename>foo</filename> was
              <computeroutput>R</computeroutput>eplaced in your working
              copy; that is, <filename>foo</filename> was deleted, and a
              new item with the same name was added.  While they may have
              the same name, the repository considers them to be distinct
              objects with distinct histories.</para>
		<para>Il file o la directory <filename>foo</filename> è stata
              <computeroutput>S</computeroutput>ostituita nella propria copia di lavoro;
		          il che significa che , <filename>foo</filename> è stato cancellato, e un
              nuovo oggetto con lo stesso nome è stato aggiunto.Nonostante abbiano lo stesso
              nome, il repository li considera due oggetti distinti con storie distinte.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>G      foo</computeroutput></term>
          <listitem>
            <para lang="en">File <filename>foo</filename> received new changes
              from the repository, but your local copy of the file had
              your modifications.  Either the changes did not intersect,
              or the changes were exactly the same as your local
              modifications, so Subversion has successfully
              mer<computeroutput>G</computeroutput>ed the repository's
              changes into the file without a problem.</para>
		<para>Il file <filename>foo</filename> ha ricevuto le nuove
			modifiche dal repository,ma la copia locale del file ha conservato
			le proprie modifiche.Sia che le modifiche non coincidano
			o che siano le stesse ,Subversion ha fatto confluire con successo
			le modifiche presenti nel repository nel file senza problemi.
		</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><computeroutput>C      foo</computeroutput></term>
          <listitem>
            <para lang="en">File <filename>foo</filename> received
              <computeroutput>C</computeroutput>onflicting changes from
              the server.  The changes from the server directly overlap
              your own changes to the file.  No need to panic, though.
              This overlap needs to be resolved by a human (you); we
              discuss this situation later in this chapter.</para>
		<para>Il file <filename>foo</filename> ha ricevuto modifiche
			<computeroutput>C</computeroutput>ontrastanti dal server.
			Le modifiche dal server si sovrappongono direttamente
			alle proprie modifiche sul file.Niente panico.
			Questa sovrapposizione deve essere risolta da un intervento umano(il tuo);
			questa situazione sarà discussa nel seguito del capitolo.</para>
          </listitem>
        </varlistentry>

      </variablelist>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
      <title>Apportare modifiche alla propria copia di lavoro</title>

      <para lang="en">Now you can get to work and make changes in your
        working copy.  It's usually most convenient to decide on a
        particular change (or set of changes) to make, such as writing
        a new feature, fixing a bug, etc.  The Subversion commands
        that you will use here are <command>svn add</command>,
        <command>svn delete</command>, <command>svn copy</command>,
        and <command>svn move</command>.  However, if you are merely
        editing files that are already in Subversion, you may not need
        to use any of these commands until you commit.  Changes you can
        make to your working copy:</para>
	<para>A questo punto si è in grado di lavorare e apportare modifiche
		alla propria copia di lavoro.Di solito è più conveniente decidere
        un particolare cambiamento (o un insieme di cambiamenti) da fare,
        come se si dovesse scrivere una nuova caratteristica,fissare un bug,etc.
		I comandi Subversion da usare sono <command>svn add</command>,
		 <command>svn delete</command>, <command>svn copy</command>,
	       e<command>svn move</command>.
           Comunque se si stanno semplicemente editando
		files che sono già presenti in Subversion,
        potrebbe non essere necessario nessuno di questi
		comandi finchè non si fa il commit.
		Modifiche che si possono apportare alla propria copia di lavoro:</para>

      <variablelist>

        <varlistentry>
          <term>Modifiche al file</term>
          <listitem>
            <para lang="en">This is the simplest sort of change.  You don't need
              to tell Subversion that you intend to change a file;
              just make your changes.  Subversion will be able to
              automatically detect which files have been
              changed.</para>
		<para> Questo è il tipo di modifica più semplice.Non c'è bisogno
			di dire a Subversion che si intende modificare un file;
		basta solo eseguire le modifiche.
        Subversion è in grado di stabilire automaticamente
		quali files sono stati modificati.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Tree changes</term>
          <listitem>
            <para>You can ask Subversion to <quote>mark</quote> files
              and directories for scheduled removal, addition,
              copying, or moving.  While these changes may take place
              immediately in your working copy, no additions or
              removals will happen in the repository until you commit
              them.</para>
		<para>Si può richiedere a Subversion di  <quote>marcare</quote>
		files e directories per la rimozione,l'aggiunta,la copia
		o lo spostamento.Queste modifiche avvengono istantaneamente nella propria
        copia di lavoro,ma non appariranno rimozioni o aggiunte nel repository finchè
		non si fa il commit.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>To make file changes, use your text editor, word
        processor, graphics program, or whatever tool you would
        normally use.  Subversion handles binary files just as easily
        as it handles text files&mdash;and just as efficiently
        too.</para>
	<para>Per apportare modifiche ad un file si può usare un text editor,
    un word processor,
	programmi di grafica e qualsiasi tool che si usa normalmente.
    Subversion maneggia
	i files binari con la stessa facilità con cui maneggia
    i file di testo&mdash;
	e con la stessa efficienza.</para>

      <para lang="en">Here is an overview of the four Subversion subcommands
        that you'll use most often to make tree changes (we'll cover
        <command>svn import</command> and <command>svn mkdir</command>
        later).</para>
	<para>Ecco una panoramica su 4 dei comandi di Subversion
	che si usano più spesso per apportare modifiche ad albero(si analizzeranno
	in seguito i comandi:<command>svn import</command> and <command>svn mkdir</command>).
	</para>

      <warning>
        <para lang="en">While you can edit your files with whatever tool you
          like, you shouldn't change the structure of your working
          copy without letting Subversion know what you're doing.  Use
          the <command>svn copy</command>, <command>svn
          delete</command>, and <command>svn move</command> commands
          to change the structure of your working copy, and use the
          <command>svn add</command> command to place new files and
          directories under version control.</para>
      <para> Mentre si possono editare i files con qualsiasi
           tool si desideri,non è possibile
		modificare la struttura della propria cartella di lavoro
		senza dire a Subversion quello che si sta per fare.
		Si utilizzano i comandi <command>svn copy</command>, <command>svn
          	delete</command>, e <command>svn move</command>
              per modificare la struttura e il
		comando <command>svn add</command> per collocare nuovi files e directories
		sotto il controllo di versione. </para></warning>

      <variablelist>

        <varlistentry>
          <term><command>svn add foo</command></term>
          <listitem>
            <para lang="en">Schedule file, directory, or symbolic link
              <filename>foo</filename> to be added to the repository.
              When you next commit, <filename>foo</filename> will
              become a child of its parent directory.  Note that if
              <filename>foo</filename> is a directory, everything
              underneath <filename>foo</filename> will be scheduled
              for addition.  If you only want to add
              <filename>foo</filename> itself, pass the
              <option>--non-recursive</option> (<option>-N</option>)
              switch.</para>
		<para> Si programmano i file,le directory e i link simbolici
			 <filename>foo</filename> che devono essere aggiunti al repository.
			Quando si esegue il commit ,<filename>foo</filename> diventerà
			un figlio della directory padre.
			Si noti che <filename>foo</filename> è una directory,
			tutto ciò che è contenuto in essa verrà pianificato per essere aggiunto.
			Se si vuole aggiungere soltanto <filename>foo</filename>
            bisogna usare
			l'opzione <option>--non-ricorsivo.
            </option> (<option>-N</option>)</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn delete foo</command></term>
          <listitem>
            <para lang="en">Schedule file, directory, or symbolic link
              <filename>foo</filename> to be deleted from the
              repository.  If <filename>foo</filename> is a file or
              link, it is immediately deleted from your working copy.
              If <filename>foo</filename> is a directory, it is not
              deleted, but Subversion schedules it for deletion.  When
              you commit your changes, <filename>foo</filename> will
              be removed from your working copy and the repository.
              <footnote><para lang="en">Of course, nothing is ever totally
              deleted from the repository&mdash;just from the
              <literal>HEAD</literal> of the repository.  You can get
              back anything you delete by checking out (or updating
              your working copy) a revision earlier than the one in
              which you deleted it.</para></footnote></para>
		<para>Si programmano i file,le directory e
        i link simbolici per cancellarli dal
			repository. Se <filename>foo</filename> è un file o un link.
			viene cancellato immediatamente dalla propria copia di lavoro.
			Se  <filename>foo</filename>  è una directory,non viene cancellata
			ma Subversion la programma per la cancellazione.
			Quando si fa il commit delle modifiche,
            <filename>foo</filename> sarà rimosso
			sia dalla copia di lavoro locale che dal repository.
 			<footnote><para>Naturalmente niente viene completamente cancellato
             dal repository&mdash;
			ma solo dalla <literal>testa</literal> del repository.
			 Si può ritrovare tutto quello che si è cancellato
             facendo il checkout(o l'update
			della copia di lavoro)ad una versione precedente a
            quella in cui si è fatta la cancellazione.
			</para></footnote></para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn copy foo bar</command></term>
          <listitem>
            <para lang="en">Create a new item <filename>bar</filename> as a
              duplicate of <filename>foo</filename>.
              <filename>bar</filename> is automatically scheduled for
              addition.  When <filename>bar</filename> is added to the
              repository on the next commit, its copy history is
              recorded (as having originally come from
              <filename>foo</filename>).  <command>svn copy</command>
              does not create intermediate directories.</para>
		<para>Si crea un nuovo oggetto <filename>bar</filename> come duplicato
			di <filename>foo</filename>.
            <filename>bar</filename> viene automaticamente
			programmato per essere aggiunto.
            Quando <filename>bar</filename> viene aggiunto
			al repository al commit successivo,
            la sua copia viene registrata(come se
			provenisse originariamnete da <filename>foo</filename>).
			<command>svn copy</command> non crea directory intermedie.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn move foo bar</command></term>
          <listitem>
            <para lang="en">This command is exactly the same as running
              <command>svn copy foo bar; svn delete foo</command>.
              That is, <filename>bar</filename> is scheduled for
              addition as a copy of <filename>foo</filename>, and
              <filename>foo</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories.</para>
		<para> Questo comando è esattamente equivalente
        a <command>svn copy foo bar;svn delete foo</command>.
 			<filename>bar</filename> è pianificato
              per essere aggiunto come copia di <filename>foo</filename>,
			e <filename>foo</filename> è pianificato per la rimozione.
            <command>svn move</command> non crea directory
			itermedie.
			</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
        <title>Modificare il Repository senza una copia di lavoro</title>

        <!-- ### pll - Fri 07 Feb 2003 12:55:07                            -->
        <!-- I find this sidebar rather confusing here, since you really   -->
        <!-- haven't gone through explaining the svn command line syntax   -->
        <!-- anywhere.  Maybe a short section explaining that subversion   -->
        <!-- can be used both in networked and non-networked environments, -->
        <!-- and which types of commands need URLs, etc.  This should      -->
        <!-- probably be in chapter 2 (around the "Subversion in action"   -->
        <!-- though, so that this sidebar makes more sense.                -->

        <para lang="en">Earlier in this chapter, we said that you have to commit
          any changes that you make in order for the repository to
          reflect these changes.  That's not entirely true&mdash;there
          <emphasis>are</emphasis> some use cases that immediately
          commit tree changes to the repository.  This only happens
          when a subcommand is operating directly on a URL, rather
          than on a working-copy path.  In particular, specific uses
          of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can work with URLs.</para>
	  <para> Precedentemente, in questo capitolo,si è detto che bisogna
		fare il commit di tutti i cambiamenti fatti
         per fare in modo che il repository conservi questi
		cambiamenti.Non è completamente vero&mdash;
		ci <emphasis>sono</emphasis>
        alcuni casi in cui il commit viene fatto immediatamente
		al repository.
        Questo accade quando un comando sta operando direttamente su un URL
		piuttosto che su una copia di lavoro.In particolare,utilizzi specifici
		dei comandi <command>svn mkdir</command>, <command>svn
          	copy</command>, <command>svn move</command>, e
          	<command>svn delete</command> possono lavorare con URLs.</para>

        <para lang="en">URL operations behave in this manner because commands
          that operate on a working copy can use the working copy as a
          sort of <quote>staging area</quote> to set up your changes
          before committing them to the repository.  Commands that
          operate on URLs don't have this luxury, so when you operate
          directly on a URL, any of the above actions represent an
          immediate commit.</para>
        <para>Le operazioni sulle URL si comportano in questo modo perchè
		i comandi che operano su una copia di lavoro possono usarla come
		una specie di <quote>staging area</quote> in cui si
        conservano le modifiche effettuate
		prima di fare il commit sul repository.I comandi che operano direttamente
		sulle URLs non si possono permettere questo lusso,
        perciò se si opera
		direttamente su un URL,
        ognuna delle azioni descritte sopra rappresenta un commit immediato. </para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
      <title>Esaminare le modifiche apportate</title>

      <para lang="en">Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can make a
        more accurate log message.  You may also discover that
        you've inadvertently changed a file, and this gives you a
        chance to revert those changes before committing.
        Additionally, this is a good opportunity to review and
        scrutinize changes before publishing them.  You can see
        exactly what changes you've made by using <command>svn
        status</command>, <command>svn diff</command>, and
        <command>svn revert</command>.  You will usually use the first
        two commands to find out what files have changed in your
        working copy, and then perhaps the third to revert some (or
        all) of those changes.</para>
      <para>Una volta che si è finito di apportare le modifiche,
      bisogna fare il commit sul repository,ma prima
		è una buona idea guardare con attenzione cosa si è cambiato esattamente.
		Esaminando le modifiche prima di effettuare il commit
        si può scrivere un messaggio di log più accurato.
		Ci si può anche rendere conto di aver modificato
         un file inavvertitamente e si può tornare indietro
		prima di fare il commit.
		Inoltre questa è una buona opportunità per rivedere e
        analizzare le modifiche fatte prima di pubblicarle.
		 Per vedere esattamente le modifiche apportate
         si può usare il comando
		<command>svn  status</command>, <command>svn diff</command>, and
        <command>svn revert</command>.
        In genere si usa il primo dei due comandi per vedere quali
		files sono stati modificati nella propria copia di lavoro,
        e il terzo per annullare alcune
	delle modifiche effettuate(o anche tutte). </para>

      <!-- pll - Fri 07 Feb 2003 12:55:07                                   -->
      <!-- I find this following paragraph a little unclear.  Mostly for    -->
      <!-- the same reasons as I found the sidebar above unclear.  There    -->
      <!-- hasn't been much discussion of the Subversion architecture, and  -->
      <!-- therefore, nothing has been clearly stated wrt the fact that the -->
      <!-- repository may not be local.                                     -->
    <!-- =================================================================== -->
	<!-- ************************************************************** -->
      <para lang="en">Subversion has been optimized to help you with this task,
        and is able to do many things without communicating with the
        repository.  In particular, your working copy contains a
        secret cached <quote>pristine</quote> copy of each version
        controlled file within the <filename>.svn</filename> area.
        Because of this, Subversion can quickly show you how your
        working files have changed, or even allow you to undo your
        changes without contacting the repository.</para>
	<para>Subversion è stato ottimizzato per fornire aiuto con questo task,
		e riesce a fare molte cose senza comunicare con il repository.
		In particolare, la propria cartella di lavoro
        contiene una copia nascosta
		<quote>ripristino</quote> di tutte le versioni controllate
        all'interno di
		<filename>.svn</filename>.Per questo motivo,
        Subversion può velocemente mostrare
		come sono stati modificati i file di lavoro,
         o anche permettere di annullare le modifiche
		senza contattare il repository.
	</para>

      <sect3 id="svn.tour.cycle.examine.status">
        <title><command>svn status</command></title>

        <para lang="en">You'll probably use the <command>svn status</command>
          command more than any other Subversion command.</para>
        <para> Il comando <command>svn status</command> è probabilmente
		il più usato tra i comandi di Subversion.</para>
        <sidebar>
          <title>Utenti CVS : Mantenere quell' Update!</title>

          <para lang="en">You're probably used to using <command>cvs
            update</command> to see what changes you've made to your
            working copy.  <command>svn status</command> will give you
            all the information you need regarding what has changed in
            your working copy&mdash;without accessing the repository
            or potentially incorporating new changes published by
            other users.</para>
        <para> Probabilmente si è soliti utilizzare il comando <command>cvs
            update</command>  per vedere quali modifiche sono state fatte
		 alla propria cartella di lavoro.
		Il comando <command>svn status</command> fornisce tutte
        le informazioni necessarie
		su cosa è stato cambiato nella propria cartella di lavoro&mdash;
		senza accedere al repository o potenzialmente incorporando
        le nuove modifiche fatte da altri utenti.</para>
          <para lang="en">In Subversion, <command>update</command> does just
            that&mdash;it updates your working copy with any changes
            committed to the repository since the last time you've
            updated your working copy.  You'll have to break the habit
            of using the <command>update</command> command to see what
            local modifications you've made.</para>
		<para> In Subversion,il comando <command>update</command>
		fa solo quello&mdash;aggiorna la cartella di lavoro con tutti
        i cambiamenti
		che sono stati committati sul repository dall'ultimo aggiornamento fatto.
		Per vedere le modifiche locali
        apportate bisogna perdere l'abitudine di utilizzare il comando
		<command>update</command>.</para>
        </sidebar>

        <para lang="en">If you run <command>svn status</command> at the top of
          your working copy with no arguments, it will detect all file
          and tree changes you've made.  Below are examples of
          the different status codes that <command>svn
          status</command> can return.  (Note that the text following
          <literal>#</literal> is not
          actually printed by <command>svn status</command>.)</para>
	<para>Digitando il comando <command>svn status</command>
	in testa alla propria cartella di lavoro,
         senza argomenti, esso cercherà tutti
		i file e le strutture ad albero che sono state create.
		Riportiamo degli esempi di codice relativi a stati differenti
         che il comando
		 <command>svn status</command> può restituire.
         (Si noti che il testo che segue <literal>#</literal>
		non è attualmente visualizzato da  <command>svn status</command>.)</para>

        <screen>
  L     some_dir            # svn left a lock in the .svn area of some_dir
M       bar.c               # the content in bar.c has local modifications
 M      baz.c               # baz.c has property but no content modifications
X       3rd_party           # dir is part of an externals definition
?       foo.o               # svn doesn't manage foo.o
!       some_dir            # svn manages this, but it's missing or incomplete
~       qux                 # versioned as file/dir/link, but type has changed
I       .screenrc           # svn doesn't manage this, and is set to ignore it
A  +    moved_dir           # added with history of where it came from
M  +    moved_dir/README    # added with history and has local modifications
D       stuff/fish.c        # file is scheduled for deletion
A       stuff/loot/bloo.h   # file is scheduled for addition
C       stuff/loot/lump.c   # file has textual conflicts from an update
 C      stuff/loot/glub.c   # file has property conflicts from an update
R       xyz.c               # file is scheduled for replacement
    S   stuff/squawk        # file or dir has been switched to a branch
     K  dog.jpg             # file is locked locally; lock-token present
     O  cat.jpg             # file is locked in the repository by other user
     B  bird.jpg            # file is locked locally, but lock has been broken
     T  fish.jpg            # file is locked locally, but lock has been stolen

</screen>

        <para lang="en">In this output format <command>svn status</command>
          prints five columns of characters, followed by several
          whitespace characters, followed by a file or directory name.
          The first column tells the status of a file or directory
          and/or its contents.  The codes printed here are:</para>
	<para> In questo formato di output il comando <command>svn status</command>
		 visualizza cinque colonne di caratteri, seguite da diversi spazi,
		seguiti da un nome di file o directory e/o il loro contenuto.
		I codici visualizzati sono:</para>

        <variablelist>

          <varlistentry>
            <term><computeroutput>A     oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
		<para>  Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename>sono stati pianificati per
			essere aggiunti al repository. </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy.  You must resolve
                this conflict before committing your changes to the
                repository.</para>
		<para> Il file <filename>oggetto</filename> è in uno stato
			di conflitto.Questo succede quando le modifiche ricevute
            dal server, durante un aggiornamento
			sono state sovraposte a modifiche fatte
            localmente nella propria cartella di lavoro.
			Bisogna risolvere questo conflitto
            prima di fare il commit delle modifiche sul repository.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename>sono stati pianificati per
			essere cancellati dal repository.  </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The contents of the file <filename>item</filename>
                have been modified.</para>
		<para>Il contenuto del file <filename>oggetto</filename>
                è stato modificato.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>R      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> has been scheduled to
                replace <filename>item</filename> in the repository.
                This means that the object is first deleted, then
                another object of the same name is added, all within a
                single revision.</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename>sono stati pianificati per
			sostituire <filename>oggetto</filename> nel repository.
			Questo significa che prima l'oggetto
            viene cancellato,poi viene aggiunto un altro oggetto
			con lo stesso nome,tutto nella stessa versione.  </para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>X      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The directory <filename>item</filename> is
                unversioned, but is related to a Subversion externals
                definition.  To find out more about externals
                definitions, see <xref
                linkend="svn.advanced.externals"/>.</para>
		<para>La directory <filename>oggetto</filename> non è sotto  revisione,
                ma è collegata ad una definizione esterna di Subversion.
		    Per saperne di più sulle definizioni esterne
                si veda <xref
                linkend="svn.advanced.externals"/>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>?      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> is not under version
                control.  You can silence the question marks by either
                passing the <option>--quiet</option>
                (<option>-q</option>) switch to <command>svn
                status</command>, or by setting the
                <literal>svn:ignore</literal> property on the parent
                directory.  For more information on ignored files, see
                <xref linkend="svn.advanced.props.special.ignore" />.</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename>non sono sotto il controllo di versione.
			Si può evitare il punto interrogativo o
           usando l'opzione <option>--quiet</option>
                (<option>-q</option>) con il comando <command>svn
                status</command>, oppure settando la proprietà
                <literal>svn:ignore</literal> nella directory padre.
			Per maggiori informazioni sui files ignorati, si veda
                <xref linkend="svn.advanced.props.special.ignore" />.</para>


            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>!      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> is under version control but
                is missing or somehow incomplete.  The item can be
                missing if it's removed using a non-Subversion
                command.  In the case of a directory, it can be
                incomplete if you happened to interrupt a checkout or
                update.  A quick <command>svn update</command> will
                refetch the file or directory from the repository, or
                <command>svn revert file</command> will restore a
                missing file.</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename> sono sotto
            il controllo di versionema sono mancanti o incompleti.
		L'oggetto può essere mancante perchè è stato
        rimosso senza usare un comando Subversion.
		Nel caso di una directory, può essere incompleta se si è interrotto
		un checkout o un update.Un comando veloce <command>svn update</command>
        andrà a riprendere
		il file o la directory dal repository,
        o il comando <command>svn revert file</command>
		riparerà il file mancante.
               </para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>~      item</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> is in the repository as one
                kind of object, but what's actually in your working
                copy is some other kind.  For example, Subversion
                might have a file in the repository, but you removed
                the file and created a directory in its place, without
                using the <command>svn delete</command> or
                <command>svn add</command> command.</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename> è salvato nel repository
            come un tipo di oggetto,
               	 ma è salvato, attualmente , nella propria copia di lavoro
                     come  oggetto di altro tipo.
			Ad esempio Subversion,potrebbe avere un file nel repository,
             ma è stato rimosso il file ed è stata
			creata una directory al suo posto ,senza aver usato il comando
               	<command>svn delete</command> oppure il comando
               	 <command>svn add</command>.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>I      oggetto</computeroutput></term>
            <listitem>
              <para lang="en">The file, directory, or symbolic link
                <filename>item</filename> is not under version control,
                and Subversion is configured to ignore it during
                <command>svn add</command>, <command>svn import</command>
                and <command>svn status</command> operations.  For more
                information on ignored files, see <xref
                linkend="svn.advanced.props.special.ignore"/>.  Note that this
                symbol only shows up if you pass the
                <option>--no-ignore</option> option to <command>svn
                status</command>&mdash;otherwise the file would be
                ignored and not listed at all!</para>
		<para>Il file,la directory o il collegamento simbolico
			<filename>oggetto</filename> non sono sotto
            il controllo di versione,
                e Subversion è configurata per ignorarli
                durante le operazioni di
                <command>svn add</command>, <command>svn import</command>
                and <command>svn status</command>.
                Per maggiori informazioni sui file ignorati si
                veda <xref
                linkend="svn.advanced.props.special.ignore"/>. Si noti che
                 questo simbolo
                viene mostrato soltanto se si è usata l'opzione
                <option>--no-ignore</option> con il comando <command>svn
                status</command>&mdash;altrimenti il
                file viene ignorato e non viene elencato.
                </para>

            </listitem>
          </varlistentry>

        </variablelist>

        <para lang="en">The second column tells the status of a file or
          directory's properties (see <xref
          linkend="svn.advanced.props"/> for more information on
          properties).  If an <computeroutput>M</computeroutput>
          appears in the second column, then the properties have been
          modified, otherwise a whitespace will be printed.</para>
    	<para>La seconda colonna indica lo stato del file o le proprietà della
              directory  (si veda <xref
              linkend="svn.advanced.props"/> per maggiori informazioni sulle proprietà ).
        	  Se appare una <computeroutput>M</computeroutput>
              nella seconda colonna,allora vuol dire che le proprietà
        	  sono state modificate,altrimenti sarà visualizzato uno sapzio vuoto.
          </para>


            <para lang="en">The third column will only show whitespace or an
              <computeroutput>L</computeroutput> which means that
              Subversion has locked the directory's
              <filename>.svn</filename> working area.  You will see an
              <computeroutput>L</computeroutput> if you run <command>svn
              status</command> in a directory where an <command>svn
              commit</command> is in progress&mdash;perhaps when you are
              editing the log message.  If Subversion is not running, then
              presumably Subversion was interrupted and the lock needs to
              be cleaned up by running <command>svn cleanup</command>
              (more about that later in this chapter).</para>
        	 <para >La terza colonna mostra soltanto spazi bianchi o una
                  <computeroutput>L</computeroutput> che
                  indica che la directory <filename>.svn</filename>
        		 è stata bloccata da Subversion.
                 Si vedrà una <computeroutput>L</computeroutput> se si esegue il
        		comando  <command>svn status</command>
                in una directory in cui è in corso un comando di
        		<command>svn commit</command> &mdash;ad esempio quando si
                editano messaggi di log.
        	  Se Subversion non è in esecuzione,probabilmente
              è stato interrotto e il blocco  serve
        		per ripulire l'esecuzione  <command>svn cleanup</command>
                  (si dirà di più su questo argomento nel seguito del capitolo).</para>


        <para lang="en">The fourth column will only show whitespace or a
          <computeroutput>+</computeroutput> which means that the file
          or directory is scheduled to be added or modified with
          additional attached history.  This typically happens when you
          <command>svn move</command> or <command>svn copy</command> a file
          or directory.  If you see
          <computeroutput>A&nbsp;&nbsp;+</computeroutput>, this means
          the item is scheduled for addition-with-history.  It could be
          a file, or the root of a copied directory.
          <computeroutput>+</computeroutput>
          means the item is part of a subtree scheduled for
          addition-with-history, i.e. some parent got copied, and it's
          just coming along for the ride.
          <computeroutput>M&nbsp;&nbsp;+</computeroutput> means the item
          is part of a subtree scheduled for addition-with-history,
          <emphasis>and</emphasis> it has local modifications.  When you
          commit, first the parent will be added-with-history (copied),
          which means this file will automatically exist in the copy.
          Then the local modifications will be uploaded into the
          copy.</para>
	<para> La quarta colonna mostra soltanto spazi bianchi o un
		<computeroutput>+</computeroutput> che indica che è pianificato che
        il file o la
		directory vengano aggiunti o modificati con uno
		storico allegato.Questo succede tipicamente quando si eseguono i comandi
		<command>svn move</command> o <command>svn copy</command>.
		Se si vede <computeroutput>A&nbsp;&nbsp;+</computeroutput>,
        vuol dire che l'oggetto è pianificato
		per essere aggiunto con il suo storico.
		Potrebbe essere un file oppure la root di una directory copiata.
		<computeroutput>+</computeroutput> indica che l'oggetto
         è parte di un sottoalbero pianificato
		per essere aggiunto con il suo storico,
        alcuni nodi padre possono essere stati già copiati
		e sta aspettando il suo turno.
		<computeroutput>M&nbsp;&nbsp;+</computeroutput>,
         indica che l'oggetto è parte di un sottoalbero
		pianificato per essere aggiunto con il suo storico,
        <emphasis>e</emphasis> è stato modificato localmente.
		Quando si esegue il commit,per prima cosa viene
         aggiunto il nodo padre (copiato),
		il che significa che il file automaticamente
        esisterà in copia.Le modifiche locali saranno aggiornate nella copia.
 </para>

        <para lang="en">The fifth column will only show whitespace or an
          <computeroutput>S</computeroutput>.  This signifies that the
          file or directory has been switched from the path of the
          rest of the working copy (using <command>svn
          switch</command>) to a branch.</para>
	<para>La quinta colonna mostra solo spazi bianchi o una
          <computeroutput>S</computeroutput>.  Questo significa che il
          file o la  directory sono stati spostati
          dal percorso della cartella di lavoro
          (usando il comando <command>svn
          switch</command>) in un ramo.</para>


        <para lang="en">The sixth column shows information about locks, which is
          further explained in <xref linkend="svn.advanced.locking"/>.
          (These are not the same locks as the ones indicated by an
          <computeroutput>L</computeroutput> in the third column;
          see <xref linkend="svn.advanced.locking.meanings"/>.)</para>
        <para>La sesta colonna mostra informazioni sui blocchi, che sono stati
          spiegati in <xref linkend="svn.advanced.locking"/>.
          (Non sono gli stessi blocchi  indicati dalla
          <computeroutput>L</computeroutput> nella terza colonna;
          si veda <xref linkend="svn.advanced.locking.meanings"/>.)</para>

        <para lang="en">If you pass a specific path to <command>svn
          status</command>, it gives you information about that item
          alone:</para>
	<para>Se si passa un percorso specifico al comando <command>svn
          status</command>, esso restituisce le
           informazioni solo su quell'oggetto:
          </para>


        <screen>
$ svn status stuff/fish.c
D      stuff/fish.c
</screen>

        <para lang="en"><command>svn status</command> also has a
          <option>--verbose</option> (<option>-v</option>) switch,
          which will show you the status of <emphasis>every</emphasis>
          item in your working copy, even if it has not been
          changed:</para>
	 <para> Il comando <command>svn status</command> ha anche un'opzione
          <option>--verbose</option> (<option>-v</option>) ,
          che mostra lo stato di  <emphasis>ogni</emphasis>
         oggetto presente nella propria cartella di lavoro,
          anche se non è stato modificato:</para>


        <screen>
$ svn status --verbose
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>
 

        <para lang="en">This is the <quote>long form</quote> output of
          <command>svn status</command>.  The first column remains
          the same, but the second column shows the working-revision of
          the item.  The third and fourth columns show the revision in
          which the item last changed, and who changed it.</para>
 	<para>Questa è la <quote>forma estesa </quote> di output del comando
          <command>svn status</command>. La prima colonna rimane la stessa,
          ma la seconda mostra la versione di lavoro dell'oggetto.
          La terza e la quarta colonna mostrano la versione nella quale
	   l'oggetto ha subito l'ultimo cambiamento, e chi lo ha eseguito.</para>


        <para lang="en">None of the above invocations to <command>svn
          status</command> contact the repository, they work only
          locally by comparing the metadata in the
          <filename>.svn</filename> directory with the working copy.
          Finally, there is the <option>--show-updates</option>
          (<option>-u</option>) switch, which contacts the repository
          and adds information about things that are
          out-of-date:</para>
	<para>Nessuna delle invocazioni descritte sopra al comando  <command>svn
          status</command> contatta il repository, lavorano solo localmente
          confrontando i metadati presenti nella directory
          <filename>.svn</filename> con la cartella di lavoro.
          Infine , c'è l'opzione <option>--show-updates</option>
          (<option>-u</option>) ,
          che contatta il repository e aggiunge informazioni
         sulle cose che non sono aggiornate:</para>


        <screen>
$ svn status --show-updates --verbose
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</screen>

        <para lang="en">Notice the two asterisks: if you were to run
          <command>svn update</command> at this point, you would
          receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&mdash;you'll need to update and get the
          server changes on <filename>README</filename> before you
          commit, or the repository will reject your commit for being
          out-of-date.  (More on this subject later.)</para>
	<para>Si notino i due asterischi: se si esegue il comando
          <command>svn update</command> a questo punto, si riceveranno
          le modifiche al file <filename>README</filename>
          e al file  <filename>trout.c</filename>.
           Questo fornisce alcune informazioni molto utili&mdash;
          c'è bisogno di aggiornare e prendere le modifiche del server del file
          <filename>README</filename> prima di fare il commit,
         altrimenti il repository rifiuterà il commit perchè non si è aggiornati.
          (Maggiori informazioni sull'argomento in seguito).</para>


      </sect3>

      <sect3 id="svn.tour.cycle.examine.diff">
        <title><command>svn diff</command></title>

        <para lang="en">Another way to examine your changes is with the
          <command>svn diff</command> command.  You can find out
          <emphasis>exactly</emphasis> how you've modified things by
          running <command>svn diff</command> with no arguments, which
          prints out file changes in unified diff
          format:<footnote><para>Subversion uses its internal diff
          engine, which produces unified diff format, by default.  If
          you want diff output in a different format, specify an
          external diff program using <option>--diff-cmd</option> and
          pass any flags you'd like to it using the
          <option>--extensions</option> switch.  For example, to see
          local differences in file <filename>foo.c</filename> in
          context output format while ignoring whitespace changes, you
          might run <command>svn diff --diff-cmd /usr/bin/diff
          --extensions '-bc' foo.c</command>.</para>
          </footnote></para>
	<para>Un altro modo per esaminare le proprie modifiche è usando il comando
          <command>svn diff</command> . Si possono trovare
          <emphasis>esattamente</emphasis> le cose modificate con il comando
           <command>svn diff</command> senza argomenti,
           che mostra tutti i file modificati
          in un formato unificato :<footnote><para >
          Subversion usa la sua macchina interna per le differenze,
        che produce di default un formato unificato diff.
        Se si vuole un formato di output diverso, bisogna
		specificare un programma esterno usando
        l'opzione <option>--diff-cmd</option> e
          passando tutti i flags che si vuole usare con l'opzione
          <option>--extensions</option> .  Per esempio, per vedere
          le differenze locali nel file <filename>foo.c</filename>
          in un formato di output che ignori le modifiche degli spazi
		bianchi, si può usare il comando
          <command>svn diff --diff-cmd /usr/bin/diff
          --extensions '-bc' foo.c</command>.</para>
          </footnote></para>


        <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c	(revision 3)
+++ bar.c	(working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README	(revision 3)
+++ README	(working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c	(revision 1)
+++ stuff/fish.c	(working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h	(revision 8)
+++ stuff/things/bloo.h	(working copy)
+Here is a new file to describe
+things about bloo.
</screen>

        <para lang="en">The <command>svn diff</command> command produces this
          output by comparing your working files against the cached
          <quote>pristine</quote> copies within the
          <filename>.svn</filename> area.  Files scheduled for
          addition are displayed as all added-text, and files
          scheduled for deletion are displayed as all deleted
          text.</para>
	<para>Il comando  <command>svn diff</command> produce questo output
         confrontando i propri files di lavoro con le copie
          <quote>ripristino</quote> che si trovano nell'area
          <filename>.svn</filename> .  I files pianificati
          per essere aggiunti vengono visualizzati
         come testi aggiunti, e i files pianificati  per
         essere cancellati vengono visualizzati come testi cancellati.</para>


        <para lang="en">Output is displayed in <firstterm>unified diff
          format</firstterm>.  That is, removed lines are prefaced
          with a <literal>-</literal> and added lines are prefaced
          with a <literal>+</literal>.  <command>svn diff</command>
          also prints filename and offset information useful to the
          <command>patch</command> program, so you can generate
          <quote>patches</quote> by redirecting the diff output to a
          file:</para>
	<para>L'output è visualizzato in un <firstterm>diff formato unificato
          </firstterm>.  Questo vuol dire che ,
          le linee cancellate sono precedute da un
        <literal>-</literal> e le linee aggiunte sono precedute da un
         <literal>+</literal>.  <command>svn diff</command>
          visualizza inoltre il nome del file
           e un insieme di informazioni utili per
          <command>patch</command> patchare il programma,
          in questo modo è possibile generare
          <quote>patches</quote> ridirezionando l'otput delle
          differenze in un file:</para>


        <screen>
$ svn diff &gt; patchfile
</screen>

        <para lang="en">You could, for example, email the patch file to another
          developer for review or testing prior to commit.</para>
	<para>Ad esempio si può inviare il file patch ad un altro sviluppatore via email,
	per una revisione o un test prima di eseguire il commit.</para>



      </sect3>

      <sect3 id="svn.tour.cycle.examine.revert">
        <title><command>svn revert</command></title>

        <para lang="en">Now suppose you see the above diff output, and realize
          that your changes to <filename>README</filename> are a
          mistake; perhaps you accidentally typed that text into the
          wrong file in your editor.</para>
      <para>A questo punto si supponga che si siano analizzati gli output
		del comando diff visualizzati sopra,e si sia
        compreso che le modifiche apportate
		al file <filename>README</filename> sono un errore;
        forse si è accidentalmente
		scritto del testo nel file sbagliato.
		  </para>

        <para lang="en">This is a perfect opportunity to use <command>svn
          revert</command>.</para>
	  <para >E' l'occasione perfetta per usare il comando <command>svn
          revert</command>.</para>


        <screen>
$ svn revert README
Reverted 'README'
</screen>

        <para lang="en">Subversion reverts the file to its pre-modified state by
          overwriting it with the cached <quote>pristine</quote> copy
          from the <filename>.svn</filename> area.  But also note that
          <command>svn revert</command> can undo
          <emphasis>any</emphasis> scheduled operations&mdash;for
          example, you might decide that you don't want to add a new
          file after all:</para>
	<para>Subversion riporta il file allo stato precedente alla modifica
          sovrascrivendo la copia <quote>di ripristino </quote> presente
		nell'area <filename>.svn</filename> .Ma si noti anche che il comando
		<command>svn revert</command> può annullare
          <emphasis>qualsiasi </emphasis> operazione pianificata&mdash;ad
          esempio, si può decidere di non voler
          aggiungere un nuovo file dopo tutto:</para>

        <screen>
$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Reverted 'foo'

$ svn status foo
?      foo
</screen>

        <note>
           <para lang="en"><command>svn revert</command>
            <replaceable>ITEM</replaceable> has exactly the same
            effect as deleting <replaceable>ITEM</replaceable> from
            your working copy and then running <command>svn update -r
            BASE</command> <replaceable>ITEM</replaceable>.  However,
            if you're reverting a file, <command>svn revert</command>
            has one very noticeable difference&mdash;it doesn't have
            to communicate with the repository to restore your
            file.</para>
        		<para><command>svn revert</command>
                    <replaceable>ITEM</replaceable> ha esattamente lo stesso effetto
                    della cancellazione di <replaceable>ITEM</replaceable> dalla
                    propria copia di lavoro e l'esecuzione del comando <command>svn update -r
                    BASE</command> <replaceable>ITEM</replaceable>.  Comunque,
                    se si sta riportando un file allo stato precedente,
        		    il comando <command>svn revert</command>
                    ha una notevole differenza&mdash;non deve comunicare
                    con il repository per ripristinare il
                    file.</para>

        </note>

        <para lang="en">Or perhaps you mistakenly removed a file from version
          control:</para>
                	 <para>o forse per errore è stato rimosso un file dal
                           controllo di versione
                          :</para>


        <screen>
$ svn status README
       README

$ svn delete README
D         README

$ svn revert README
Reverted 'README'

$ svn status README
       README
</screen>

      </sect3>

      <sidebar>
          <title>Guarda Ma! Nessuna Rete!</title>

        <para lang="en">All three of these commands (<command>svn
          status</command>, <command>svn diff</command>, and
          <command>svn revert</command>) can be used without any
          network access.  This makes it easy to manage your
          changes-in-progress when you are somewhere without a network
          connection, such as travelling on an airplane, riding a
          commuter train or hacking on the beach.</para>
            	<para>Tutti e tre questi comandi (<command>svn
                      status</command>, <command>svn diff</command>, e
                      <command>svn revert</command>) possono
                      essere usati senza effettuare nessun accesso
            	      alla rete.Questo rende semplice gestire i propri
                      cambiamenti in corso
                      quando si è in luoghi in cui non si ha a disposizione
                      una connessione,
                      ad esempio se si viaggia in aereo,
                      se si è in treno o sulla spiaggia.</para>


        <para lang="en">Subversion does this by keeping private caches of
          pristine versions of each versioned file inside of the
          <filename>.svn</filename> administrative areas.  This allows
          Subversion to report&mdash;and revert&mdash;local
          modifications to those files <emphasis>without network
          access</emphasis>.  This cache (called the
          <quote>text-base</quote>) also allows Subversion to send the
          user's local modifications during a commit to the server as
          a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&mdash;even if you
          have a fast net connection, it's much faster to send only a
          file's changes rather than the whole file to the server.  At
          first glance, this might not seem that important, but
          imagine the repercussions if you try to commit a one line
          change to a 400MB file and have to send the whole file to
          the server!</para>
            	<para>Subversion rende possibile tutto questo
                      conservando copie private
                      di versioni di ripristino di ogni file
                      sotto controllo di versione
                      nelle aree amministrative<filename>.svn</filename> .
                      Questo permette a
                      Subversion di riportare&mdash;e annullare&mdash;le modifiche locali
                      di questi files <emphasis>senza accesso di rete
                      </emphasis>.  Questa cache (chiamata
                      <quote>text-base</quote>) permette inoltre a Subversion
                      di inviare
                      le modifiche locali effettuate da un utente durante
                      il commit al server come
                      un compresso <firstterm>delta</firstterm> (or
                      <quote>differenza</quote>) rispetto alla versione
                      di ripristino.
                      Avere questa cache è estremamente
                      vantaggioso&mdash;anche se si possiede
                      una connessione molto veloce,
            	      è comunque più rapido spedire al server soltanto
                      le modifiche apportate ad un file piuttosto che
            	      l'intero file,questo potrebbe sembrare poco importante
                      ma si pensi alle ripercussioni
                      se si cerca di fare il commit di una sola riga
                      modificata su un file di 400 MB
            	      e si deve spedire l'intero file al server!</para>

    </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
      <title>Risolvere i conflitti(Mettere insieme i cambiamenti operati da altri)</title>

      <para lang="en">We've already seen how <command>svn status -u</command>
        can predict conflicts.  Suppose you run <command>svn
        update</command> and some interesting things occur:</para>
            	<para>Si è già visto come il comando
                      <command>svn status -u</command>
                      può prevedere i conflitti.
                      Si supponga di eseguire il comando <command>svn
                      update</command> e che accada qualcosa di interessante:</para>


      <screen>
$ svn update
U  INSTALL
G  README
C  bar.c
Updated to revision 46.
</screen>

      <para lang="en">The <computeroutput>U</computeroutput> and
        <computeroutput>G</computeroutput> codes are no cause for
        concern; those files cleanly absorbed changes from the
        repository.  The files marked with
        <computeroutput>U</computeroutput> contained no local changes
        but were <computeroutput>U</computeroutput>pdated with changes
        from the repository.  The <computeroutput>G</computeroutput>
        stands for mer<computeroutput>G</computeroutput>ed, which
        means that the file had local changes to begin with, but the
        changes coming from the repository didn't overlap with the local
        changes.</para>
            	<para>I codici di output  <computeroutput>U</computeroutput> e
                      <computeroutput>G</computeroutput>  non sono utili
                      alla causa; questi files semplicemente hanno assorbito
                      le modifiche dal
            	      repository.  I files marcati con
                      <computeroutput>U</computeroutput> non contengono
                      modifiche locali
                      ma sono stati aggiornati con le modifiche presenti
                      nel repository.
            	      La <computeroutput>G</computeroutput>
                      indica il merge , il che significa che il file
                      ha modifiche locali
            	      ma  che le  modifiche proveniente dal repository non
            	      hanno sovrascritto quelle locali.</para>


      <para lang="en">But the <computeroutput>C</computeroutput> stands for
        conflict.  This means that the changes from the server overlapped
        with your own, and now you have to manually choose between
        them.</para>
                    <para> La <computeroutput>C</computeroutput> indica un
                           conflitto.
                           Questo vuol dire che le modifiche del server
                           hanno sovrascritto quelle locali,
            	           e ora bisogna scegliere manualmente tra esse.
                     </para>


      <para lang="en">Whenever a conflict occurs, three things typically occur
        to assist you in noticing and resolving that conflict:</para>
                       <para>Ogni volta che si crea un conflitto,
                             servono tipicamente tre cose per
            		         avvisare del conflitto ed aiutare a risolverlo:
                       </para>


      <itemizedlist>

        <listitem>
          <para lang="en">Subversion prints a <computeroutput>C</computeroutput>
            during the update, and remembers that the file is in a
            state of conflict.</para>
            	 <para>Subversion visualizza una
                       <computeroutput>C</computeroutput>
                        durante l'aggiornamento, e ricorda che
                        il file è in stato di conflitto.
                 </para>

        </listitem>

        <listitem>
          <para lang="en">If Subversion considers the file to be of a mergeable
            type, it places <firstterm>conflict
            markers</firstterm>&mdash;special strings of text which
            delimit the <quote>sides</quote> of the
            conflict&mdash;into the file to visibly demonstrate the
            overlapping areas.  (Subversion uses the
            <literal>svn:mime-type</literal> property to decide if a
            file is capable of contextual, line-based merging.  See
            <xref linkend="svn.advanced.props.special.mime-type"/> to learn more.)</para>
             	<para>Se Subversion considera che il file è compatibile,
                      inserisce dei <firstterm>marcatori di conflitto
                      </firstterm>&mdash;stringhe speciali di testo che
                      delimitano gli
                      <quote>estremi</quote> del conflitto&mdash;all'interno
                      del file per rendere visibili le aree
            		  sovrapponibili.
                      (Subversion usa la proprietà
                      <literal>svn:mime-type</literal>per decidere se si può
                      fare il merge del file.
                      Per saperne di più si veda
                     <xref linkend="svn.advanced.props.special.mime-type"/> .)
                </para>

        </listitem>

        <listitem>
          <para lang="en">For every conflicted file, Subversion places up to
            three extra unversioned files in your working copy:</para>
            	<para>Per ogni file che ha avuto un conflitto,
                       Subversion mette nella propria copia di lavoro
                       tre files extra che non sono sotto
                       il controllo di versione.
                </para>


          <variablelist>

            <varlistentry>
              <term><filename>filename.mine</filename></term>
              <listitem>
                <para lang="en">This is your file as it existed in your working
                  copy before you updated your working copy&mdash;that
                  is, without conflict markers.  This file has your
                  latest changes in it and nothing else.  (If
                  Subversion considers the file to be unmergeable,
                  then the <filename>.mine</filename> file isn't
                  created, since it would be identical to the working
                  file.)</para>
                          <para>E' il file che c'era nella copia di lavoro prima
                               dell'aggiornamento&mdash;
                               e non ha marcatori di conflitto.
                               Questo file contiene le ultime modifiche fatte e
                               nient'altro.(Se
                               Subversion considera il  file non compatibile,
                               allora  il file <filename>.mine</filename>
                               non viene creato,
                               poichè potrebbe essere identico al
                               file di lavoro).
                        </para>

              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>filename.rOLDREV</filename></term>
              <listitem>
                <para lang="en">This is the file that was the
                  <literal>BASE</literal> revision before you updated
                  your working copy.  That is, the file that you
                  checked out before you made your latest
                  edits.</para>
             			<para>Questo è il file nella versione
                              <literal>BASE</literal> precedente
                              all'aggiornamento della copia di lavoro.
            		          E' il file di cui si è fatto il check out prima
                              delle ultime modifiche.
                        </para>

              </listitem>
            </varlistentry>

            <varlistentry>
              <term><filename>filename.rNEWREV</filename></term>
              <listitem>
                <para lang="en">This is the file that your Subversion client
                  just received from the server when you updated your
                  working copy.  This file corresponds to the
                  <literal>HEAD</literal> revision of the
                  repository.</para>
                		<para>Questo è il file che il client di Subversion
                              ha appena ricevuto dal server quando si è fatto
                              l'aggiornamento della copia di lavoro.
                              Questo file corrisponde alla revisione
                              <literal>HEAD</literal> del
                              repository.
                        </para>

              </listitem>
            </varlistentry>

          </variablelist>

          <para lang="en">Here <literal>OLDREV</literal> is the revision number
            of the file in your <filename>.svn</filename> directory
            and <literal>NEWREV</literal> is the revision number of
            the repository <literal>HEAD</literal>.</para>
            	  <para> <literal>OLDREV</literal> è il numero di revisione del
                         file nella directory <filename>.svn</filename>
                        e <literal>NEWREV</literal> è il numero di revisione del
                         repository <literal>HEAD</literal>.</para>

        </listitem>

      </itemizedlist>

      <para lang="en">For example, Sally makes changes to the file
        <filename>sandwich.txt</filename> in the repository.  Harry has
        just changed the file in his working copy and checked it in.
        Sally updates her working copy before checking in and she gets
        a conflict:</para>
            	<para>Ad esempio, Sally modifica il file
                    <filename>sandwich.txt</filename> nel repository.
                    Harry ha
                    appena modificato il  file nella sua copia di lavoro e
                    ha fatto il  check in.
                    Sally ha aggiornato la sua copia di lavoro prima del
                    check in e ha generato un conflitto:
                   </para>


      <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>

      <para lang="en">At this point, Subversion will <emphasis>not</emphasis>
        allow you to commit the file <filename>sandwich.txt</filename>
        until the three temporary files are removed.</para>
             	<para>A questo punto , Subversion <emphasis>non</emphasis>
                    permetterà il commit del file
                    <filename>sandwich.txt</filename>
                    finchè non vengono rimossi i tre files temporanei.</para>


      <screen>
$ svn commit --message "Add a few more things"
svn: Commit failed (details follow):
svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</screen>

      <para lang="en">If you get a conflict, you need to do one of three
        things:</para>
            	<para>Se si ha un conflitto, bisogna fare
                      una di queste tre cose:</para>


        <itemizedlist>

          <listitem>
            <para lang="en">Merge the conflicted text <quote>by hand</quote> (by
              examining and editing the conflict markers within the
              file).</para>
            		<para>Sistemare il conflitto <quote>a mano</quote>
                          (esaminando e
                          modificando i marcatori di conflitto
                          all'interno del file).</para>

          </listitem>

          <listitem>
            <para lang="en">Copy one of the temporary files on top of your
              working file.</para>
            		<para>copiare uno dei files temporanei
                          in testa al file di lavoro.</para>

          </listitem>

          <listitem>
            <para lang="en">Run <command>svn revert &lt;filename&gt;</command>
              to throw away all of your local changes.</para>
            		<para>Eseguire il comando  <command>svn revert &lt;
                          filename&gt;</command>
                          per annullare tutte le modifiche fatte in locale.
                    </para>

          </listitem>

        </itemizedlist>

      <para lang="en">Once you've resolved the conflict, you need to let
        Subversion know by running <command>svn resolved</command>.
        This removes the three temporary files and Subversion no
        longer considers the file to be in a state of
        conflict.<footnote><para lang="en">You can always remove the temporary
        files yourself, but would you really want to do that when
        Subversion can do it for you?  We didn't think so.</para>
        </footnote></para>
                <para>Una volta risolto il conflitto, bisogna informare
                    Subversion eseguendo il comando
                    <command>svn resolved</command>.
                    In questo modo vengono rimossi i tre files
                    temporanei e Subversion non considera più il file
                    in stato di conflitto.
                    <footnote><para>Si possono sempre rimuovere i files
                    autonomamente,ma perchè farlo se Subversion può farlo
            	    al nostro posto?Non la pensavamo così.
                  </para>
                    </footnote></para>

      <screen>
$ svn resolved sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>

      <sect3 id="svn.tour.cycle.resolve.byhand">
        <title>Risolvere i conflitti a mano</title>

        <para lang="en">Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
            	<para>Risolvere i conflitti a mano può risultare
                difficile la prima volta che ci si prova,
                     ma con un pò di pratica, può diventare facile
                     come cadere dalla bicicletta.</para>


        <para lang="en">Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and we're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflicts.
          First, let's take a look at the file:</para>
             	<para>Ecco un esempio.  Durante una collaborazione,
                 si è modificato lo stesso file che ha modificato
            		anche Sally,il file
                      <filename>sandwich.txt</filename>nello stesso momento.
                      Sally
                      fa il commit delle sue modifiche,e quando si fa
                      l'aggiornamento della propria copia di lavoro,
                       si genera un conflitto e bisogna modificare il file
                      <filename>sandwich.txt</filename> per risolverlo.
                     Per prima cosa diamo uno sguardo al file:</para>


        <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>


        <para lang="en">The strings of less-than signs, equal signs, and
          greater-than signs are conflict markers, and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
            	<para>I segni di minore,maggiore e uguale sono marcatori di
                      conflitto, e non fanno parte dei
                      dati presenti nel conflitto.
                      Bisogna assicurarsi di toglierli prima di
                      eseguire il commit.
                      Il testo compreso tra i primi due insiemi
                      di marcatori è composto dalle modifiche
                      fatte nell'area in conflitto:</para>

        <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>

        <para lang="en">The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
            	<para>Il testo compreso tra il secondo e terzo
                      insieme di marcatori di conflitto
                     è il testo del commit di Sally:</para>


        <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>

        <para lang="en">Usually you won't want to just delete the conflict
          markers and Sally's changes&mdash;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  So this is where you pick up the phone or walk
          across the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.<footnote><para>And if you
          ask them for it, they may very well ride you out of town on
          a rail.</para></footnote> Once you've agreed on the changes
          you will check in, edit your file and remove the conflict
          markers.</para>
            	<para>Di solito non si vogliono solo cancellare i
                 marcatori di conflitto e le modficihe di Sally
                     &mdash;resterebbe spiacevolmente sorpresa
                     quando arriva il panino e non è quello che voleva.
                      Così è il caso di prendere il telefono o di andare
                      nell'ufficio di Sally
                      e spiegarle che non si può avere un
                      sauerkraut da un ristorante Italiano .<footnote><para>
                      E se gielo chiedi
                      ti manderebbero fuori città su un treno.
                      </para></footnote> Una volta che si è daccordo
                      sulle modifiche
                      si farà il check in, si modificherà il file e
                      si cancelleranno i marcatori di conflitto.</para>


        <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>

        <para lang="en">Now run <command>svn resolved</command>, and you're
          ready to commit your changes:</para>
            	<para>A questo punto con il comando
                <command>svn resolved</command>, si è pronti per
                      fare il commit delle modifiche:</para>

        <screen>
$ svn resolved sandwich.txt
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</screen>

        <para lang="en">Remember, if you ever get confused while editing the
          conflicted file, you can always consult the three files that
          Subversion creates for you in your working
          copy&mdash;including your file as it was before you updated.
          You can even use a third-party interactive merging tool to
          examine those three files.</para>

            	<para>Si ricordi che ,se si hanno dubbi mentre si
                modifica un file in conflitto,
            	    si possono consultare i tre files che
                    Subversion crea
                      nella copia di lavoro&mdash;
                      includendo il file com'era prima dell'aggiornamento.
                      Si può anche usare una terza-parte,
                      un tool interattivo per esaminare questi tre files.</para>

      </sect3>

      <sect3 id="svn.tour.cycle.resolve.copyover">
        <title>Copiare un file nel proprio file di lavoro</title>

        <para lang="en">If you get a conflict and decide that you want to throw
          out your changes, you can merely copy one of the temporary
          files created by Subversion over the file in your working
          copy:</para>
            	 <para>Se si è generato un conflitto e si decide di buttare via
                 le modifiche apportate,
                      basta semplicemente copiare uno dei file temporanei
                      creati da Subversion
            	    sul file presente nella propria copia di lavoro:</para>

        <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ cp sandwich.txt.r2 sandwich.txt
$ svn resolved sandwich.txt
</screen>

      </sect3>

      <sect3 id="svn.tour.cycle.resolve.revert">
        <title>Punting: Usando il comando <command>svn revert</command></title>

        <para lang="en">If you get a conflict, and upon examination decide that
          you want to throw out your changes and start your edits
          again, just revert your changes:</para>
            	 <para>Se si è generato un conflitto e dopo aver esaminato
                    le modifiche fatte
            		si decide di buttarle e ricominciare a scrivere
                    basta fare il revert delle modifiche:</para>
        <screen>
$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
</screen>

        <para lang="en">Note that when you revert a conflicted file, you don't
          have to run <command>svn resolved</command>.</para>
                     <para>Si noti che quando si fa il revert di un file
                     con conflitto non serve eseguire
                     il comando <command>svn resolved</command>.
                     </para>


      </sect3>

      <para lang="en">Now you're ready to check in your changes.  Note that
        <command>svn resolved</command>, unlike most of the other
        commands we've dealt with in this chapter, requires an
        argument.  In any case, you want to be careful and only run
        <command>svn resolved</command> when you're certain that you've
        fixed the conflict in your file&mdash;once the temporary files
        are removed, Subversion will let you commit the file even if
        it still contains conflict markers.</para>
             	<para>A questo punto si è pronti per controllare
                 le proprie modifiche.Si noti che
                    il comando <command>svn resolved</command>,
                    a differenza della maggior parte degli altri
                    comandi che si sono visti in questo capitolo, richiede
                    un argomento.  In ogni caso, bisogna essere prudenti
                    ed eseguire il comando
                    <command>svn resolved</command> soltanto se si è sicuri
                    di aver fissato i conflitti nel proprio file&mdash;
                   una volta che i files temporanei sono stati rimossi,
                   Subversion permette di eseguire il commit del file
            	   anche se contiene ancora marcatori di conflitto.</para>


    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
      <title>Fare il commit delle modifiche</title>

      <para lang="en">Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
            	<para>Finalmente!Le  modifiche sono finite,
                sono stati presi tutti i cambiamenti dal server
                   e si è pronti ad eseguire il commit delle modifiche
                   fatte, nel repository.</para>


      <para lang="en">The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a <firstterm>log message</firstterm>,
        describing your change.  Your log message will be attached to
        the new revision you create.  If your log message is brief,
        you may wish to supply it on the command line using the
        <option>--message</option> (or <option>-m</option>)
        option:</para>
            	<para>Il comando <command>svn commit</command> invia
                tutte le modifiche al repository.
                    Quando si fa il commit di una modifica
                    bisogna aggiungere un
                    <firstterm>messaggio di log </firstterm>,
                    che descriva il cambiamento.
                    Il messaggio di log sarà allegato alla nuova
                    revisione appena creata.
                    Se il messaggio di log è  breve,
                    si può aggiungerlo da riga di comando usando l'opzione
                    <option>--message</option> (o <option>-m</option>)
                   :</para>


      <screen>
$ svn commit --message "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>

      <para lang="en">However, if you've been composing your log message as you
        work, you may want to tell Subversion to get the message from
        a file by passing the filename with the
        <option>--file</option> switch:</para>
            	 <para>Comunque, se si è composto il messaggio di log
                 mentre si lavorava,
            	  si può voler dire a Subversion di prendere
                  il messaggio da file passandogli il nome del file
                    con l'opzione  <option>--file</option> :</para>


      <screen>
$ svn commit --file logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</screen>

      <para lang="en">If you fail to specify either the
        <option>--message</option> or <option>--file</option> switch,
        then Subversion will automatically launch your favorite editor
        (see the <literal>editor-cmd</literal> section in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for composing a log
        message.</para>
                    <para>Se ci si dimentica di specificare una delle due opzioni
                    <option>--message</option> o <option>--file</option>,
                    Subversion automaticamente lancia il proprio
                    editor preferito
                    (si veda la sezione <literal>editor-cmd</literal>  in
                    <xref linkend="svn.advanced.confarea.opts.config"/>)
                    per comporre un messaggio di log.</para>


      <tip>
        <para lang="en">If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete the text and save
          again.</para>
            	<para>Se si sta compilando con il proprio editor
                un messaggio di commit e si decide di annullare il commit,
                     basta chiudere l'editor senza
                     salvare le modifiche.
                     Se si è già salvato il messaggio di commit,
                      basta cancellare il testo e salvare di nuovo.
                      </para>


        <screen>
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
a)bort, c)ontinue, e)dit
a
$
</screen>
      </tip>

      <para lang="en">The repository doesn't know or care if your changes make
        any sense as a whole; it only checks to make sure that nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files is out-of-date:</para>
                <para>Il repository non sa e non è interessato al fatto
                che le modifiche apportate abbiano un senso;
                    si assicura soltanto che nessun altro
                    abbia modificato qualcosa degli stessi files
            	senza che ce ne si sia accorti.
                  Se qualcuno l' <emphasis>ha</emphasis>  fatto
                      l'intero commit fallirà e un messaggio
                      informerà che uno o più  file non sono aggiornati:</para>

      <screen>
$ svn commit --message "Add another rule"
Sending        rules.txt
svn: Commit failed (details follow):
svn: Out of date: 'rules.txt' in transaction 'g'
</screen>

      <para lang="en">At this point, you need to run <command>svn
        update</command>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
                 <para>A questo punto bisogna eseguire il comando <command>svn
                    update</command>, agire su compatibilità e
                    conflitti che risultano
            		ed eseguire il commit di nuovo.</para>



      <para lang="en">That covers the basic work cycle for using Subversion.
        There are many other features in Subversion that you can use
        to manage your repository and working copy, but you can get by
        quite easily using only the commands that we've discussed so
        far in this chapter.</para>
                <para>Questo conclude il ciclo base di lavoro per usare Subversion.
                    Ci sono molte altre caratteristiche
                    in Subversion che si possono usare
                    per gestire il repository e la copia di lavoro,
                    ma si può procedere
                    facilmente usando solo i comandi che sono stati
                     discussi così diffusamente in questo capitolo.</para>


    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
    <title>Esaminare lo storico</title>

    <para lang="en">As we mentioned earlier, the repository is like a time
      machine.  It keeps a record of every change ever committed,
      and allows you to explore this history by examining previous
      versions of files and directories as well as the metadata that
      accompanies them.  With a single Subversion command, you can
      check out the repository (or restore an existing working copy)
      exactly as it was at any date or revision number in the past.
      However, sometimes you just want to <emphasis>peer
      into</emphasis> the past instead of <emphasis>going
      into</emphasis> the past.</para>
             <para>Come si è detto , il  repository è
             come una macchina del tempo.
            	Mantiene una registrazione di tutte le modifiche
                di cui si è fatto il commit,
                  e permette di esplorare la storia esaminando
                  precedenti versioni di
                   files e directories così come i metadati che li accompagnano.
                  Con un singolo comando Subversion,
                  si può fare il check out del repository
                  (oppure ripristinare una una copia di lavoro esistente)
                  esattamente come se fosse ad una data o a
                  un numero di revisione nel passato.
                 Comunque, a volte si vuole solo <emphasis>
                 essere al passo con il
                  </emphasis> passato invece di <emphasis>andare
                  nel</emphasis> passato.</para>


    <para lang="en">There are several commands that can provide you with
      historical data from the repository:</para>
                <para>Ci sono diversi comandi che provvedono
                 alle date nel repository:</para>

<!-- *********************************************************************************************************** -->
<!-- *********************************************************************************************************** -->
      <variablelist>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
            <para lang="en">Shows you broad information: log messages with date
              and author information attached to revisions, and which
              paths changed in each revision.</para>
            		<para>Mostra informazioni generali:
                     vengono allegati alle revisioni messaggi di log con data e
                         informazioni sull'autore ,e quali
                         percorsi sono stati cambiati in ogni revisione.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
            <para lang="en">Shows you the specific details of how a file changed
              over time.</para>
            		<para>Mostra i dettagli di come un file è
                    cambiato nel tempo.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
            <para lang="en">This is used to retrieve any file as it existed in a
              particular revision number and display it on your
              screen.</para>
            		<para>E' usato per riprendere  ogni file così
                    com'era in un particolare numero
            		di revisione  e visualizzarlo.
                          </para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
            <para lang="en">Displays the files in a directory for any given
              revision.</para>
            		<para>Visualizza i files in una directory per
                    ogni data revisione.</para>

          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
      <title><command>svn log</command></title>

      <para lang="en">To find information about the history of a file or
        directory, use the <command>svn log</command>
        command. <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision, and,
        if it was provided, the log message that accompanied the
        commit.</para>
                 <para>Per trovare informazioni sulla storia di un file o una directory,
            	si usa il comando <command>svn log</command>.
            	 <command>svn log</command>
                 fornirà una registrazione di chi ha fatto modifiche
                    ad un file o una directory,
                    a quale revisione è stato modificato,
                    l'ora e il giorno della revisione, e,
                    se è previsto ,
                    il messaggio di log che ha accompagnato il commit.</para>


      <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 line

Initial import
------------------------------------------------------------------------
</screen>

      <para lang="en">Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order, or just a single revision, pass the
        <option>--revision</option> (<option>-r</option>)
        switch:</para>
            	<para>Si noti che i messaggi di log sono stampati in
                    <emphasis>ordine cronologico inverso</emphasis> di default.
                    Se si desidera vedere un differente intrevallo di revisioni
                   in un ordine particolare,o solo una singola revisione,
                    bisogna usare l'opzione
                    <option>--revision</option> (<option>-r</option>):
                    </para>


      <screen>
$ svn log --revision 5:19    # shows logs 5 through 19 in chronological order

$ svn log -r 19:5            # shows logs 5 through 19 in reverse order

$ svn log -r 8               # shows log for revision 8
</screen>

      <para lang="en">You can also examine the log history of a single file or
        directory.  For example:</para>
        <para>Si può esaminare la storia dei log di un singolo file o directory.
         Ad esempio:</para>


      <screen>
$ svn log foo.c
&hellip;
$ svn log http://foo.com/svn/trunk/code/foo.c
&hellip;
</screen>

      <para lang="en">These will display log messages <emphasis>only</emphasis>
        for those revisions in which the working file (or URL)
        changed.</para>
                    <para>Sarà mostrato<emphasis>solo</emphasis>
                   per le revisioni in cui il file di lavoro (o URL)
                    è cambiato.</para>

      <para lang="en">If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>--verbose</option> (<option>-v</option>) switch.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem, so in verbose mode, <command>svn
        log</command> will include a list of changed paths in a
        revision in its output:</para>
                  <para>Se si vogliono maggiori informazioni su un file o una
                    directory, <command>svn log</command> possiede anche l'opzione
                    <option>--verbose</option> (<option>-v</option>) .
                    Poichè Subversion permette di spostare e copiare files e
                    directories,
                    è importante riuscire a tener traccia dei
                    cambiamenti di percorso nel
                    filesystem, così in modalità verbose ,
                    <command>svn
                    log</command> nel suo output includerà
                    una lista dei percorsi modificati in una revisione :</para>


      <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2002-07-14 08:15:29 -0500 | 1 line
Changed paths:
M /trunk/code/foo.c
M /trunk/code/bar.h
A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
</screen>

      <para lang="en">
        <command>svn log</command> also takes a <option>--quiet</option>
        (<option>-q</option>) switch, which suppresses the body of the
        log message.  When combined with <option>--verbose</option>, it
        gives just the names of the changed files.</para>
            	<para>
                    <command>svn log</command> possiede anche
                     un'opzione <option>--quiet</option>
                    (<option>-q</option>) ,
                    che sopprime il corpo del messaggio di
                    log .  Quando è combinata con l'opzione
                    <option>--verbose</option>, essa fornisce solo
            	  i nomi dei files modificati.</para>


      <sidebar>
        <title>Perchè il comando <command>svn log</command> Fornisce una Risposta Vuota?</title>

        <para lang="en">After working with Subversion for a bit, most users will
          come across something like this:</para>
            	<para>Dopo che si lavora con Subversion da un pò,
                molti utenti si imbatteranno
                      in qualcosa del genere:</para>


        <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>

        <para lang="en">At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the top-most URL of your repository, as in <command>svn log -r 2
          http://svn.collab.net/repos/svn</command>.</para>
            	<para>A prima vista, sembra un errore.  Ma ricordando che
                      mentre le revisioni sono in tutto il repository,
                      il comando <command>svn
                      log</command> opera su un percorso nel repository.
                      Se non si fornisce un percorso,
                      Subversion usa la directory di lavoro corrente
                      come percorso  di
                      default .  Come risultato, se si sta opernado
                      in una sottodirectory
                      della propria copia di lavoro e si aspetta di vedere
                      il log di una revisione
                      nella quale nè quella directory nè nessuno
                      dei suoi figli è stato modificato,
                       Subversion mostrerà un log vuoto.
                        Se si vuole vedere cos'è cambiato in quella revisione,
                      bisogna provare a indirizzare il comando
                      <command>svn log</command> direttamente
                      all' URL del repository, come nel comando
                      <command>svn log -r 2
                      http://svn.collab.net/repos/svn</command>.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
      <title><command>svn diff</command></title>

      <para lang="en">We've already seen <command>svn diff</command>
        before&mdash;it displays file differences in unified diff
        format; it was used to show the local modifications made to
        our working copy before committing to the repository.</para>
                  <para>Si è gia visto <command>svn diff</command>
                    precedentemente&mdash;mostra le modifiche di
                    un file in un formato unificato diff;
                    è usato per mostrare le modifiche locali fatte
                    nella propria copia di lavoro
                    prima di fare il commit al repository.</para>


      <para lang="en">In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
                  <para>Infatti, si vede che ci sono
                    <emphasis>tre</emphasis> usi distinti del comando<command>svn
                    diff</command>:</para>


      <itemizedlist>

        <listitem>
          <para lang="en">Examine local changes</para>
                     <para>Esaminare le modifiche locali</para>

        </listitem>

        <listitem>
          <para lang="en">Compare your working copy to the repository</para>
            		<para>Confrontare la propria copia di
                    lavoro con il repository</para>

        </listitem>

        <listitem>
          <para lang="en">Compare repository to repository</para>
            	   <para>Confrontare repository con repository</para>

        </listitem>

      </itemizedlist>

      <sect3 id="svn.tour.history.diff.local">
        <title>Esaminare le modifiche locali</title>

        <para lang="en">As we've seen, invoking <command>svn diff</command> with
          no switches will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>

            		<para>Come si è visto, invocando il comnado
                    <command>svn diff</command> senza
                      nessuna opzione compariranno i files
                      di lavoro nella copia
                      <quote>ripristino </quote> presente nell'area
                     <filename>.svn</filename>:</para>
        <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <sect3 id="svn.tour.history.diff.wcrepos">
        <title>Confrontare la copia di lavoro con il repository</title>

        <para lang="en">If a single <option>--revision</option>
          (<option>-r</option>) number is passed, then your
          working copy is compared to the specified revision in the
          repository.</para>
                      <para>Se si fornisce un solo numero con
                      l'opzione<option>--revision</option>
                      (<option>-r</option>), allora la propria
                      copia di lavoro
                      è confrontata con una specifica revisione
                      nel repository.</para>

        <screen>
$ svn diff --revision 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <sect3 id="svn.tour.history.diff.reposrepos">
        <title>Confrontare Repository con Repository</title>

        <para lang="en">If two revision numbers, separated by a colon, are
          passed via <option>--revision</option>
          (<option>-r</option>), then the two revisions are directly
          compared.</para>
                       <para>Se vengono forniti  due numeri
                       di revisione, separati da una colonna,
                      con l'opzione <option>--revision</option>
                      (<option>-r</option>), allora vengono
                      confrontate direttamente le due revisioni.
                     </para>

        <screen>
$ svn diff --revision 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>

        <para lang="en">Not only can you use <command>svn diff</command> to
          compare files in your working copy to the repository, but if
          you supply a URL argument, you can examine the differences
          between items in the repository without even having a
          working copy.  This is especially useful if you wish to
          inspect changes in a file when you don't have a working copy
          on your local machine:</para>
            	<para>Per confrontare files nella propria copia
                di lavoro con il repository
            		non solo si può usare il comando
                    <command>svn diff</command> ,
                     ma se si fornisce come argomento un URL,
                     si possono esaminare
                      le differenze tra oggetti nel repository
                      anche senza avere una copia di lavoro.
             	     Questo è molto utile se si desidera ispezionare
                      le modifiche in un file quando non si ha una copia
                      di lavoro sulla propria macchina:</para>


        <screen>
$ svn diff --revision 4:5 http://svn.red-bean.com/repos/example/trunk/text/rules.txt
&hellip;
$
</screen>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.cat">
      <title><command>svn cat</command></title>

      <para lang="en">If you want to examine an earlier version of a file and
        not necessarily the differences between two files, you can use
        <command>svn cat</command>:</para>
                <para>Se si vuole esaminare una versione
                precedente di un  file e non necessariamente
                    le differenze tra due files, si può usare il comando
                    <command>svn cat</command>:</para>


      <screen>
$ svn cat --revision 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>

      <para lang="en">You can also redirect the output directly into a
        file:</para>
                <para>Si può redirezionare l'output direttamente in un
                    file:</para>


      <screen>
$ svn cat --revision 2 rules.txt &gt; rules.txt.v2
$
</screen>

      <para lang="en">You're probably wondering why we don't just use
        <command>svn update --revision</command> to update the file to
        the older revision.  There are a few reasons why we might
        prefer to use <command>svn cat</command>.</para>
                <para>Probabilmente ci si meraviglierà del fatto che
                non si usa solo il comando
                    <command>svn update --revision</command>
                    per aggiornare il file
                    ad una versione precedente.
                    Ci sono diverse ragioni per preferire
                    il comando <command>svn cat</command>.</para>


      <para lang="en">First, you may want to see the differences between two
        revisions of a file using an external diff program (perhaps a
        graphical one, or perhaps your file is in such a format that
        the output of unified diff is nonsensical).  In this case,
        you'll need to grab a copy of the old revision, redirect it to
        a file, and pass both that and the file in your working copy
        to your external diff program.</para>
            	<para>Come prima cosa, si possono voler vedere le differenze
                    tra due revisioni di un  fileusando un programma diff
                    esterno(magari uno grafico,
                    o magari il file è in un formato tale che l'output
                    in unificato diff non avrebbe senso).  In questo caso,
                    bisogna prendere una copia della revisione precedente,
                    redirezionarla su un
                     file, e passare sia quella sia il
                      file nella propria copia di lavoro
                   al programma diff esterno.</para>


      <para lang="en">Sometimes it's easier to look at an older version of a
        file in its entirety as opposed to just the differences
        between it and another revision.</para>
            	<para>A volte è più facile guardare una versione
                precedente di un file
                    per intero che analizzare solo le differenze tra
                   quella ed un'altra revisione.</para>


      </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.list">
      <title><command>svn list</command></title>

      <para lang="en">The <command>svn list</command> command shows you what
        files are in a repository directory without actually
         downloading the files to your local machine:</para>
                  <para>Il comando <command>svn list</command> mostra quali
                    files sono nel repository senza attualmente scaricarli
                   nalla propria macchina:</para>


      <screen>
$ svn list http://svn.collab.net/repos/svn
README
branches/
clients/
tags/
trunk/
</screen>

      <para lang="en">If you want a more detailed listing, pass the
        <option>--verbose</option> (<option>-v</option>) flag to get
        output like this:</para>
                 <para>Se si vuole una lista più dettagliata,
                 si deve usrae l'opzione
                    <option>--verbose</option> (<option>-v</option>)
                    per avere un output
                   come questo:</para>


      <screen>
$ svn list --verbose http://svn.collab.net/repos/svn
   2755 harry          1331 Jul 28 02:07 README
   2773 sally               Jul 29 15:07 branches/
   2769 sally               Jul 29 12:07 clients/
   2698 harry               Jul 24 18:07 tags/
   2785 sally               Jul 29 19:07 trunk/
</screen>

      <para lang="en">The columns tell you the revision at which the file or
        directory was last modified, the user who modified it, the size
        if it is a file, the date it was last modified, and the item's
        name.</para>
                  <para>Le colonne indicano la revisione alla quale
                  il file o la directory è stato modificato
                     l'ultima volta, l'utente che ha eseguito le modifiche,
                     la dimensione
                    se si tratta di un file, la data dell'ultima modifica,
                    e il nome dell'oggetto.
                    </para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.finalword">
      <title>La Parola Finale di una Storia</title>

      <para lang="en">In addition to all of the above commands, you can use
        <command>svn update</command> and <command>svn
        checkout</command> with the <option>--revision</option> switch
        to take an entire working copy <quote>back in time</quote>
        <footnote><para lang="en">See?  We told you that Subversion was a time
        machine.</para></footnote>:</para>
               <para>In aggiunta a tutti i comandi visti sopra,
               si possono usare i comandi
                    <command>svn update</command> e <command>svn
                    checkout</command> con l'opzione <option>--revision</option>
                    per portare un'intera copia di
                    lavoro <quote>indietro nel tempo</quote>
                    <footnote><para>Visto?
                    Si era detto che Subversion era una macchina del tempo.</para></footnote>:</para>

      <screen>
$ svn checkout --revision 1729 # Checks out a new working copy at r1729
&hellip;
$ svn update --revision 1729 # Updates an existing working copy to r1729
&hellip;
</screen>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.other">
    <title>Altri Comandi Utili</title>

      <para lang="en">While not as frequently used as the commands previously
        discussed in this chapter, you will occasionally need these
        commands.</para>
                     <para>Anche se non frequentemente,
                     come i comandi visti finora in questo capitolo,
                        occasionalmete si può aver bisogno di questi comandi.
                        </para>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.other.cleanup">
      <title><command>svn cleanup</command></title>

      <para lang="en">When Subversion modifies your working copy (or any
        information within <filename>.svn</filename>), it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion writes its intentions to a log file.  Next it
        executes the commands in the log file to apply the requested
        change, holding a lock on the relevant part of the working
        copy while it works &mdash; to prevent othe Subversion clients
        from accessing the working copy in mid-change.  Finally,
        Subversion removes the log file.  Architecturally, this is
        similar to a journaled filesystem.  If a Subversion operation
        is interrupted (if the process is killed, or if the machine
        crashes, for example), the log files remain on disk.  By
        re-executing the log files, Subversion can complete the
        previously started operation, and your working copy can get
        itself back into a consistent state.</para>
             	<para>Quando Subversion modifica la propria copia di lavoro(o
                    qualsiasi informazione all'intreno di
                    <filename>.svn</filename>), cerca di farlo
                    nel modo più sicuro possibile.
                    Prima di modificare la copia di lavoro,
                    Subversion scrive le sue intenzioni in un file di log.
                     Dopo
                    esegue i comandi nel file di log per applicare
                     le modifiche richieste,
                    mettendo un blocco sulla parte importante
                    della copia di lavoro
                    mentre lavora&mdash;
                    per impedire ad altri client subversion
                    l'accesso alla copia di lavoro durante la modifica.
                     Infine,
                    Subversion rimuove il file log.
                     Architetturalmente, è
                    simile ad un filesystem giornaliero.
                     Se un'operazione di Subversion viene interrotta
                    (per esmpio,se il processo viene terminato, o se la macchina
                    crasha ), i files di log restano sul disco.
                     Rieseguendo i file di log
                    Subversion può completare le operazioni iniziate prima,
                    e la copia di lavoro può tornare in un stato consistente.
                    </para>


      <para lang="en">And this is exactly what <command>svn cleanup</command>
        does: it searches your working copy and runs any leftover
        logs, removing working copy locks in the process.
        If Subversion ever tells you that some part of your working copy
        is <quote>locked</quote>, then this is the command that you
        should run.  Also, <command>svn status</command> will display
        an <literal>L</literal> next to locked items:</para>
                  <para>E questo è esattamente quello che fa
                  il comando<command>svn cleanup</command>:
                    cerca la copia di lavoro e esegue tutti
                    i log rimasti in sospeso,
            	  rimuovendo i blocchi alla copia di lavoro nel processo.
                    Se Subversion dice che alcune parti della
                     copia di lavoro sono
                     <quote>bloccate</quote>,
                     allora questo è il comando da eseguire.
                     Anche ,il comando <command>svn status</command>
                     visualizzerà
                    una <literal>L</literal> vicino agli oggetti bloccati:
                    </para>

      <screen>
$ svn status
  L    somedir
M      somedir/foo.c

$ svn cleanup
$ svn status
M      somedir/foo.c
</screen>

      <para lang="en">Don't confuse these working copy locks with the ordinary
        locks that Subversion users create when using
        the <quote>lock-modify-unlock</quote> model of concurrent
        version control; see
        <xref linkend="svn.advanced.locking.meanings"/> for
        clarification.</para>
                 <para>Non si confondano questi blocchi alla copia di lavoro
                 con i blocchi ordinari
                   che gli utenti di Subversion creano quando usano
                   il modello di controllo di versione concorrente
                   <quote>blocco-modifica-sblocco</quote> ;
                     si veda
                    <xref linkend="svn.advanced.locking.meanings"/>
                     per chiarimenti.</para>


    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.other.import">
      <title><command>svn import</command></title>

      <para lang="en">The <command>svn import</command> command is a quick way
        to copy an unversioned tree of files into a repository,
        creating intermediate directories as necessary.</para>
                <para>Il comando <command>svn import</command>
                un modo veloce per copiare
                    un albero di files non sotto il controllo di
                    versione in un repository,
                   creando se necessario directory intermedie.</para>


      <screen>
$ svnadmin create /usr/local/svn/newrepos
$ svn import mytree file:///usr/local/svn/newrepos/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
</screen>

      <para lang="en">The previous example copied the contents of directory
        <filename>mytree</filename> under the directory
        <filename>some/project</filename> in the repository:</para>
               <para>Il precedente esempio ha copiato il contenuto
               della directory
                    <filename>mytree</filename> sotto la  directory
                    <filename>some/project</filename> nel repository:</para>


      <screen>
$ svn list file:///usr/local/svn/newrepos/some/project
bar.c
foo.c
subdir/
</screen>

      <para lang="en">Note that after the import is finished, the original tree
        is <emphasis>not</emphasis> converted into a working copy.  To
        start working, you still need to <command>svn
        checkout</command> a fresh working copy of the tree.</para>
                  <para>Si noti che dopo che è finita l'importazione,
                  l'albero originale
                    <emphasis>non</emphasis>
                    è convertito in una copia di lavoro.  Per
                    cominciare a lavorare, bisogna usare il comando<command>svn
                    checkout</command>
                    per avere una copia di lavoro dell'albero.</para>


    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
    <title>Riassunto</title>

      <para lang="en">Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref"/> to
        get an idea of all the many different commands that Subversion
        has&mdash;and how you can use them to make your work
        easier.</para>
                <para>Fin qui si sono visti la maggior parte dei
                comandi del client Subversion.
                    Notevole eccezione è stata fatta per i comandi
                    che si occupano di creare ramificazioni e fusioni
                   (si veda  <xref linkend="svn.branchmerge"/>) e le
                   proprietà(si veda
                    <xref linkend="svn.advanced.props"/>).
                    Comunque, per avere un'idea
                    di tutti i differenti comandi di Subversion&mdash;e
                    di come si possono usare per
            	rendere il proprio lavoro più semplice
                 si può vedere <xref linkend="svn.ref"/>  .
                 </para>


  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
