<chapter id="svn.tour">
<!--
  <title>Basic Usage</title>
-->
  <title>Grundlegende Benutzung</title>

<!--
  <para>Now we will go into the details of using Subversion.  By the
    time you reach the end of this chapter, you will be able to
    perform all the tasks you need to use Subversion in a normal day's
    work.  You'll start with getting your files into Subversion,
    followed by an initial checkout of your code.  We'll then walk you
    through making changes and examining those changes.  You'll also
    see how to bring changes made by others into your working copy,
    examine them, and work through any conflicts that might
    arise.</para>
-->
  <para>Nun kommen wir zu den Details der Benutzung von Subversion.
    Bis Sie das Ende dieses Kapitels erreicht haben, werden Sie in der
    Lage sein, alle Aufgaben zu erledigen, die sich bei der normalen
    täglichen Arbeit mit Subversion stellen. Sie werden damit
    beginnen, Ihre Dateien in Subversion einzupflegen, gefolgt von
    einem initialen Checkout Ihres Codes. Dann werden wir bei unserem
    Rundgang zeigen, wie Änderungen gemacht und diese Änderungen
    untersucht werden. Sie werden auch sehen, wie Sie die Änderungen
    anderer in Ihre Arbeitskopie bringen, untersuchen, und sich durch
    eventuell auftretende Konflikte arbeiten können.</para>

<!--
  <para>Note that this chapter is not meant to be an exhaustive list
    of all of Subversion's commands&mdash;rather, it's a conversational
    introduction to the most common Subversion tasks that you'll
    encounter.  This chapter assumes that you've read and understood
    <xref linkend="svn.basic"/> and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see <xref linkend="svn.ref"/>.</para>
-->
  <para>Beachten Sie jedoch, dass dieses Kapitel nicht als erschöpfende
    Liste aller Befehle von Subversion gedacht ist &ndash; es ist eher
    eine Einführung in die gebräuchlichsten Aufgaben von Subversion,
    denen Sie begegnen werden. Dieses Kapitel setzt voraus, dass Sie
    <xref linkend="svn.basic"/> gelesen und verstanden haben und dass
    Sie mit dem allgemeinen Subversion-Modell vertraut sind. Für eine
    vollständige Referenz aller Befehle, siehe <xref
      linkend="svn.ref"/>.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.help">
<!--
    <title>Help!</title>
-->
    <title>Hilfe!</title>

<!--
    <para>Before reading on, here is the most important command you'll
      ever need when using Subversion: <command>svn help</command>.
      The Subversion command-line client is self-documenting&mdash;at
      any time, a quick <userinput>svn help
      <replaceable>subcommand</replaceable></userinput> will describe
      the syntax, options, and behavior of the subcommand.</para>
-->
    <para>Bevor Sie weiter lesen: hier ist der wichtigste Befehl den
      Sie benötigen, wenn Sie Subversion verwenden: <command>svn
        help</command>.  Der Subversion-Kommandozeilen-Client ist
      selbst-dokumentierend &ndash; jederzeit erklärt Ihnen ein schnelles
      <userinput>svn help
        <replaceable>Unterbefehl</replaceable></userinput> die Syntax,
      die Optionen und das Verhalten des Unterbefehls.</para>

<!--
    <screen>
$ svn help import
import: Commit an unversioned file or tree into the repository.
usage: import [PATH] URL

  Recursively commit a copy of PATH to URL.
  If PATH is omitted '.' is assumed.
  Parent directories are created as necessary in the repository.
  If PATH is a directory, the contents of the directory are added
  directly under URL.
  Unversionable items such as device files and pipes are ignored
  if - -force is specified.

Valid options:
  -q [- -quiet]             : print nothing, or only summary information
  -N [- -non-recursive]     : obsolete; try - -depth=files or - -depth=immediates
  - -depth ARG              : limit operation by depth ARG ('empty', 'files',
                             'immediates', or 'infinity')
&hellip;
</screen>
-->
    <screen>
$ svn help import
import: Überträgt eine nicht versionierte Datei oder einen Dateibaum in das
Projektarchiv.
Aufruf: import [PFAD] URL

  Überträgt rekursiv eine Kopie des PFADes zur URL.
  Ohne Angabe von PFAD wird ».« angenommen. Übergeordnete Verzeichnisse
  werden soweit erforderlich im Projektarchiv angelegt.
  Falls PFAD ein Verzeichnis ist, wird dessen Inhalt direkt unterhalb der URL
  hinzugefügt.
  Nicht versionierbare Elemente wie Gerätedateien und Pipes werden ignoriert,
  falls --force angegeben wird.

Gültige Optionen:
  -q [--quiet]             : nichts oder nur Zusammenfassungen ausgeben
  -N [--non-recursive]     : veraltet; versuchen Sie --depth=files oder
                             --depth=immediates
  --depth PAR              : begrenzt Operation durch Tiefe PAR (»empty«,
                            »files«, »immediates« oder »infinity«)
&hellip;
</screen>

      <sidebar>
<!--
        <title>Options and Switches and Flags, Oh My!</title>
-->
        <title>Optionen und Schalter und Flags, oh Mann!</title>
        
<!--
        <para>The Subversion command-line client has numerous command
          modifiers (which we call options), but there are two
          distinct kinds of options:  short options
          are a single hyphen followed by a single letter, and
          long options consist of two hyphens
          followed by a number of letters (e.g., <literal>-s</literal>
          and <literal>- -this-is-a-long-option</literal>,
          respectively).  Every option has a long format, but only
          certain options have an additional short format (these are
          typically options that are frequently used).  To
          maintain clarity, we <emphasis>usually</emphasis> use the
          long form in code examples, but when describing options, if
          there's a short form, we'll provide the long form (to
          improve clarity) and the short form (to make it easier to
          remember).  You should use whichever one you're more
          comfortable with, but don't try to use both.</para>
-->
        <para>Der Subversion-Kommandozeilen-Client besitzt zahlreiche
          Befehlsmodifizierer (die wir Optionen nennen), doch davon
          gibt es zweierlei Arten: Kurzoptionen bestehen aus einem
          Bindestrich gefolgt von einem einzelnen Buchstaben, und
          Langoptionen bestehen aus zwei Bindestrichen gefolgt von
          mehr als einem Buchstaben (z.B. <literal>-s</literal> bzw.
          <literal>--dies-ist-eine-langoption</literal>).  Jede Option
          besitzt ein Langformat, jedoch nur bestimmte Optionen haben
          zusätzlich ein Kurzformat (das sind typischerweise die
          am meisten gebrauchten Optionen). Um die Deutlichkeit zu wahren,
          benutzen wir in den Beispielen
          <emphasis>gewöhnlich</emphasis> die Langform, doch wenn
          Optionen beschrieben werden, die eine Kurzform besitzen,
          geben wir sowohl die Langform (um die Deutlichkeit zu
          verbessern) als auch die Kurzform (um sie sich leichter
          merken zu können) an. Sie sollten die Form benutzen, mit
          der Sie am besten zurechtkommen, jedoch versuchen Sie nicht,
          beide gleichzeitig zu benutzen.</para>
        
      </sidebar>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.importing">
<!--
    <title>Getting Data into Your Repository</title>
-->
    <title>Wie Sie Daten in Ihr Repository bekommen</title>

<!--
    <para>You can get new files into your Subversion
      repository in two ways: <command>svn import</command> and <command>svn
      add</command>.  We'll discuss <command>svn import</command> now
      and will discuss <command>svn add</command> later in this
      chapter when we review a typical day with Subversion.</para>
-->
    <para>Sie können neue Dateien auf zweierlei Weisen in das
      Subversion-Repository bekommen: <command>svn import</command> und
      <command>svn add</command>.  Wir werden <command>svn
        import</command> jetzt und <command>svn add</command> später
      in diesem Kapitel besprechen, wenn wir einen typischen Tag mit
      Subversion durchnehmen.</para>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.import">
<!--
      <title>svn import</title>
-->
      <title>svn import</title>

<!--
      <para>The <command>svn import</command> command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.  <command>svn
        import</command> doesn't require a working copy, and your files
        are immediately committed to the repository.  You typically
        use this when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example:</para>
-->
      <para>Mit dem <command>svn import</command>-Befehl kann ein
        unversionierter Verzeichnisbaum schnell in ein Repository
        kopiert werden, wobei benötigte Zwischenverzeichnisse nach
        Bedarf angelegt werden. <command>svn import</command>
        erfordert keine Arbeitskopie und pflegt Ihre Dateien sofort in
        das Repository ein. Typischerweise verwenden Sie diesen Befehl,
        wenn bereits ein Verzeichnisbaum besteht, den Sie
        aber in einem Subversion-Repository pflegen möchten. Zum
        Beispiel:</para>

<!--
      <screen>
$ svnadmin create /var/svn/newrepos
$ svn import mytree file:///var/svn/newrepos/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
</screen>
-->
      <screen>
$ svnadmin create /var/svn/newrepos
$ svn import mytree file:///var/svn/newrepos/some/project \
             -m "Erstimport"
Hinzufügen     mytree/foo.c
Hinzufügen     mytree/bar.c
Hinzufügen     mytree/subdir
Hinzufügen     mytree/subdir/quux.h

Revision 1 übertragen.
</screen>

<!--
      <para>The previous example copied the contents of directory
        <filename>mytree</filename> under the directory
        <filename>some/project</filename> in the repository:</para>
-->
      <para>Im vorstehenden Beispiel wurde der Inhalt des
        Verzeichnisses <filename>mytree</filename> unter dem
        Verzeichnis <filename>some/project</filename> im Repository
        abgelegt:</para>

      <screen>
$ svn list file:///var/svn/newrepos/some/project
bar.c
foo.c
subdir/
</screen>

<!--
      <para>Note that after the import is finished, the original tree
        is <emphasis>not</emphasis> converted into a working copy.  To
        start working, you still need to <command>svn
        checkout</command> a fresh working copy of the tree.</para>
-->
      <para>Beachten Sie, dass nach dem Import der Originalbaum
        <emphasis>nicht</emphasis> in eine Arbeitskopie umgewandelt
        wird. Vor Beginn der Arbeit müssen Sie noch <command>svn
          checkout</command> ausführen, um eine frische Arbeitskopie
        des Baums zu erhalten.</para>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.importing.layout">
<!--
      <title>Recommended Repository Layout</title>
-->
      <title>Empfohlene Repository Aufteilung</title>

<!--
      <para>While Subversion's flexibility allows you to lay out your
      repository in any way that you choose, we recommend that you
      create a <filename>trunk</filename> directory to hold the
      <quote>main line</quote> of development, a
      <filename>branches</filename> directory to contain branch
      copies, and a <filename>tags</filename> directory to contain tag
      copies. For example:</para>
-->
      <para>Obwohl die Flexibilität von Subversion es Ihnen erlaubt,
        Ihr Repository nach Belieben aufzuteilen, empfehlen wir, ein
        Verzeichnis <filename>trunk</filename> für die
        <quote>Hauptlinie</quote> der Entwicklung, ein
        Verzeichnis <filename>branches</filename> für Branch-Kopien und
        ein Verzeichnis <filename>tags</filename> für
        Tag-Kopien. Zum Beispiel:</para>

      <screen>
$ svn list file:///var/svn/repos
/trunk
/branches
/tags
</screen>

<!--
      <para>You'll learn more about tags and branches in <xref
      linkend="svn.branchmerge"/>.  For details and how to set up
      multiple projects, see <xref
      linkend="svn.branchmerge.maint.layout"/> and <xref
      linkend="svn.reposadmin.projects.chooselayout"/> to read more
      about project roots.</para>
-->
      <para>In <xref linkend="svn.branchmerge"/> werden Sie mehr über
        Branches und Tags erfahren. Details über das Aufsetzen
        mehrerer Projekte finden Sie in <xref
          linkend="svn.branchmerge.maint.layout"/>, und in <xref
          linkend="svn.reposadmin.projects.chooselayout"/>  lesen
        Sie mehr über Wurzelverzeichnisse von Projekten.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.initial">
<!--
    <title>Initial Checkout</title>
-->
    <title>Anfänglicher Checkout</title>

<!--
    <para>Most of the time, you will start using a Subversion
      repository by doing a <firstterm>checkout</firstterm> of your
      project.  Checking out a repository creates a <quote>working
      copy</quote> of it on your local machine.  This copy contains
      the <literal>HEAD</literal> (latest revision) of the Subversion
      repository that you specify on the command line:</para>
-->
    <para>In den meisten Fällen werden Sie ein Subversion-Repository
      zu nutzen beginnen, indem Sie einen
      <firstterm>Checkout</firstterm> Ihres Projektes vornehmen. Das
      Auschecken eines Repositorys erzeugt eine
      <quote>Arbeitskopie</quote> desselben auf Ihrem lokalen Rechner.
      Diese Arbeitskopie umfasst die Revision <literal>HEAD</literal>
      (die letzte Revision) des auf der Kommandozeile angegebenen
      Subversion-Repositorys:</para>


<!--
    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk
A    trunk/Makefile.in
A    trunk/ac-helpers
A    trunk/ac-helpers/install.sh
A    trunk/ac-helpers/install-sh
A    trunk/build.conf
&hellip;
Checked out revision 8810.
</screen>
-->
    <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk
A    trunk/Makefile.in
A    trunk/ac-helpers
A    trunk/ac-helpers/install.sh
A    trunk/ac-helpers/install-sh
A    trunk/build.conf
&hellip;
Ausgecheckt, Revision 8810.
</screen>

    <sidebar>
<!--
      <title>What's in a Name?</title>
-->
      <title>Was steckt in einem Namen?</title>

<!--
      <para>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
-->
      <para>Subversion gibt sich alle Mühe, nicht die Art der Daten
        einzuschränken, die Sie unter Versionskontrolle setzen können.
        Der Inhalt von Dateien und Property-Werte werden als binäre
        Daten gespeichert und übermittelt, und <xref
          linkend="svn.advanced.props.special.mime-type"/> sagt Ihnen,
        wie Sie Subversion darauf hinweisen, dass
        <quote>Text</quote>-Operationen für eine bestimmte Datei
        keinen Sinn ergeben. Trotzdem gibt es einige wenige Stellen,
        an denen Subversion Einschränkungen für gespeicherte
        Informationen vorsieht.</para>

<!--
      <para>Subversion internally handles certain bits of
        data&mdash;for example, property names, pathnames, and log
        messages&mdash;as UTF-8-encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
-->
      <para>Subversion behandelt intern bestimmte
        Dateneinheiten &ndash; z.B. Property-Namen, Pfadnamen und
        Protokollmitteilungen &ndash; als UTF-8-kodiertes Unicode.  Das heißt
        aber nicht, dass all Ihre Interaktionen mit Subversion in
        UTF-8 erfolgen müssen. Im Allgemeinen werden Subversion-Clients
        die Umwandlungen zwischen UTF-8 und dem auf Ihrem
        Computer verwendeten Kodiersystem großzügig und transparent
        vornehmen, sofern eine solche Umwandlung sinnvollerweise
        durchgeführt werden kann (was bei den meisten gebräuchlichsten
        Kodierungen heutzutage der Fall ist).</para>

<!--
      <para>In WebDAV exchanges and older versions of some of
        Subversion's administrative files, paths are used as XML
        attribute values, and property names in XML tag names.  This
        means that pathnames can contain only legal XML (1.0)
        characters, and properties are further limited to ASCII
        characters.  Subversion also prohibits TAB, CR, and LF
        characters in path names to prevent paths from being broken up
        in diffs or in the output of commands such as <command>svn
        log</command> or <command>svn status</command>.</para>
-->
      <para>Darüber hinaus werden Pfadnamen sowohl bei
        WebDAV-Übertragungen als auch in einigen der Steuerdateien von
        Subversion als XML-Attributwerte verwendet. Das bedeutet, dass
        Pfadnamen nur aus zulässigen XML (1.0) Zeichen bestehen
        dürfen. Subversion verbietet ebenfalls TAB-, CR- und LF-Zeichen
        in Pfadnamen, um zu verhindern, das Pfade in Vergleichen oder
        bei Befehlsausgaben, wie <command>svn log</command> oder
        <command>svn status</command> zerrissen werden.</para>

<!--
      <para>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8 and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&mdash;to create
        <quote>legally correct</quote> versions for internal
        use it will automatically escape illegal
        path characters as needed in URLs that you type.</para>
-->
      <para>Obwohl es sich anhört, als müsse man sich eine Menge
        merken, sind diese Einschränkungen selten ein Problem. Solange
        Ihre Locale-Einstellungen kompatibel zu UTF-8 sind und Sie
        keine Kontrollzeichen in den Pfadnamen verwenden, sollten Sie
        keine Probleme habe, mit Subversion zu kommunizieren. Der
        Kommandozeilen-Client bietet Ihnen noch ein wenig
        Extrahilfe &ndash; um <quote>korrekte</quote> Versionen für den
        internen Gebrauch zu erzeugen, maskiert er bei Bedarf automatisch
        illegale Zeichen in URL-Pfaden, die Sie eingeben.</para>

    </sidebar>

<!--
    <para>Although the preceding example checks out the trunk directory,
      you can just as easily check out any deep subdirectory of a
      repository by specifying the subdirectory in the checkout
      URL:</para>
-->
    <para>Obwohl im vorangehenden Beispiel das Verzeichnis <filename>trunk</filename> ausgecheckt
      wird, können Sie genauso leicht irgendein tiefliegendes
      Unterverzeichnis aus einem Repository auschecken, indem Sie das
      Unterverzeichnis im URL beim Checkout angeben:</para>

<!--
    <screen>
$ svn checkout \
      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/
A    cmdline/revert_tests.py
A    cmdline/diff_tests.py
A    cmdline/autoprop_tests.py
A    cmdline/xmltests
A    cmdline/xmltests/svn-test.sh
&hellip;
Checked out revision 8810.
</screen>
-->
    <screen>
$ svn checkout \
      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/
A    cmdline/revert_tests.py
A    cmdline/diff_tests.py
A    cmdline/autoprop_tests.py
A    cmdline/xmltests
A    cmdline/xmltests/svn-test.sh
&hellip;
Ausgecheckt, Revision 8810.
</screen>

<!--
    <para>Since Subversion uses a copy-modify-merge
      model instead of lock-modify-unlock (see
      <xref linkend="svn.basic.vsn-models"/>), you can immediately
      make changes to the files and directories in your working
      copy.  Your working copy is just like any other collection of
      files and directories on your system.  You can edit and change
      it, move it around, even delete the entire working copy and
      forget about it.</para>
-->
    <para>Da Subversion ein <emphasis>copy-modify-merge</emphasis>-Modell
      (kopieren-ändern-zusammenführen) statt eines
      <emphasis>lock-modify-unlock</emphasis>-Modells (sperren-ändern-freigeben)
      verwendet (siehe <xref
        linkend="svn.basic.vsn-models"/>), können Sie sofort damit
      beginnen, Änderungen an den Dateien und Verzeichnissen Ihrer
      Arbeitskopie vorzunehmen. Ihre Arbeitskopie ist wie jede
      beliebige andere Ansammlung aus Dateien und Verzeichnissen auf
      Ihrem System. Sie können sie bearbeiten, ändern, verschieben und
      sie sogar löschen und vergessen.</para>

<!--
      <warning>
        <para>While your working copy is <quote>just like any other
          collection of files and directories on your system,</quote>
          you can edit files at will, but you must tell Subversion
          about <emphasis>everything else</emphasis> that you do.  For
          example, if you want to copy or move an item in a working
          copy, you should use <command>svn copy</command> or
          <command>svn move</command> instead of the copy and move
          commands provided by your operating system.  We'll talk more
          about them later in this chapter.</para>
      </warning>
-->
      <warning>
        <para>Obwohl sich Ihre Arbeitskopie <quote>wie jede beliebige
            andere Ansammlung aus Dateien und Verzeichnissen auf Ihrem
            System</quote> verhält, können Sie zwar beliebig Dateien
          editieren, doch Sie müssen Subversion über <emphasis>alles
            andere</emphasis> was Sie tun in Kenntnis setzen. Wenn Sie
          z.B.  ein Objekt in der Arbeitskopie kopieren oder
          verschieben möchten, sollten Sie <command>svn copy</command>
          oder <command>svn move</command> verwenden statt der Kopier-
          oder Verschiebebefehle Ihres Betriebssystems. Wir werden
          darauf später im Kapitel näher eingehen.</para>
      </warning>

<!--
    <para>Unless you're ready to commit the addition of a new file or
      directory or changes to existing ones, there's no need to
      further notify the Subversion server that you've done
      anything.</para>
-->
    <para>Sofern Sie nicht bereit sind, das Hinzufügen einer neuen
      Datei oder eines neuen Verzeichnisses oder Änderungen an
      bestehenden Objekten an das Repository zu übergeben, besteht
      keine Notwendigkeit, dem Subversion-Server mitzuteilen, dass Sie
      irgendetwas gemacht haben.</para>

    <sidebar>
<!--
      <title>What's with the .svn Directory?</title>
-->
      <title>Was hat es mit dem  Verzeichnis .svn
        auf sich?</title>

<!--
      <para>Every directory in a working copy contains an
        administrative area&mdash;a subdirectory named
        <filename>.svn</filename>.  Usually, directory listing
        commands won't show this subdirectory, but it is nevertheless
        an important directory.  Whatever you do, don't delete or
        change anything in the administrative area!  Subversion
        depends on it to manage your working copy.</para>
-->
      <para>Jedes Verzeichnis in einer Arbeitskopie beinhaltet einen
        Verwaltungsbereich &ndash; ein Verzeichnis namens
        <filename>.svn</filename>.  Normalerweise wird dieses
        Unterverzeichnis nicht vom Befehl zum Auflisten des
        Verzeichnisinhaltes angezeigt, trotzdem ist es ein wichtiges
        Verzeichnis. Egal, was Sie machen, löschen oder ändern Sie
        nichts im Verwaltungsbereich! Subversion ist darauf
        angewiesen, um Ihre Arbeitskopie zu verwalten.</para>

<!--
      <para>If you accidentally remove the <filename>.svn</filename>
        subdirectory, the easiest way to fix the problem is to remove
        the entire containing directory (a normal system deletion,
        not <command>svn delete</command>), then run <userinput>svn
        update</userinput> from a parent directory.  The Subversion
        client will download the directory you've deleted, with a
        new <filename>.svn</filename> area as well.</para>
-->
      <para>Sollten Sie versehentlich das Verzeichnis <filename>.svn</filename>
        löschen, besteht die einfachste Lösung des
        Problems darin, das komplette darüberliegende Verzeichnis zu
        löschen (mit dem Betriebssystem-Löschbefehl, nicht mit
        <command>svn delete</command>) und dann wiederum
        <userinput>svn update</userinput> von einem darüberliegenden
        Verzeichnis aus aufzurufen. Der Subversion-Client wird das von
        Ihnen gelöschte Verzeichnis herunterladen und dabei
        auch einen neuen <filename>.svn</filename>-Bereich
        anlegen.</para>
    </sidebar>

<!--
    <para>While you can certainly check out a working copy with the
      URL of the repository as the only argument, you can also specify
      a directory after your repository URL.  This places your working
      copy in the new directory that you name.  For example:</para>
-->
    <para>Obwohl Sie sicherlich eine Arbeitskopie mit dem
      Repository-URL als einziges Argument auschecken können, haben
      sie auch die Möglichkeit, ein Verzeichnis hinter dem
      Repository-URL anzugeben. Das erstellt Ihre Arbeitskopie in dem
      angegebenen Verzeichnis. Zum Beispiel:</para>

<!--
    <screen>
$  svn checkout http://svn.collab.net/repos/svn/trunk subv
A    subv/Makefile.in
A    subv/ac-helpers
A    subv/ac-helpers/install.sh
A    subv/ac-helpers/install-sh
A    subv/build.conf
&hellip;
Checked out revision 8810.
</screen>
-->
    <screen>
$  svn checkout http://svn.collab.net/repos/svn/trunk subv
A    subv/Makefile.in
A    subv/ac-helpers
A    subv/ac-helpers/install.sh
A    subv/ac-helpers/install-sh
A    subv/build.conf
&hellip;
Ausgecheckt, Revision 8810.
</screen>

<!--
    <para>That will place your working copy in a directory named
      <literal>subv</literal> instead of a directory named
      <literal>trunk</literal> as we did previously.  The directory
      <literal>subv</literal> will be created if it doesn't already
      exist.</para>
-->
    <para>Das legt Ihre Arbeitskopie in einem Verzeichnis namens 
      <literal>subv</literal> ab anstatt in <literal>trunk</literal>
      so wie wir es früher schon einmal gemacht haben. Das Verzeichnis
      <literal>subv</literal> wird angelegt, sofern es nicht bereits
      vorhanden ist.</para>


    <sect2 id="svn.tour.initial.disabling-password-caching">
<!--
      <title>Disabling Password Caching</title>
-->
      <title>Das Zwischenspeichern des Passwortes abstellen</title>

<!--
      <para>When you perform a Subversion operation that requires you
        to authenticate, by default Subversion caches your
        authentication credentials on disk.  This is done for
        convenience so that you don't have to continually reenter
        your password for future operations.  If you're concerned
        about caching your Subversion passwords,
        <footnote>
          <para>Of course, you're not terribly worried&mdash;first
            because you know that you can't
            <emphasis>really</emphasis> delete anything from
            Subversion, and second because your Subversion password
            isn't the same as any of the other 3 million passwords
            you have, right?  Right?</para>
        </footnote>
        you can disable caching either permanently or on a
        case-by-case basis.</para>
-->
      <para>Wenn Sie eine Subversion-Operation ausführen, für die Sie
        sich authentifizieren müssen, speichert Subversion Ihre
        Zugangsdaten standardmäßig auf der Platte. Das geschieht zu
        Ihrer Annehmlichkeit, damit Sie bei künftigen Operationen
        nicht ständig Ihr Passwort eingeben müssen. Falls Sie wegen
        der Speicherung besorgt sein sollten,
        <footnote>
          <para>Natürlich sind Sie nicht ernsthaft
            besorgt &ndash; erstens, weil Sie wissen, dass Sie nichts
            <emphasis>wirklich</emphasis> aus Subversion löschen
            können und zweitens, weil Ihr Subversion-Passwort nicht
            das gleiche ist wie irgendein anderes Ihrer 3 Millionen
            Passwörter, nicht wahr?</para>
        </footnote>
        können Sie das Zwischenspeichern entweder dauerhaft oder von Fall zu
        Fall abstellen.</para>

<!--
      <para>To disable password caching for a particular one-time
        command, pass the <option >- -no-auth-cache</option > option on
        the command line.  To permanently disable caching, you can add
        the line <literal>store-passwords = no</literal> to your local
        machine's Subversion configuration file.  See <xref
        linkend="svn.serverconfig.netmodel.credcache"/> for
        details.</para>
-->
      <para>Um das Passwort-Caching für einen bestimmten einmaligen
        Befehl zu unterbinden, übergeben Sie die
        <option>--no-auth-cache</option>-Option auf der Kommandozeile.
        Um das Caching dauerhaft abzustellen, können Sie der
        Subversion-Konfigurationsdatei Ihres lokalen Rechners die Zeile
        <literal>store-passwords = no</literal> hinzufügen. Für
        Details siehe <xref
          linkend="svn.serverconfig.netmodel.credcache"/>.</para>

    </sect2>

    <sect2 id="svn.tour.initial.different-user">
<!--
      <title>Authenticating As a Different User</title>
-->
      <title>Authentifizierung als ein anderer Anwender</title>

<!--
      <para>Since Subversion caches auth credentials by default (both
        username and password), it conveniently remembers who you were
        acting as the last time you modified your working copy.  But
        sometimes that's not helpful&mdash;particularly if you're
        working in a shared working copy such as a system
        configuration directory or a web server document root.  In this
        case, just pass the <option>- -username</option> option on the
        command line, and Subversion will attempt to authenticate as
        that user, prompting you for a password if necessary.</para>
-->
      <para>Da Subversion standardmäßig Zugangsdaten speichert
        (sowohl den Benutzernamen als auch das Passwort), erinnert es
        sich bequemerweise, wer Sie das letzte Mal waren, als Sie Ihre
        Arbeitskopie modifizierten. Doch manchmal ist das nicht
        hilfreich &ndash; besonders, wenn Sie in einer gemeinsam
        benutzten Arbeitskopie arbeiten wie in einem
        Konfigurationsverzeichnis oder im Dokumenten-Wurzelverzeichnis
        eines Webservers. In diesem Fall brauchen Sie nur die
        <option>--username</option>-Option auf der Kommandozeile zu
        übergeben und Subversion versucht, sich als dieser Benutzer zu
        authentifizieren und wird Sie, wenn nötig, zur Eingabe eines
        Passworts auffordern.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cycle">
<!--
    <title>Basic Work Cycle</title>
-->
    <title>Der grundlegende Arbeitszyklus</title>

<!--
    <para>Subversion has numerous features, options, bells, and
      whistles, but on a day-to-day basis, odds are that you will use
      only a few of them.  In this section, we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
-->
    <para>Subversion hat zahlreiche Features, Optionen und noch jede
      Menge Schnickschnack, aber für die tägliche Arbeit ist die
      Wahrscheinlichkeit groß, nur wenig davon zu benutzen. In diesem
      Abschnitt gehen wir durch die gebräuchlichsten Dinge, die Sie
      während des Tagesgeschäftes mit Subversion machen werden.</para>

<!--
    <para>The typical work cycle looks like this:</para>
-->
    <para>Der typische Arbeitszyklus sieht so aus:</para>

    <orderedlist>
      <listitem>
<!--
        <para>Update your working copy.</para>
-->
        <para>Aktualisieren Sie Ihre Arbeitskopie.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
        </itemizedlist>

      </listitem>

      <listitem>
<!--
        <para>Make changes.</para>
-->
        <para>Nehmen Sie Änderungen vor.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn add</command></para>
          </listitem>
          <listitem>
            <para><command>svn delete</command></para>
          </listitem>
          <listitem>
            <para><command>svn copy</command></para>
          </listitem>
          <listitem>
            <para><command>svn move</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
<!--
        <para>Examine your changes.</para>
-->
        <para>Untersuchen Sie Ihre Änderungen.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn status</command></para>
          </listitem>
          <listitem>
            <para><command>svn diff</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
<!--
        <para>Possibly undo some changes.</para>
-->
        <para>Nehmen Sie eventuell einige Änderungen zurück.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn revert</command></para>
          </listitem>
        </itemizedlist>
      </listitem>


      <listitem>
<!--
        <para>Resolve conflicts (merge others' changes).</para>
-->
        <para>Lösen Sie Konflikte auf (arbeiten Sie die Änderungen
          anderer ein).</para>
        <itemizedlist>
          <listitem>
            <para><command>svn update</command></para>
          </listitem>
          <listitem>
            <para><command>svn resolve</command></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
<!--
        <para>Commit your changes.</para>
-->
        <para>Bringen Sie Ihre Änderungen ins Repository.</para>
        <itemizedlist>
          <listitem>
            <para><command>svn commit</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.update">
<!--
      <title>Update Your Working Copy</title>
-->
      <title>Aktualisieren Sie Ihre Arbeitskopie</title>

<!--
      <para>When working on a project with a team, you'll want to
        update your working copy to receive any changes other developers
        on the project have made since your last update.  Use
        <command>svn update</command> to bring your working copy into
        sync with the latest revision in the repository:</para>
-->
      <para>Wenn Sie in einem Projekt im Team zusammenarbeiten,
        sollten Sie Ihre Arbeitskopie aktualisieren, um die Änderungen zu bekommen,
        die die anderen Entwickler im Projekt seit Ihrer letzten
        Aktualisierung vorgenommen haben. Benutzen Sie <command>svn
          update</command> um Ihre Arbeitskopie synchron mit der
        letzten Revision im Repository zu bekommen:</para>

<!--
      <screen>
$ svn update
U  foo.c
U  bar.c
Updated to revision 2.
</screen>
-->
      <screen>
$ svn update
U  foo.c
U  bar.c
Aktualisiert zu Revision 2.
</screen>

<!--
      <para>In this case, it appears that someone checked in
        modifications to both <filename>foo.c</filename>
        and <filename>bar.c</filename> since the last time you
        updated, and Subversion has updated your working copy to
        include those changes.</para>
-->
      <para>In diesem Fall sieht es so aus, dass jemand Änderungen
        sowohl an <filename>foo.c</filename> als auch an
        <filename>bar.c</filename> übergeben hat, seit Sie das letzte
        Mal aktualisiert haben, und Subversion hat Ihre Arbeitskopie
        aktualisiert, damit sie beide Änderungen enthält.</para>

<!--
      <para>When the server sends changes to your working copy via
        <command>svn update</command>, a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up to date.  To find out what these
        letters mean, run <userinput>svn help update</userinput>.</para>
-->
      <para>Wenn der Server über <command>svn update</command>
        Änderungen an Ihre Arbeitskopie schickt, wird ein
        Buchstabencode neben jedem Objekt angezeigt, um Ihnen
        anzuzeigen, was Subversion gemacht hat, um die Arbeitskopie
        auf den neuesten Stand zu bringen. Zur Bedeutung der
        Buchstaben, rufen Sie <userinput>svn help update</userinput>
        auf.</para>
    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.edit">
<!--
      <title>Make Changes to Your Working Copy</title>
-->
      <title>Nehmen Sie Änderungen an Ihrer Arbeitskopie vor</title>

<!--
      <para>Now you can get to work and make changes in your working
        copy.  It's usually most convenient to decide on a discrete
        change (or set of changes) to make, such as writing a new
        feature, fixing a bug, and so on.  The Subversion commands that you
        will use here are <command>svn add</command>, <command>svn
        delete</command>, <command>svn copy</command>, <command>svn
        move</command>, and <command>svn mkdir</command>.  However, if
        you are merely editing files that are already in Subversion,
        you may not need to use any of these commands until you
        commit.</para>
-->
      <para>Nun können Sie loslegen und Änderungen an Ihrer
        Arbeitskopie vornehmen. Normalerweise ist es am einfachsten,
        sich für eine bestimmte Änderung (oder eine Menge von
        Änderungen) zu entscheiden, etwa ein neues Feature zu
        implementieren oder einen Fehler zu beseitigen usw. Die
        Subversion-Befehle, die Sie hierfür verwenden werden sind
        <command>svn add</command>, <command>svn delete</command>,
        <command>svn copy</command>, <command>svn move</command> und
        <command>svn mkdir</command>.  Falls Sie jedoch größtenteils
        Dateien editieren, die bereits mit Subversion verwaltet
        werden, brauchen Sie keinen dieser Befehle, bis Sie die
        Änderungen übergeben.</para>

<!--
      <para>You can make two kinds of changes to your
        working copy: <firstterm>file changes</firstterm>
        and <firstterm>tree changes</firstterm>.  You don't need to
        tell Subversion that you intend to change a file; just make
        your changes using your text editor, word processor, graphics
        program, or whatever tool you would normally use.  Subversion
        automatically detects which files have been changed, and in
        addition, it handles binary files just as easily as it handles
        text files&mdash;and just as efficiently, too.  For tree
        changes, you can ask Subversion to <quote>mark</quote> files
        and directories for scheduled removal, addition, copying, or
        moving.  These changes may take place immediately in your
        working copy, but no additions or removals will happen in the
        repository until you commit them.</para>
-->
      <para>Sie können zwei Arten von Änderungen an Ihrer
        Arbeitskopie vornehmen:
        <firstterm>Dateiänderungen</firstterm> und
        <firstterm>Verzeichnisbaumänderungen</firstterm>. Sie brauchen
        Subversion nicht mitzuteilen, dass Sie beabsichtigen, eine
        Datei zu ändern; nehmen Sie einfach die Änderungen mit Ihrem
        Texteditor, Textverarbeitungsprogramm, Grafikprogramm oder
        sonstigen Programm vor, wie Sie es gewohnt sind. Subversion
        stellt automatisch fest, welche Dateien sich geändert haben
        und behandelt dabei Binärdateien genauso einfach wie
        Textdateien &ndash; und genauso effizient. Für Änderungen am
        Verzeichnisbaum können Sie Subversion mitteilen, Dateien und
        Verzeichnisse zum geplanten Entfernen, Hinzufügen, Kopieren
        oder Verschieben <quote>vorzumerken</quote>. Diese Änderungen
        finden sofort in Ihrer Arbeitskopie statt, doch nichts wird
        dem Repository hinzugefügt oder daraus entfernt, bevor Sie die
        Änderungen übergeben.</para>

      <sidebar>
<!--
        <title>Versioning Symbolic Links</title>
-->
        <title>Versionierung symbolischer Links</title>

<!--
        <para>On non-Windows platforms, Subversion is able to version
          files of the special type <firstterm>symbolic
          link</firstterm> (or <quote>symlink</quote>).  A symlink is
          a file that acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by way of performing
          operations on the symlink itself.</para>
-->
        <para>Auf Nicht-Windows-Systemen kann Subversion den
          besonderen Dateityp <firstterm>symbolischer Link</firstterm>
          (oder <firstterm>Symlink</firstterm>) versionieren. Ein
          Symlink ist eine Datei, die sich wie eine transparente
          Referenz auf ein anderes Objekt im Dateisystem verhält, und
          somit Programmen die Möglichkeit bietet, indirekt auf dieses
          Objekt zuzugreifen, indem sie Operationen auf dem Symlink
          ausführen.</para>

<!--
        <para>When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
          <quote>points.</quote>  When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn't in any way limit the
          usability of working copies on systems such as Windows that
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which to the original symlink pointed.  While that file
          can't be used as a symlink on a Windows system, it also
          won't prevent Windows users from performing their other
          Subversion-related activities.</para> </sidebar>
-->
        <para>Wenn ein Symlink in Subversion übergeben wird, merkt
          sich Subversion sowohl, dass die Datei eigentlich ein
          Symlink ist, als auch das Objekt, auf das der Symlink
          <quote>zeigt</quote>. Wenn dieser Symlink auf einem
          Nicht-Windows-System in einer anderen Arbeitskopie ausgecheckt
          wird, rekonstruiert Subversion aus dem versionierten Symlink
          einen echten Symlink auf Dateisystemebene. Jedoch
          beeinträchtigt das keineswegs die Benutzbarkeit von
          Arbeitskopien auf Systemen wie Windows, die keine Symlinks
          unterstützen. Auf diesen Systemen erzeugt Subversion einfach
          eine Textdatei, deren Inhalt der Pfad ist, auf den der
          ursprüngliche Symlink gezeigt hat. Obwohl diese Datei unter
          Windows nicht als Symlink verwendet werden kann, hindert es
          Windows-Benutzer nicht an der Ausübung anderer Tätigkeiten
          mit Subversion.</para> </sidebar>

<!--
      <para>Here is an overview of the five Subversion subcommands
        that you'll use most often to make tree changes:</para>
-->
      <para>Hier ist ein Überblick der fünf Subversion-Unterbefehle,
        die Sie am häufigsten benutzen werden, um Änderungen am
        Verzeichnisbaum vorzunehmen:</para>

      <variablelist>

        <varlistentry>
          <term><userinput>svn add foo</userinput></term>
          <listitem>
<!--
            <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be added to the repository.
              When you next commit, <filename>foo</filename> will
              become a child of its parent directory.  Note that if
              <filename>foo</filename> is a directory, everything
              underneath <filename>foo</filename> will be scheduled
              for addition.  If you want only to add
              <filename>foo</filename> itself, pass the
              <option>- -depth empty</option> option.</para>
-->
            <para>Die Datei, das Verzeichnis oder den symbolischen
              Link <filename>foo</filename> zum Hinzufügen in das
              Repository vormerken. Wenn Sie das nächste Mal übergeben,
              wird <filename>foo</filename> ein Kind seines
              Elternverzeichnisses. Beachten Sie, dass alles unterhalb
              von <filename>foo</filename> zum Hinzufügen vorgemerkt
              wird, falls <filename>foo</filename> ein Verzeichnis
              ist. Falls Sie nur <filename>foo</filename> selber
              hinzufügen möchten, geben Sie die <option>--depth
                empty</option>-Option an.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn delete foo</userinput></term>
          <listitem>
<!--
            <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be deleted from the
              repository.  If <filename>foo</filename> is a file or
              link, it is immediately deleted from your working copy.
              If <filename>foo</filename> is a directory, it is not
              deleted, but Subversion schedules it for deletion.  When
              you commit your changes, <filename>foo</filename> will
              be entirely removed from your working copy and the
              repository.
              <footnote>
                <para>Of course, nothing is ever totally deleted from
                  the repository&mdash;just from the
                  <literal>HEAD</literal> of the repository.  You can
                  get back anything you delete by checking out (or
                  updating your working copy to) a revision earlier
                  than the one in which you deleted it. Also see <xref
                  linkend="svn.branchmerge.basicmerging.resurrect"
                  />.</para>
              </footnote>
            </para>
-->
            <para>Die Datei, das Verzeichnis oder den symbolischen
              Link <filename>foo</filename> zum Löschen aus dem
              Repository vormerken. <filename>foo</filename> wird
              sofort aus der Arbeitskopie entfernt, falls es eine
              Datei oder ein Link ist. Falls <filename>foo</filename>
              ein Verzeichnis ist, wird es nicht gelöscht, sondern zum
              Löschen vorgemerkt. Wenn Sie Ihre Änderungen übergeben,
              wird das gesamte Verzeichnis <filename>foo</filename>
              aus der Arbeitskopie und dem Repository entfernt.
              <footnote>
                <para>Selbstverständlich wird nichts jemals
                  vollständig aus dem Repository
                  gelöscht &ndash; lediglich aus der
                  <literal>HEAD</literal>-Revision des Repositorys.
                  Sie können alles was Sie gelöscht haben zurückholen,
                  indem Sie eine Revision auschecken
                  (oder hierauf aktualisieren), die älter ist, als die
                  Revision Ihrer Löschung. Siehe auch <xref
                    linkend="svn.branchmerge.basicmerging.resurrect"
                    />.</para>
              </footnote>
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn copy foo bar</userinput></term>
          <listitem>
<!--
            <para>Create a new item <filename>bar</filename> as a
              duplicate of <filename>foo</filename> and automatically
              schedule <filename>bar</filename> for addition.  When
              <filename>bar</filename> is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from <filename>foo</filename>).
              <command>svn copy</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Erzeuge ein neues Objekt <filename>bar</filename>
              als Duplikat von <filename>foo</filename> und merke
              <filename>bar</filename> automatisch zum Hinzufügen vor.
              Wird bei der nächsten Übergabe <filename>bar</filename> dem
              Repository hinzugefügt, wird die Historie der Kopie
              mitaufgezeichnet (so wie sie ursprünglich in
              <filename>foo</filename> war).  <command>svn
                copy</command> erzeugt keine Zwischenverzeichnisse,
              sofern nicht die Option <option>--parents</option>
              angegeben wird..</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn move foo bar</userinput></term>
          <listitem>
<!--
            <para>This command is exactly the same as running
              <userinput>svn copy foo bar; svn delete foo</userinput>.
              That is, <filename>bar</filename> is scheduled for
              addition as a copy of <filename>foo</filename>, and
              <filename>foo</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories unless you pass the
              <option>- -parents</option> option.</para>
-->
            <para>Dieser Befehl macht genau das gleiche wie
              <userinput>svn copy foo bar; svn delete foo</userinput>.
              D.h., <filename>bar</filename> wird zum Hinzufügen als
              Kopie von <filename>foo</filename> und
              <filename>foo</filename> selbst zum Löschen vorgemerkt.
              <command>svn move</command> erzeugt keine
              Zwischenverzeichnisse, sofern nicht die Option
              <option>--parents</option> angegeben wird.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><userinput>svn mkdir blort</userinput></term>
          <listitem>
<!--
            <para>This command is exactly the same as running
              <userinput>mkdir blort; svn add blort</userinput>.  That is,
              a new directory named <filename>blort</filename> is
              created and scheduled for addition.</para>
-->
            <para>Dieser Befehl macht genau das gleiche wie
              <userinput>mkdir blort; svn add blort</userinput>. D.h., ein
              neues Verzeichnis namens <filename>blort</filename> wird
              angelegt und zum Hinzufügen vorgemerkt.</para>
          </listitem>
        </varlistentry>

      </variablelist>

      <sidebar>
<!--
        <title>Changing the Repository Without a Working Copy</title>
-->
        <title>Ändern des Repositorys ohne Arbeitskopie</title>

<!--
        <para>There <emphasis>are</emphasis> some use cases that
          immediately commit tree changes to the repository.  This
          happens only when a subcommand is operating directly on a
          URL, rather than on a working-copy path.  In particular,
          specific uses of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can work with URLs (and don't
          forget that <command>svn import</command> always makes
          changes to a URL).</para>
-->
        <para>Es <emphasis>gibt</emphasis> einige Anwendungsfälle, die
          Änderungen am Verzeichnisbaum unmittelbar in das Repository
          übertragen. Das passiert nur, wenn ein Unterbefehl direkt
          auf einen URL statt auf einen Pfad in der Arbeitskopie
          angewendet wird. Im Einzelnen können spezielle Anwendungen
          der Befehle <command>svn mkdir</command>, <command>svn
            copy</command>, <command>svn move</command> und
          <command>svn delete</command> mit URLs arbeiten (und
          vergessen Sie nicht, dass <command>svn import</command>
          immer Änderungen über einen URL macht).</para>

<!--
        <para>URL operations behave in this manner because commands
          that operate on a working copy can use the working copy as a
          sort of <quote>staging area</quote> to set up your changes
          before committing them to the repository.  Commands that
          operate on URLs don't have this luxury, so when you operate
          directly on a URL, any of the aforementioned actions represents an
          immediate commit.</para>
-->
        <para>URL Operationen verhalten sich auf diese Weise, da
          Befehle, die auf einer Arbeitskopie arbeiten, diese als eine
          Art <quote>Bereitstellungsraum</quote> verwenden, in denen
          Ihre Änderungen vorbereitet werden können, bevor sie in das
          Repository übergeben werden. Befehle, die auf URLs arbeiten,
          haben diesen Luxus nicht, so dass die Arbeit direkt mit
          einem URL bei den oben genannten Aktionen eine sofortige Übergabe
          repräsentiert.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.examine">
<!--
      <title>Examine Your Changes</title>
-->
      <title>Untersuchen Sie Ihre Änderungen</title>

<!--
      <para>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can make a more
        accurate log message.  You may also discover that you've
        inadvertently changed a file, and this gives you a chance to
        revert those changes before committing.  Additionally, this is
        a good opportunity to review and scrutinize changes before
        publishing them.  You can see an overview of the changes
        you've made by using <command>svn status</command>, and dig
        into the details of those changes by using <command>svn
        diff</command>.</para>
-->
      <para>Sobald Sie mit Ihren Änderungen fertig sind, müssen Sie
        sie ins Repository bringen; bevor Sie das jedoch machen, ist
        es normalerweise eine gute Idee, sich die Änderungen noch
        einmal anzusehen. Dadurch, dass Sie die Änderungen noch
        einmal begutachten, können Sie eine genauere Log-Nachricht
        schreiben. Sie könnten auch feststellen, dass Sie
        versehentlich eine Datei geändert haben, und hier haben Sie
        die Möglichkeit, vor der Übergabe die Änderung rückgängig zu
        machen. Zusätzlich bietet sich hierbei eine gute Gelegenheit,
        die Änderungen vor der Veröffentlichung noch einmal genau
        durchzugehen. Sie können sich mit <command>svn
          status</command> einen Überblick über Ihre Änderungen
        verschaffen und mit <command>svn diff</command> die Änderungen
        im Detail anzeigen lassen.</para>

      <sidebar>
<!--
        <title>Look Ma! No Network!</title>
-->
        <title>Guck mal, Mutti, kein Netzwerk!</title>

<!--
        <para>You can use the commands <command>svn status</command>,
          <command>svn diff</command>, and <command>svn
          revert</command> without any network access even
          if your repository <emphasis>is</emphasis> across the
          network.  This makes it easy to manage your
          changes-in-progress when you are somewhere without a network
          connection, such as traveling on an airplane, riding a
          commuter train, or hacking on the beach.
          <footnote>
            <para>And you don't have a WLAN card.  Thought
              you got us, huh?</para>
          </footnote>
        </para>
-->
        <para>Sie können die Befehle <command>svn status</command>,
          <command>svn diff</command> und <command>svn
            revert</command> ohne Netzzugriff verwenden,
          selbst wenn das Repository im Netz <emphasis>ist</emphasis>.
          Das macht es leicht, Ihre momentanen Änderungen zu
          verwalten, wenn Sie irgendwo ohne Netzverbindung sind, etwa
          im Flugzeug, im Pendlerzug oder am Strand.
          <footnote>
            <para>Und Sie haben keine WLAN-Karte. Sie dachten wohl,
              Sie kriegen uns, was?</para>
          </footnote>
        </para>

<!--
        <para>Subversion does this by keeping private caches of
          pristine versions of each versioned file inside the
          <filename>.svn</filename> administrative areas.  This allows
          Subversion to report&mdash;and revert&mdash;local
          modifications to those files <emphasis>without network
          access</emphasis>.  This cache (called the
          <quote>text-base</quote>) also allows Subversion to send the
          user's local modifications during a commit to the server as
          a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&mdash;even if you
          have a fast Internet connection, it's much faster to send only a
          file's changes rather than the whole file to the
          server.</para>
-->
        <para>Subversion bewerkstelligt das, indem es unveränderte
          Versionen jeder versionierten Datei in einem privaten Cache
          innerhalb des <filename>.svn</filename>-Verwaltungsbereichs
          vorhält. Das erlaubt Subversion, lokale Änderungen an diesen
          Dateien <emphasis>ohne Netzzugriff</emphasis>
          anzuzeigen &ndash; und rückgängig zu machen. Dieser Cache
          (<quote>Text-Base</quote> genannt) erlaubt es Subversion
          ebenfalls, bei einer Übergabe die lokalen Änderungen des Benutzers als
          komprimiertes <firstterm>Delta</firstterm> (oder
          <quote>Differenz</quote>) gegenüber der unveränderten
          Version zum Server zu senden. Diesen Cache zu haben,
          bedeutet einen riesigen Vorteil &ndash; selbst wenn Sie eine
          schnelle Internet-Verbindung haben, ist es viel schneller, nur
          die Änderungen an einer Datei an den Server zu übermitteln,
          anstatt die gesamte Datei.</para>

      </sidebar>

<!--
      <para>Subversion has been optimized to help you with this task,
        and it is able to do many things without communicating with
        the repository.  In particular, your working copy contains a
        hidden cached <quote>pristine</quote> copy of each version-controlled
        file within the <filename>.svn</filename> area.
        Because of this, Subversion can quickly show you how your
        working files have changed or even allow you to undo your
        changes without contacting the repository.</para>
-->
      <para>Subversion ist optimiert worden, um Ihnen bei dieser
        Aufgabe zu helfen, und es ist in der Lage, viele Dinge zu tun,
        ohne mit dem Repository kommunizieren zu müssen. Im Besonderen
        enthält Ihre Arbeitskopie eine versteckte
        <quote>unveränderte</quote> Kopie jeder versionskontrollierten
        Datei innerhalb des <filename>.svn</filename>-Bereichs.
        Deswegen kann Ihnen Subversion schnell zeigen, wie sich Ihre
        bearbeiteten Dateien geändert haben, und es erlaubt Ihnen
        sogar, Ihre Änderungen zurückzunehmen, ohne Verbindung mit dem
        Repository aufnehmen zu müssen.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.status">
<!--
        <title>See an overview of your changes</title>
-->
        <title>Verschaffen Sie sich einen Überblick über Ihre
          Änderungen</title>

<!--
        <para>To get an overview of your changes, you'll use the
          <command>svn status</command> command.  You'll probably use
          <command>svn status</command> more than any other Subversion
          command.</para>
-->
        <para>Um einen Überblick über Ihre Änderungen zu bekommen,
          werden Sie den <command>svn status</command>-Befehl
          verwenden. Wahrscheinlich werden Sie den Befehl <command>svn
            status</command> häufiger benutzen als alle anderen
          Subversion-Befehle.</para>

        <sidebar>
<!--
          <title>CVS Users: Hold That Update!</title>
-->
          <title>CVS Anwender: Zurückhaltung mit Update!</title>

<!--
          <para>You're probably used to using <command>cvs
            update</command> to see what changes you've made to your
            working copy.  <command>svn status</command> will give you
            all the information you need regarding what has changed in
            your working copy&mdash;without accessing the repository
            or potentially incorporating new changes published by
            other users.</para>
-->
          <para>Sehr wahrscheinlich sind Sie es gewohnt, <command>cvs
              update</command> zu benutzen, um zu sehen, welche
            Änderungen Sie an Ihrer Arbeitskopie vorgenommen haben.
            <command>svn status</command> stellt Ihnen alle
            Informationen zur Verfügung, die Sie über Änderungen an
            der Arbeitskopie benötigen &ndash; ohne mit dem Repository
            in Verbindung zu treten oder möglicherweise neue
            Änderungen von anderen Benutzern einzupflegen.</para>

<!--
          <para>In Subversion, <command>svn update</command> does just
            that&mdash;it updates your working copy with any changes
            committed to the repository since the last time you
            updated your working copy.  You may have to break the
            habit of using the <command>update</command> command to
            see what local modifications you've made.</para>
-->
          <para>In Subversion, macht <command>svn update</command> genau
            das &ndash; es aktualisiert Ihre Arbeitskopie mit jeglichen
            Änderungen, die seit Ihrer letzten Aktualisierung in das
            Repository eingebracht worden sind. Sie sollten sich
            abgewöhnen, <command>update</command> zu verwenden, um
            nachzusehen, welche lokalen Änderungen Sie gemacht
            haben.</para>

        </sidebar>

<!--
        <para>If you run <command>svn status</command> at the top of
          your working copy with no arguments, it will detect all file
          and tree changes you've made.  Here are a few examples of
          the most common status codes that <command>svn
          status</command> can return.  (Note that the text following
          <literal>#</literal> is not
          actually printed by <command>svn status</command>.)</para>
-->
        <para>Wenn Sie <command>svn status</command> ganz oben in
          Ihrer Arbeitskopie aufrufen, werden alle Datei- und
          Verzeichnisbaumänderungen erfasst, die Sie gemacht haben.
          Hier sind einige Beispiele der häufigsten Statuscodes, die
          <command>svn status</command> zurückgeben kann.  (Beachten
          Sie, dass der Text, der <literal>#</literal> folgt, nicht
          von <command>svn status</command> ausgegeben wird.)</para>

        <screen>
?       scratch.c           # Datei ist nicht versionskontrolliert
A       stuff/loot/bloo.h   # Datei ist zum Hinzufügen vorgemerkt
C       stuff/loot/lump.c   # Datei hat Konflikte durch einen Update
D       stuff/fish.c        # Datei ist zum Löschen vorgemerkt
M       bar.c               # Der Inhalt von bar.c hat lokale Änderungen
</screen>

<!--
        <para>In this output format, <command>svn status</command>
          prints six columns of characters, followed by several
          whitespace characters, followed by a file or directory name.
          The first column tells the status of a file or directory
          and/or its contents.  The codes we listed are:</para>
-->
        <para>In diesem Ausgabeformat zeigt <command>svn
            status</command> sechs Spalten mit Zeichen, gefolgt von
          mehreren Leerzeichen, gefolgt von einem Datei- oder
          Verzeichnisnamen an. Die erste Spalte gibt Aufschluss über
          den Zustand einer Datei oder eines Verzeichnisses und/oder
          des entsprechenden Inhalts.</para>

        <variablelist>

          <varlistentry>
            <term><computeroutput>A      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
-->
              <para>Die Datei, das Verzeichnis oder der symbolische
                Link <filename>item</filename> ist zum Hinzufügen in
                das Repository vorgemerkt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>C      item</computeroutput></term>
            <listitem>

<!--
              <para>The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy (and weren't
                resolved during the update).  You must resolve this
                conflict before committing your changes to the
                repository.</para>
-->
              <para>Die Datei <filename>item</filename> befindet sich
                in einem Konfliktzustand. D.h., Änderungen, die vom
                Server bei einer Aktualisierung empfangen wurden,
                überlappen sich mit lokalen Änderungen, die Sie in
                Ihrer Arbeitskopie haben (und konnten beim
                Aktualisieren nicht automatisch aufgelöst werden). Sie
                müssen den Konflikt auflösen, bevor Sie Ihre
                Änderungen in das Repository übergeben können.</para>

            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>D      item</computeroutput></term>
            <listitem>
<!--
              <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
-->
              <para>Die Datei, das Verzeichnis oder der symbolische
                Link <filename>item</filename> ist zum Löschen im
                Repository vorgemerkt.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><computeroutput>M      item</computeroutput></term>
            <listitem>
<!--
              <para>The contents of the file <filename>item</filename>
                have been modified.</para>
-->
              <para>Der Inhalt der Datei <filename>item</filename>
                ist geändert worden.</para>
            </listitem>
          </varlistentry>

        </variablelist>

<!--
        <para>If you pass a specific path to <command>svn
          status</command>, you get information about that item
          alone:</para>
-->
        <para>Wenn Sie einen speziellen Pfad an <command>svn
            status</command> übergeben, bekommen Sie nur Informationen
          über das Objekt alleine:</para>

        <screen>
$ svn status stuff/fish.c
D      stuff/fish.c
</screen>

<!--
        <para><command>svn status</command> also has a
          <option>- -verbose</option> (<option>-v</option>) option,
          which will show you the status of <emphasis>every</emphasis>
          item in your working copy, even if it has not been
          changed:</para>
-->
        <para><command>svn status</command> hat auch eine
          <option>--verbose</option>-Option (<option>-v</option>),
          die Ihnen den Zustand <emphasis>jedes</emphasis> Objektes in
          der Arbeitskopie anzeigt, selbst wenn es sich nicht geändert
          hat:</para>

        <screen>
$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>

<!--
        <para>This is the <quote>long form</quote> output of
          <command>svn status</command>.  The letters in the first
          column mean the same as before, but the second column shows
          the working revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it.</para>
-->
        <para>Dies ist das <quote>lange Format</quote> der Ausgabe von
          <command>svn status</command>.  Die Buchstaben in der ersten
          Spalte bedeuten dasselbe wie vorher, jedoch zeigt die zweite
          Spalte die Arbeitsrevision des Objektes an. Die dritte und
          vierte Spalte zeigen die Revision der letzten Änderung an
          und wer es geändert hat.</para>

<!--
        <para>None of the prior invocations to <command>svn
          status</command> contact the repository&mdash;instead, they
          compare the metadata in the <filename>.svn</filename>
          directory with the working copy.  Finally, there is the
          <option>- -show-updates</option> (<option>-u</option>)
          option, which contacts the repository and adds information
          about things that are out of date:</para>
-->
        <para>Keiner der vorangegangenen Aufrufe von <command>svn
            status</command> stellt eine Verbindung zum Repository
          her &ndash; stattdessen werden die Metadaten im
          Verzeichnis <filename>.svn</filename> mit der Arbeitskopie
          verglichen. Schließlich gibt es die
          <option>--show-updates</option>-Option (<option>-u</option>),
          die eine Verbindung zum Repository herstellt, und
          Informationen darüber bereitstellt, was nicht mehr aktuell
          ist:</para>

<!--
        <screen>
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</screen>
-->
        <screen>
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status bezogen auf Revision:   46
</screen>

<!--
        <para>Notice the two asterisks: if you were to run
          <userinput>svn update</userinput> at this point, you would
          receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&mdash;you'll need to update and get the
          server changes on <filename>README</filename> before you
          commit, or the repository will reject your commit for being
          out of date (more on this subject later).</para>
-->
        <para>Beachten Sie die zwei Sternchen: Wenn Sie an dieser
          Stelle <userinput>svn update</userinput> aufrufen würden,
          erhielten Sie Änderungen an <filename>README</filename> und
          <filename>trout.c</filename>. Das gibt Ihnen einige sehr
          wichtige Informationen &ndash; Sie müssen aktualisieren, um
          die Änderungen auf dem Server an <filename>README</filename>
          mitzubekommen, bevor Sie übergeben, oder das Repository wird
          Ihre Übergabe ablehnen, da sie nicht aktuell ist (mehr dazu
          später).</para>

<!--
          <para><command>svn status</command> can display much more
            information about the files and directories in your
            working copy than we've shown here&mdash;for an exhaustive
            description of <command>svn status</command> and its
            output, see <xref linkend="svn.ref.svn.c.status"/>.</para>
-->
        <para><command>svn status</command> kann viel mehr
          Informationen über Dateien und Verzeichnisse in Ihrer
          Arbeitskopie anzeigen als wir hier gezeigt haben &ndash; für
          eine erschöpfende Beschreibung von <command>svn
            status</command> und dessen Ausgabe, siehe <xref
            linkend="svn.ref.svn.c.status"/>.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.examine.diff">
<!--
        <title>Examine the details of your local modifications</title>
-->
        <title>Untersuchen Sie die Details Ihrer lokalen Änderungen</title>

<!--
        <para>Another way to examine your changes is with the
          <command>svn diff</command> command.  You can find out
          <emphasis>exactly</emphasis> how you've modified things by
          running <userinput>svn diff</userinput> with no arguments, which
          prints out file changes in <firstterm>unified diff
          format</firstterm>:</para>
-->
        <para>Eine andere Möglichkeit, Ihre Änderungen zu untersuchen,
          ist, den <command>svn diff</command>-Befehl zu verwenden.
          Sie können <emphasis>genau</emphasis> herausfinden, wie sie
          etwas geändert haben, indem Sie <userinput>svn
            diff</userinput> ohne Argumente aufrufen, das Ihnen
          Dateiänderungen im <firstterm>unified-diff-Format</firstterm>
          anzeigt:</para>

        <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c   (revision 3)
+++ bar.c   (working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README  (revision 3)
+++ README  (working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c    (revision 1)
+++ stuff/fish.c    (working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h (revision 8)
+++ stuff/things/bloo.h (working copy)
+Here is a new file to describe
+things about bloo.
</screen>

<!--
        <para>The <command>svn diff</command> command produces this
          output by comparing your working files against the cached
          <quote>pristine</quote> copies within the
          <filename>.svn</filename> area.  Files scheduled for
          addition are displayed as all added text, and files
          scheduled for deletion are displayed as all deleted
          text.</para>
-->
        <para>Der <command>svn diff</command>-Befehl erzeugt diese
          Ausgabe, indem er Ihre Arbeitsdateien mit den 
          <quote>unveränderten</quote> Kopien im Cache innerhalb des
          <filename>.svn</filename>-Bereichs vergleicht. Dateien, die
          zum Hinzufügen vorgemerkt sind, werden vollständig als
          hinzugefügter Text dargestellt, und Dateien, die zum Löschen
          vorgemerkt sind, werden vollständig als gelöschter Text
          dargestellt.</para>

<!--
        <para>Output is displayed in unified diff format.  That is,
          removed lines are prefaced with <literal>-</literal>, and
          added lines are prefaced with
          <literal>+</literal>.  <command>svn diff</command> also
          prints filename and offset information useful to the
          <command>patch</command> program, so you can generate
          <quote>patches</quote> by redirecting the diff output to a
          file:</para>
-->
        <para>Die Ausgabe wird im unified-diff-Format dargestellt.
          D.h., gelöschte Zeilen werden mit einem vorangestellten
          <literal>-</literal> und hinzugefügte Zeilen mit einem
          vorangestellten <literal>+</literal> angezeigt.
          <command>svn diff</command> gibt auch Dateinamen und
          Offset-Informationen aus, die das <command>patch</command>-Programm
          verwenden kann, so dass Sie <quote>Patches</quote>
          erzeugen können, indem Sie die diff-Ausgabe in eine Datei
          umleiten:</para>

        <screen>
$ svn diff &gt; patchfile
</screen>

<!--
        <para>You could, for example, email the patch file to another
          developer for review or testing prior to a commit.</para>
-->
        <para>Zum Beispiel können Sie die Patch-Datei vor einer Übergabe an
          einen anderen Entwickler zur Kontrolle oder zum Testen
          schicken.</para>

<!--
        <para>Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
          <option>- -diff-cmd</option> and pass any flags you'd like to
          it using the <option>- -extensions</option>
          (<option>-x</option>) option.  For example, to see local
          differences in file <filename>foo.c</filename> in context
          output format while ignoring case differences, you might run
          <userinput>svn diff - -diff-cmd /usr/bin/diff - -extensions '-i'
          foo.c</userinput>.</para>
-->
        <para>Subversion verwendet seinen eingebauten
          diff-Algorithmus, der standardmäßig das unified-diff-Format
          benutzt.  Falls Sie die Ausgabe von diff in einem anderen
          Format haben möchten, geben Sie ein externes diff-Programm
          mit der <option>--diff-cmd</option>-Option an, und übergeben
          Sie ihm beliebige Flags mit der
          <option>--extensions</option>-Option (<option>-x</option>).
          Um z.B. lokale Unterschiede in der Datei
          <filename>foo.c</filename> im Kontext-Ausgabeformat anzeigen
          zu lassen und dabei die Groß- und Kleinschreibung zu
          ignorieren, könnten Sie <userinput>svn diff --diff-cmd
            /usr/bin/diff --extensions '-i' foo.c</userinput>
          aufrufen.</para>

      </sect3>

    </sect2>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.revert">
<!--
      <title>Undoing Working Changes</title>
-->
      <title>Zurücknehmen von Änderungen in der Arbeitskopie</title>


<!--
      <para>Suppose while viewing the output of <command>svn
        diff</command> you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn't have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.</para>
-->
      <para>Angenommen, Sie stellen beim Ansehen der Ausgabe von
        <command>svn diff</command> fest, dass alle Änderungen, die
        Sie an einer bestimmten Datei gemacht haben, fehlerhaft waren.
        Vielleicht hätten Sie die Datei überhaupt nicht ändern sollen,
        oder es wäre einfacher, von Anfang an unterschiedliche
        Änderungen zu machen.</para>
 
<!--
      <para>This is a perfect opportunity to use <command>svn
          revert</command>:</para>
-->
      <para>Dies ist die perfekte Gelegenheit, <command>svn
          revert</command> zu benutzen:</para>

<!--
      <screen>
$ svn revert README
Reverted 'README'
</screen>
-->
      <screen>
$ svn revert README
Rückgängig gemacht: »README«
</screen>

<!--
      <para>Subversion reverts the file to its premodified state by
        overwriting it with the cached <quote>pristine</quote> copy
        from the <filename>.svn</filename> area.  But also note that
        <command>svn revert</command> can undo
        <emphasis>any</emphasis> scheduled operations&mdash;for
        example, you might decide that you don't want to add a new
        file after all:</para>
-->
      <para>Subversion stellt die Datei wieder so her, wie sie vor der
        Änderung war, indem sie mit der 
        <quote>unveränderten</quote> Kopie aus dem Cache im
        <filename>.svn</filename>-Bereich überschrieben wird. Beachten
        Sie aber auch, dass <command>svn revert</command>
        <emphasis>jegliche</emphasis> vorgemerkten Operationen
        rückgängig machen kann &ndash; z.B. könnten Sie sich
        entscheiden, eine neue Datei erst gar nicht hinzufügen zu
        wollen:</para>

<!--
      <screen>
$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Reverted 'foo'

$ svn status foo
?      foo
</screen>
-->
      <screen>
$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Rückgängig gemacht: »foo«

$ svn status foo
?      foo
</screen>

      <note>
<!--
        <para><userinput>svn revert <replaceable>item</replaceable></userinput> has exactly the same
          effect as deleting <replaceable>item</replaceable> from
          your working copy and then running <userinput>svn update -r
          BASE <replaceable>item</replaceable></userinput>.  However,
          if you're reverting a file, <command>svn revert</command>
          has one very noticeable difference&mdash;it doesn't have
          to communicate with the repository to restore your
          file.</para>
-->
        <para><userinput>svn revert <replaceable>item</replaceable></userinput>
          hat genau denselben Effekt, wie
          <replaceable>item</replaceable> aus der Arbeitskopie zu
          löschen und dann <command>svn update -r BASE</command>
          <replaceable>item</replaceable> aufzurufen. Allerdings hat
          <command>svn revert</command> beim Rückgängigmachen einer
          Datei einen merklichen Unterschied &ndash; es muss beim
          Wiederherstellen der Datei nicht Verbindung mit dem
          Repository aufnehmen.</para>
      </note>

<!--
      <para>Or perhaps you mistakenly removed a file from version
        control:</para>
-->
      <para>Oder vielleicht haben Sie die Datei versehentlich aus der
        Versionsverwaltung gelöscht:</para>

<!--
      <screen>
$ svn status README

$ svn delete README
D         README

$ svn revert README
Reverted 'README'

$ svn status README

</screen>
-->
      <screen>
$ svn status README

$ svn delete README
D         README

$ svn revert README
Rückgängig gemacht: »README«

$ svn status README

</screen>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.resolve">
<!--
      <title>Resolve Conflicts (Merging Others' Changes)</title>
-->
      <title>Konflikte auflösen (Änderungen anderer einarbeiten)</title>

<!--
      <para>We've already seen how <userinput>svn status -u</userinput>
        can predict conflicts.  Suppose you run <userinput>svn
        update</userinput> and some interesting things occur:</para>
-->
      <para>Wir haben bereits gesehen, wie <userinput>svn status
          -u</userinput> Konflikte vorhersagen kann.  Angenommen, Sie
        starten <command>svn update</command> und einige interessante
        Dinge passieren:</para>

<!--
      <screen>
$ svn update
U  INSTALL
G  README
Conflict discovered in 'bar.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options:
</screen>
-->
      <screen>
$ svn update
U  INSTALL
G  README
Konflikt in »bar.c« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
        (h) Hilfe für weitere Optionen:
</screen>

<!--
      <para>The <computeroutput>U</computeroutput> and
        <computeroutput>G</computeroutput> codes are no cause for
        concern; those files cleanly absorbed changes from the
        repository.  The files marked with
        <computeroutput>U</computeroutput> contained no local changes
        but were <computeroutput>U</computeroutput>pdated with changes
        from the repository.  The <computeroutput>G</computeroutput>
        stands for mer<computeroutput>G</computeroutput>ed, which
        means that the file had local changes to begin with, but the
        changes coming from the repository didn't overlap with the local
        changes.</para>
-->
      <para>Die Codes <computeroutput>U</computeroutput> und
        <computeroutput>G</computeroutput> sind kein Grund zur
        Beunruhigung; diese Dateien haben die Änderungen aus dem
        Repository sauber aufgenommen. Die mit
        <computeroutput>U</computeroutput> markierten Dateien
        enthielten keine lokalen Änderungen, wurden jedoch mit
        Änderungen aus dem Repository
        ge<computeroutput>U</computeroutput>pdatet. Das
        <computeroutput>G</computeroutput> steht für
        mer<computeroutput>G</computeroutput>ed, was bedeutet, dass
        die Datei zwar lokale Änderungen enthielt, die Änderungen aus
        dem Repository sich aber nicht damit überschnitten
        haben.</para>

<!--
      <para>But the next two lines are part of a feature (new in
        Subversion 1.5) called <firstterm>interactive conflict
        resolution</firstterm>.  This means that the changes from the
        server overlapped with your own, and you have the opportunity
        to resolve this conflict.  The most commonly used options are
        displayed, but you can see all of the options by
        typing <replaceable>h</replaceable>:</para>
-->
      <para>Die nächsten beiden Zeilen jedoch sind Teil eines Features
        (neu in Subversion 1.5) namens <firstterm>interaktive
          Konfliktauflösung</firstterm>. Das bedeutet, dass die
        Änderungen vom Server sich mit Ihren eigenen überschneiden,
        uns Sie nun die Gelegenheit haben, den Konflikt aufzulösen.
        Die gebräuchlichsten Optionen werden angezeigt, aber alle
        Optionen können sie sehen, wenn Sie
        <replaceable>h</replaceable> eintippen:</para>
<!--
      <screen>
&hellip;
  (p)  postpone    - mark the conflict to be resolved later
  (df) diff-full   - show all changes made to merged file
  (e)  edit        - change merged file in an editor
  (r)  resolved    - accept merged version of file
  (mf) mine-full   - accept my version of entire file (ignore their changes)
  (tf) theirs-full - accept their version of entire file (lose my changes)
  (l)  launch      - launch external tool to resolve conflict
  (h)  help        - show this list
</screen>
-->
      <screen>
&hellip;
  (p)  zurückstellen      - den Konflikt erst später auflösen
  (df) voller Diff        - alle Änderungen in der zusammengeführten Datei anzeigen
  (e)  editieren          - zusammengeführte Datei in einem Editor ändern
  (r)  aufgelöst          - akzeptieren der zusammengeführten Version der Datei
  (mf) volle eigene Datei - die eigene Version der kompletten Datei akzeptieren
                            (ignorieren fremder Änderungen)
  (tf) volle fremde Datei - die fremde Version der kompletten Datei akzeptieren
                            (verlieren eigener Änderungen)
  (l)  starten            - Starten eines externen Programms zur Konfliktauflösung
  (h)  Hilfe              - diese Liste anzeigen
</screen>

<!--
      <para>Let's briefly review each of these options before we go
        into detail on what each option means.</para>
-->
      <para>Bevor wir im Detail erklären, was jede Option bedeutet,
        gehen wir noch mal eben die Optionen durch.</para>

      <variablelist>
        <varlistentry>
          <term>(<computeroutput>p</computeroutput>)ostpone</term>
          <listitem>

<!--
            <para>Leave the file in a conflicted state for you to
              resolve after your update is complete.</para>
-->
            <para>Die Datei im Konfliktzustand lassen, um nach
              Abschluss der Aktualisierung die Konfliktauflösung
              durchzuführen.</para>

          </listitem>
        </varlistentry>



        <varlistentry>
          <term>(<computeroutput>d</computeroutput>)iff</term>
          <listitem>

<!--
            <para>Display the differences between the base revision
              and the conflicted file itself in unified diff format.</para>
-->
            <para>Die Unterschiede zwischen der Basisrevision und der
              Konfliktdatei im unified-diff-Format anzeigen.</para>

          </listitem>
        </varlistentry>


        <varlistentry>
          <term>(<computeroutput>e</computeroutput>)dit</term>
          <listitem>

<!--
            <para>Open the file in conflict with your favorite editor,
              as set in the environment variable
              <literal>EDITOR</literal>.</para>
-->
            <para>Die Konfliktdatei im bevorzugten Editor, wie in
              der Umgebungsvariablen <literal>EDITOR</literal>
              angegeben, öffnen.</para>

          </listitem>
        </varlistentry>


        <varlistentry>
          <term>(<computeroutput>r</computeroutput>)esolved</term>
          <listitem>

<!--
            <para>After editing a file, tell
              <command>svn</command> that you've resolved the
              conflicts in the file and that it should accept the
              current contents&mdash;basically that you've
              <quote>resolved</quote> the conflict.</para>
-->
            <para>Nach dem Bearbeiten einer Datei teilen Sie 
              <command>svn</command> mit, dass Sie die Konflikte in
              der Datei aufgelöst haben und der aktuelle Inhalt
              übernommen werden soll.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>(<computeroutput>m</computeroutput>)ine-(<computeroutput>f</computeroutput>)ull</term>
          <listitem>

<!--
            <para>Discard the newly received changes from the server
              and use only your local changes for the file under review.</para>
-->
            <para>Die neuen vom Server erhaltenen Änderungen verwerfen
              und nur Ihre lokalen Änderungen an der zu überprüfenden
              Datei verwenden.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>(<computeroutput>t</computeroutput>)heirs-(<computeroutput>f</computeroutput>)ull</term>
          <listitem>

<!--
            <para>Discard your local changes to the file under review
              and use only the newly received changes from the
              server.</para>
-->
            <para>Ihre lokalen Änderungen an der zu überprüfenden
              Datei verwerfen und nur die neuen vom Server erhaltenen
              Änderungen verwenden.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>(<computeroutput>l</computeroutput>)aunch</term>
          <listitem>

<!--
            <para>Launch an external program to perform the conflict
            resolution.  This requires a bit of preparation
            beforehand.</para>
-->
            <para>Ein externes Programm zur Konfliktauflösung starten.
              Das setzt Vorbereitungen voraus.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>(<computeroutput>h</computeroutput>)elp</term>
          <listitem>

<!--
            <para>Show the list of all possible commands you can use
            in interactive conflict resolution.</para>
-->
            <para>Die Liste aller bei der interaktiven
              Konfliktauflösung möglichen Befehle anzeigen.</para>

          </listitem>
        </varlistentry>

      </variablelist>

<!--
      <para>We'll cover these commands in more detail now, grouping
        them together by related functionality.</para>
-->
      <para>Wir werden diese Befehle nun detaillierter behandeln,
        wobei sie nach Funktionalität gruppiert werden.</para>


      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.diff">

<!--
        <title>Viewing conflict differences interactively</title>
-->
        <title>Interaktive Begutachtung der Konflikte</title>

<!--
        <para>Before deciding how to attack a conflict interactively,
          odds are that you'd like to see exactly what is in conflict,
          and the <firstterm>diff</firstterm> command
          (<userinput>d</userinput>) is what you'll use for this:</para>
-->
        <para>Bevor Sie entscheiden, wie Sie einen Konflikt beseitigen
          wollen, wollen Sie wahrscheinlich genau sehen, worin der
         Konflikt besteht, und benutzen hierfür den Befehl
         <firstterm>diff</firstterm> (<userinput>d</userinput>):</para>

        <screen>
&hellip;
Select: (p) postpone, (df) diff-full, (e) edit,
        (h)elp for more options : d
--- .svn/text-base/sandwich.txt.svn-base      Tue Dec 11 21:33:57 2007
+++ .svn/tmp/tempfile.32.tmp     Tue Dec 11 21:34:33 2007
@@ -1 +1,5 @@
-Just buy a sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
+Go pick up a cheesesteak.
+=======
+Bring me a taco!
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
&hellip;
</screen>

<!--
        <para>The first line of the diff content shows the previous
          contents of the working copy (the <literal>BASE</literal>
          revision), the next content line is your change, and the
          last content line is the change that was just received from
          the server (<emphasis>usually</emphasis> the
          <literal>HEAD</literal> revision).  With this information in
          hand, you're ready to move on to the next action.</para>
-->
        <para>Die erste Zeile des diff-Inhalts zeigt den vorherigen
          Inhalt der Arbeitskopie (die <literal>BASE</literal>-Revision),
          die nächste Zeile beinhaltet Ihre Änderung und
          die letzte Zeile ist die Änderung, die soeben vom Server
          empfangen worden ist (<emphasis>gewöhnlich</emphasis> die
          <literal>HEAD</literal>-Revision).  Mit diesen Informationen
          sind Sie bereit für den nächsten Schritt.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.resolve">

<!--
        <title>Resolving conflict differences interactively</title>
-->
        <title>Interaktive Konfliktauflösung</title>

<!--
        <para>There are four different ways to resolve conflicts
          interactively&mdash;two of which allow you to selectively
          merge and edit changes, and two of which allow you to simply
          pick a version of the file and move along.</para>
-->
        <para>Es gibt vier verschiedene Wege, um Konflikte interaktiv
          aufzulösen &ndash; von denen Ihnen zwei erlauben, Änderungen
          selektiv zusammenzuführen und zu editieren und zwei, die es
          Ihnen erlauben, einfach eine Version der Datei auszuwählen
          und weiterzumachen.</para>

<!--
        <para>If you wish to choose some combination of your local
          changes, you can use the <quote>edit</quote> command
          (<userinput>e</userinput>) to manually edit the file with
          conflict markers in a text editor (determined by the
          <literal>EDITOR</literal> environment variable).  Editing
          the file by hand in your favorite text editor is a somewhat
          low-tech way of remedying conflicts (see <xref
          linkend="svn.tour.cycle.resolve.byhand"/> for a
          walkthrough), so some people like to use fancy graphical
          merge tools instead.</para>
-->
        <para>Falls Sie eine beliebige Kombination Ihrer lokalen
          Änderungen auswählen wollen, können Sie den
          <quote>edit</quote>-Befehl (<userinput>e</userinput>)
          verwenden, um die Datei mit den Konfliktmarken manuell in
          einem Texteditor (der durch die Umgebungsvariable
          <literal>EDITOR</literal> bestimmt wird) zu bearbeiten. Die
          Datei händisch in Ihrem Lieblingseditor zu bearbeiten ist
          eine Art Konflikte zu beseitigen, die sich einer ziemlich
          schlichten Technik bedient (siehe <xref
          linkend="svn.tour.cycle.resolve.byhand"/> für einen
          Beispieldurchgang), so dass manche Leute lieber feinste
          Zusammenführungs-Werkzeuge benutzen.</para>

<!--
        <para>To use a merge tool, you need to either set the
          <literal>SVN_MERGE</literal> environment variable or define
          the <literal>merge-tool-cmd</literal> option in your
          Subversion configuration file (see <xref
          linkend="svn.advanced.confarea.opts"/> for more details).
          Subversion will pass four arguments to the merge tool: the
          <literal>BASE</literal> revision of the file, the revision
          of the file received from the server as part of the update,
          the copy of the file containing your local edits, and
          the merged copy of the file (which contains conflict
          markers).  If your merge tool is expecting arguments in a
          different order or format, you'll need to write a wrapper
          script for Subversion to invoke.  After you've edited the
          file, if you're satisfied with the changes you've made, you
          can tell Subversion that the edited file is no longer in
          conflict by using the <quote>resolve</quote> command
          (<literal>r</literal>).</para>
-->
        <para>Um ein Zusammenführungs-Werkzeug benutzen zu können, müssen Sie
          entweder die Umgebungsvariable <literal>SVN_MERGE</literal>
          setzen oder die <literal>merge-tool-cmd</literal>-Option in
          Ihrer Subversion-Konfigurationsdatei definieren (siehe <xref
          linkend="svn.advanced.confarea.opts"/> für weitere Details).
          Subversion übergibt vier Argumente an das Zusammenführungs-Werkzeug: die
          <literal>BASE</literal>-Revision der Datei, die
          Dateirevision, die durch die Aktualisierung vom Server empfangen
          wurde, die Dateirevision, die Ihre lokale Bearbeitung
          beinhaltet und die zusammengeführte Kopie der Datei (die
          Konfliktmarken enthält). Falls Ihr Zusammenführungs-Werkzeug die Argumente
          in einer anderen Reihenfolge oder in einem anderen Format
          erwartet, werden Sie ein Skript drumherum schreiben müssen,
          das von Subversion aufgerufen wird. Nachdem Sie die Datei
          bearbeitet haben und zufrieden mit Ihren Änderungen sind,
          können Sie Subversion mitteilen, dass für die bearbeitete
          Datei kein Konflikt mehr besteht, indem sie den
          <quote>resolve</quote>-Befehl (<literal>r</literal>)
          benutzen.</para>

          <!-- TODO(fitz): I think the above detail on the merge tool -->
          <!-- should probably be in ch07 -->

<!--
        <para>If you decide that you don't need to merge any changes,
          but just want to accept one version of the file or the
          other, you can either choose your changes (a.k.a.
          <quote>mine</quote>) by using the <quote>mine-full</quote>
          command (<userinput>mf</userinput>) or choose theirs by using the
          <quote>theirs-full</quote> command
          (<userinput>tf</userinput>).</para>
-->
        <para>Falls Sie entscheiden, dass Sie keine Änderungen
          zusammenführen brauchen, sondern lediglich eine der beiden
          Dateiversionen akzeptieren wollen, können Sie entweder Ihre
          Änderungen (auch <quote>meine</quote>) mit dem
          <quote>mine-full</quote>-Befehl (<userinput>mf</userinput>)
          oder die der Anderen mit dem <quote>theirs-full</quote>-Befehl
          (<userinput>tf</userinput>) auswählen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.pending">

<!--
        <title>Postponing conflict resolution</title>
-->
        <title>Aufschieben der Konfliktauflösung</title>

<!--
        <para>This may sound like an appropriate section for avoiding
          marital disagreements, but it's actually still about
          Subversion, so read on.  If you're doing an update and
          encounter a conflict that you're not prepared to review or
          resolve, you can type <userinput>p</userinput> to postpone
          resolving a conflict on a file-by-file basis when you run
          <userinput>svn update</userinput>.  If you're running an update
          and don't want to resolve any conflicts, you can pass the
          <option>- -non-interactive</option> option to <command>svn
          update</command>, and any file in conflict will be marked
          with a <computeroutput>C</computeroutput>
          automatically.</para>
-->
        <para>Das hört sich vielleicht an wie ein passender Abschnitt
          zur Vermeidung von Ehestreitigkeiten, doch es geht immer
          noch um Subversion; also lesen Sie weiter.  Falls Sie eine
          Aktualisierung vornehmen und ein Konflikt auftaucht, den Sie
          nicht begutachten oder auflösen können, ermöglicht Ihnen das
          Eingeben von <userinput>p</userinput> die Konfliktauflösung
          Datei für Datei aufzuschieben, wenn Sie <userinput>svn
          update</userinput> aufrufen. Falls Sie aktualisieren wollen,
          ohne Konflikte aufzulösen, können Sie die
          <option>--non-interactive</option>-Option an <command>svn
          update</command> übergeben, und jede Datei mit Konflikten
          wird automatisch mit einem
          <computeroutput>C</computeroutput> gekennzeichnet.</para>

<!--
        <para>The <computeroutput>C</computeroutput> stands for
          <computeroutput>c</computeroutput>onflict.  This means that
          the changes from the server overlapped with your own, and
          now you have to manually choose between them after the
          update has completed.  When you postpone a conflict
          resolution, <command>svn</command> typically does three
          things to assist you in noticing and resolving that
          conflict:</para>
-->
        <para>Das <computeroutput>C</computeroutput> bedeutet
          <computeroutput>c</computeroutput>onflict.  Das heißt, dass
          die Änderungen vom Server sich mit Ihren eigenen
          überschneiden, und Sie nach Abschluss der Aktualisierung
          manuell aus den Änderungen wählen müssen. Wenn Sie eine
          Konfliktauflösung verschieben, macht <command>svn</command>
          typischerweise drei Dinge, um Ihnen bei der
          Konfliktauflösung zu helfen:</para>

        <itemizedlist>

          <listitem>
<!--
         <para>Subversion prints a <computeroutput>C</computeroutput>
              during the update and remembers that the file is in a
              state of conflict.</para>
-->
            <para>Subversion gibt ein
              <computeroutput>C</computeroutput> während der
              Aktualisierung aus und merkt sich, dass die Datei in
              einem Konfliktzustand ist.</para>
          </listitem>

          <listitem>
<!--
            <para>If Subversion considers the file to be mergeable, it
              places <firstterm>conflict
              markers</firstterm>&mdash;special strings of text that
              delimit the <quote>sides</quote> of the
              conflict&mdash;into the file to visibly demonstrate the
              overlapping areas.  (Subversion uses the
              <literal>svn:mime-type</literal> property to decide whether a
              file is capable of contextual, line-based merging.  See
              <xref linkend="svn.advanced.props.special.mime-type"/>
              to learn more.)</para>
-->
            <para>Falls Subversion die Datei als geeignet zum
              Zusammenführen ansieht, fügt es
              <firstterm>Konfliktmarken</firstterm> &ndash; besondere
              Zeichenketten, die die Konfliktregion begrenzen &ndash;
              in die Datei ein, um die überlappenden Bereiche
              besonders hervorzuheben.  (Subversion verwendet das
              <literal>svn:mime-type</literal>-Property, um
              festzustellen, ob sich die Datei kontextuell zeilenweise
              zusammenführen lässt. Siehe <xref
              linkend="svn.advanced.props.special.mime-type"/>, um
              mehr zu erfahren.)</para>
          </listitem>

          <listitem>
<!--
            <para>For every conflicted file, Subversion places three
              extra unversioned files in your working copy:</para>
-->
            <para>Für jede Datei mit Konflikten stellt Subversion drei
              zusätzliche unversionierte Dateien in Ihre
              Arbeitskopie:</para>

            <variablelist>

              <varlistentry>
                <term><filename>filename.mine</filename></term>
                <listitem>
<!--
                  <para>This is your file as it existed in your working
                    copy before you updated your working copy&mdash;that
                    is, without conflict markers.  This file has only
                    your latest changes in it.  (If Subversion considers
                    the file to be unmergeable, the
                    <filename>.mine</filename> file isn't created, since
                    it would be identical to the working file.)</para>
-->
                  <para>Dies ist Ihre Datei aus der Arbeitskopie bevor
                    Sie aktualisierten &ndash; d.h. ohne
                    Konfliktmarken. Diese Datei beinhaltet nur Ihre
                    letzten Änderungen. (Falls Subversion diese Datei
                    als nicht-zusammenführbar erachtet, wird die
                    <filename>.mine</filename>-Datei nicht erstellt,
                    da sie identisch mit der Datei der Arbeitskopie
                    wäre.)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>OLDREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file that was the
                    <literal>BASE</literal> revision before you updated
                    your working copy.  That is, the file that you
                    checked out before you made your latest
                    edits.</para>
-->
                  <para>Dies ist die Datei, die die
                    <literal>BASE</literal>-Revision war bevor Sie
                    Ihre Arbeitskopie aktualisiert haben; also die
                    Datei, die Sie ausgecheckt hatten, bevor Sie Ihre
                    letzten Änderungen machten.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><filename>filename.r<replaceable>NEWREV</replaceable>
                      </filename></term>
                <listitem>
<!--
                  <para>This is the file that your Subversion client
                    just received from the server when you updated your
                    working copy.  This file corresponds to the
                    <literal>HEAD</literal> revision of the
                    repository.</para>
-->
                  <para>Dies ist die Datei, die Ihr Subversion-Client
                    soeben vom Server erhalten hat als Sie Ihre
                    Arbeitskopie aktualisierten. Diese Datei
                    entspricht der <literal>HEAD</literal>-Revision
                    des Repositorys.</para>
                </listitem>
              </varlistentry>

            </variablelist>

<!--
            <para>Here <replaceable>OLDREV</replaceable> is the revision number
              of the file in your <filename>.svn</filename> directory,
              and <replaceable>NEWREV</replaceable> is the revision number of
              the repository <literal>HEAD</literal>.</para>
-->
            <para>Hierbei ist <replaceable>OLDREV</replaceable> die
              Revisionsnummer der Datei in Ihrem
              Verzeichnis <filename>.svn</filename>, und
              <replaceable>NEWREV</replaceable> ist die
              Revisionsnummer von <literal>HEAD</literal> im
              Repository.</para>
          </listitem>

        </itemizedlist>

<!--
        <para>For example, Sally makes changes to the file
          <filename>sandwich.txt</filename> in the repository.  Harry has
          just changed the file in his working copy and checked it in.
          Sally updates her working copy before checking in and she gets
          a conflict, which she postpones:</para>
-->
        <para>Beispielsweise ändert Sally die Datei
          <filename>sandwich.txt</filename> aus dem Repository. Harry
          hat gerade diese Datei in seiner Arbeitskopie geändert und
          übergeben. Sally aktualisiert Ihre Arbeitskopie vor dem
          übergeben und bekommt einen Konflikt, den sie
          verschiebt:</para>

<!--
        <screen>
$ svn update
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h)elp for more options : p
C  sandwich.txt
Updated to revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>
-->
        <screen>
$ svn update
Konflikt in »sandwich.txt« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
        (h) Hilfe für weitere Optionen: p
C  sandwich.txt
Aktualisiert zu Revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>

<!--
        <para>At this point, Subversion will <emphasis>not</emphasis>
          allow Sally to commit the file
          <filename>sandwich.txt</filename> until the three temporary
          files are removed:</para>
-->
        <para>An dieser Stelle erlaubt Subversion Sally
          <emphasis>nicht</emphasis>, die Datei
          <filename>sandwich.txt</filename> an das Repository zu
          übergeben, solange die drei temporären Dateien nicht
          entfernt werden:</para>

<!--
        <screen>
$ svn commit -m "Add a few more things"
svn: Commit failed (details follow):
svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</screen>
-->
        <screen>
$ svn commit -m "Add a few more things"
svn: Übertragen schlug fehl (Details folgen):
svn: Übertragung abgebrochen: »/home/sally/svn-work/sandwich.txt« bleibt im Konflikt
</screen>

<!--
        <para>If you've postponed a conflict, you need to resolve the
          conflict before Subversion will allow you to commit your
          changes.  You'll do this with the <command>svn
          resolve</command> command and one of several arguments to
          the <option>- -accept</option> option.</para>
-->
        <para>Falls Sie eine Konfliktauflösung aufgeschoben haben,
          müssen Sie den Konflikt auflösen, bevor Ihnen Subversion
          erlaubt, Ihre Änderungen in das Repository einzustellen. Sie
          werden dafür den <command>svn resolve</command>-Befehl mit
          einem von mehreren Argumenten für die
          <option>--accept</option>-Option aufrufen.</para>

<!--
        <para>If you want to choose the version of the file that you
          last checked out before making your edits, choose
          the <replaceable>base</replaceable> argument.</para>
-->
        <para>Falls Sie die Dateiversion vor Ihren Änderungen haben
          möchten, wählen Sie das
          <replaceable>base</replaceable>-Argument.</para>

<!--
        <para>If you want to choose the version that contains only
          your edits, choose the <replaceable>mine-full</replaceable>
          argument.</para>
-->
        <para>Falls Sie die Version möchten, die nur Ihre Änderungen
          enthält, wählen Sie das
          <replaceable>mine-full</replaceable>-Argument.</para>

<!--
        <para>If you want to choose the version that your most recent
          update pulled from the server (and thus discarding your
          edits entirely), choose
          the <replaceable>theirs-full</replaceable> argument.</para>
-->
        <para>Falls Sie die Version möchten, die Ihre letzte
          Aktualisierung vom Server gezogen hat (und somit Ihre
          Änderungen vollständig verwerfen wollen), wählen Sie das
          Argument <replaceable>theirs-full</replaceable>.</para>

<!--
        <para>However, if you want to pick and choose from your
          changes and the changes that your update fetched from the
          server, merge the conflicted text <quote>by hand</quote> (by
          examining and editing the conflict markers within the file)
          and then choose the <replaceable>working</replaceable>
          argument.</para>
-->
        <para>Wenn Sie jedoch frei aus Ihren Änderungen und den
          Änderungen vom Server wählen möchten, führen Sie den
          konfliktbehafteten Text <quote>händisch</quote> zusammen
          (indem Sie die Konfliktmarken in der Datei begutachten und
          editieren) und wählen das
          <replaceable>working</replaceable>-Argument.</para>

<!--
        <para><command>svn resolve</command> removes the three
          temporary files and accepts the version of the file that you
          specified with the <option>- -accept</option> option, and
          Subversion no longer considers the file to be in a state of
          conflict:</para>
-->
        <para><command>svn resolve</command> entfernt die drei
          temporären Dateien und akzeptiert die Version, die Sie mit
          der <option>--accept</option>-Option angeben. Subversion
          betrachtet die Datei nun als nicht mehr
          konfliktbehaftet:</para>

<!--
        <screen>
$ svn resolve - -accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>
-->
        <screen>
$ svn resolve --accept working sandwich.txt
Konflikt von »sandwich.txt« aufgelöst
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.byhand">
<!--
        <title>Merging conflicts by hand</title>
-->
        <title>Manuelle Konfliktauflösung</title>

<!--
        <para>Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
-->
        <para>Das manuelle Auflösen von Konflikten kann ganz
          schön einschüchternd sein, wenn Sie es das erste Mal
          versuchen; jedoch kann es mit etwas Übung so leicht werden,
          wie vom Fahrrad zu fallen.</para>

<!--
        <para>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflict.
          First, let's take a look at the file:</para>
-->
        <para>Hier ist ein Beispiel. Aufgrund einer schlechten Absprache
          bearbeiten Sie und Ihre Mitarbeiterin Sally gleichzeitig die
          Datei <filename>sandwich.txt</filename>.  Sally übergibt
          ihre Änderungen an das Repository, und sobald Sie versuchen,
          Ihre Arbeitskopie zu aktualisieren, erhalten Sie einen
          Konflikt und müssen <filename>sandwich.txt</filename>
          bearbeiten, um den Konflikt aufzulösen. Zunächst wollen wir
          uns die Datei einmal ansehen:</para>

        <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>

<!--
        <para>The strings of less-than signs, equals signs, and
          greater-than signs are conflict markers and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
-->
        <para>Die Zeichenketten aus Kleiner-als-Zeichen,
          Gleichheitszeichen und Größer-als-Zeichen sind
          Konfliktmarken und gehören nicht zu den eigentlichen Daten,
          die in Konflikt stehen. Im Allgemeinen werden Sie
          sicherstellen wollen, dass die Konflikte aus der Datei
          entfernt werden, bevor sie das nächste Mal eine Übergabe
          durchführen. Der Text zwischen den ersten beiden Marken
          besteht aus den Änderungen, die Sie im Konfliktbereich
          vorgenommen haben:</para>

        <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>

<!--
        <para>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
-->
        <para>Der Text zwischen der zweiten und der dritten Marke ist
          der Text aus Sallys Übergabe:</para>

        <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>

<!--
        <para>Usually you won't want to just delete the conflict
          markers and Sally's changes&mdash;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  This is where you pick up the phone or walk
          across the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.
          <footnote>
            <para>And if you ask them for it, they may very well ride
              you out of town on a rail.</para>
          </footnote>
          Once you've agreed on the changes you will check in, edit
          your file and remove the conflict markers:</para>
-->
        <para>Für gewöhnlich werden Sie nicht einfach die
          Konfliktmarken mitsamt der Änderungen von Sally löschen
          wollen &ndash; sie wird furchtbar überrascht sein, wenn das
          Sandwich kommt und nicht das drauf ist, was sie wollte. Hier
          ist der Zeitpunkt gekommen, zu dem Sie zum Telefon greifen
          oder durch das Büro gehen und Sally erklären, dass man in
          einem italienischen Delikatessenladen kein Sauerkraut bekommt.
          <footnote>
            <para>Und wenn Sie danach fragen, wird man Sie
              wahrscheinlich auf einer Schiene aus der Stadt tragen.</para>
          </footnote>
          Sobald Sie sich über die zu übergebenden\ Änderungen einig
          sind, können Sie Ihre Datei bearbeiten und die
          Konfliktmarken entfernen:</para>

        <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>

<!--
        <para>Now use <command>svn resolve</command>, and you're
          ready to commit your changes:</para>
-->
        <para>Verwenden Sie jetzt <command>svn resolve</command>, und
          Sie sind bereit, Ihre Änderungen an das Repository zu
          übergeben:</para>

<!--
        <screen>
$ svn resolve - -accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</screen>
-->
        <screen>
$ svn resolve --accept working sandwich.txt
Konflikt von »sandwich.txt« aufgelöst
$ svn commit -m "Mach weiter mit meinem Sandwich, vergiss Sallys Änderungen."
</screen>

<!--
        <para>Note that <command>svn resolve</command>, unlike most of
          the other commands we deal with in this chapter, requires
          that you explicitly list any filenames that you wish to
          resolve.  In any case, you want to be careful and use
          <command>svn resolve</command> only when you're certain that
          you've fixed the conflict in your file&mdash;once the
          temporary files are removed, Subversion will let you commit
          the file even if it still contains conflict markers.</para>
-->
        <para>Beachten Sie, dass <command>svn resolve</command>,
          anders als die meisten anderen Befehle, die wir in diesem
          Kapitel behandeln, erwartet, dass Sie ausdrücklich alle
          Dateien aufzählen, deren Konflikt Sie beseitigt haben. Auf
          alle Fälle sollten Sie sorgfältig vorgehen und
          <command>svn resolve</command> nur verwenden, falls Sie
          sicher sind, den Konflikt in Ihrer Datei beseitigt zu haben
          &ndash; sobald die temporären Dateien entfernt sind, lässt
          Subversion zu, dass Sie die Datei in das Repository stellen,
          selbst wenn sie noch Konfliktmarken enthält.</para>

<!--
        <para>If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copy&mdash;including your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files.</para>
-->
        <para>Falls Sie mal bei der Bearbeitung der konfliktbehafteten
          Datei verwirrt sein sollten, können Sie jederzeit in den
          drei Dateien nachsehen, die Subversion für Sie in der
          Arbeitskopie bereitstellt &ndash; dazu gehört auch Ihre
          Datei vor der Aktualisierung. Sie können sogar ein
          Zusammenführungs-Werkzeug eines Drittanbieters verwenden, um diese drei
          Dateien zu untersuchen.</para>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.theirsfull">
<!--
        <title>Discarding your changes in favor of a newly fetched revision</title>
-->
        <title>Verwerfen Ihrer Änderungen zugunsten einer aktualisierten Revision aus dem Repository</title>
  
<!--
        <para>If you get a conflict and decide that you want to throw
          out your changes, you can run <userinput>svn resolve - -accept
          theirs-full <replaceable>CONFLICTED-PATH</replaceable></userinput> and Subversion will discard your edits
          and remove the temporary files:</para>
-->
        <para>Falls Sie einen Konflikt erhalten und entscheiden, dass
          Sie Ihre Änderungen verwerfen wollen, können Sie
          <userinput>svn resolve --accept theirs-full
          <replaceable>CONFLICTED-PATH</replaceable></userinput>
          aufrufen, und Subversion wird Ihre Änderungen ignorieren und
          die temporären Dateien entfernen:</para>

<!--
       <screen>
$ svn update
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options: p
C    sandwich.txt
Updated to revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve - -accept theirs-full sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>
-->
       <screen>
$ svn update
Konflikt in »sandwich.txt« entdeckt.
Auswahl: (p) zurückstellen, (df) voller Diff, (e) editieren,
        (h) Hilfe für weitere Optionen: p
C    sandwich.txt
Aktualisiert zu Revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Konflikt von »sandwich.txt« aufgelöst
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.cycle.resolve.revert">
<!--
        <title>Punting: Using svn revert</title>
-->
        <title>Die Verwendung von svn revert</title>

<!--
        <para>If you decide that you want to throw out your changes
          and start your edits again (whether this occurs after a
          conflict or anytime), just revert your changes:</para>
-->
        <para>Falls Sie sich entscheiden, Ihre Änderungen zu verwerfen
          und erneut mit der Bearbeitung zu beginnen (ob nach einem
          Konflikt oder sonst zu jeder Zeit), machen Sie einfach Ihre
          Änderungen rückgängig:</para>

<!--
        <screen>
$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
</screen>
-->
        <screen>
$ svn revert sandwich.txt
Rückgängig gemacht: »sandwich.txt«
$ ls sandwich.*
sandwich.txt
</screen>

<!--
        <para>Note that when you revert a conflicted file, you don't
          have to use <command>svn resolve</command>.</para>
-->
        <para>Beachten Sie, dass Sie beim Rückgängigmachen einer
          konfliktbehafteten Datei nicht <command>svn
          resolve</command> zu verwenden brauchen.</para>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.cycle.commit">
<!--
      <title>Commit Your Changes</title>
-->
      <title>Übergeben Ihrer Änderungen</title>

<!--
      <para>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
-->
      <para>Endlich!  Sie haben die Bearbeitung abgeschlossen, Sie
        haben alle Änderungen vom Server eingearbeitet, und Sie sind
        bereit, Ihre Änderungen an das Repository zu übergeben.</para>

<!--
      <para>The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a <firstterm>log message</firstterm>
        describing your change.  Your log message will be attached to
        the new revision you create.  If your log message is brief,
        you may wish to supply it on the command line using the
        <option>- -message</option> (or <option>-m</option>)
        option:</para>
-->
      <para>Der Befehl <command>svn commit</command> schickt all Ihre
        Änderungen zum Repository. Wenn Sie eine Änderung übergeben,
        müssen Sie einen <firstterm>Protokolleintrag</firstterm>
        erstellen, der die Änderung beschreibt. Dieser Eintrag wird mit
        der von Ihnen erzeugten neuen Revision verknüpft. Wenn Ihr
        Eintrag kurz ist, können Sie ihn mit der Option
        <option>--message</option> (oder <option>-m</option>) in der
        Kommandozeile angeben:</para>

<!--
      <screen>
$ svn commit -m "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>
-->
      <screen>
$ svn commit -m "Anzahl Käsescheiben korrigiert."
Sende          sandwich.txt
Übertrage Daten .
Revision 3 übertragen.
</screen>

<!--
      <para>However, if you've been composing your log message as you
        work, you may want to tell Subversion to get the message from
        a file by passing the filename with the
        <option>- -file</option> (<option>-F</option>) option:</para>
-->
      <para>Falls Sie jedoch Ihren Protokolleintrag während der Arbeit
        erstellen möchten, können Sie Subversion mitteilen, sich den
        Eintrag aus einer Datei zu holen, indem Sie den Dateinamen mit
        der Option <option>--file</option> (<option>-F</option>)
        angeben:</para>

<!--
      <screen>
$ svn commit -F logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</screen>
-->
      <screen>
$ svn commit -F logmsg
Sende          sandwich.txt
Übertrage Daten .
Revision 4 übertragen.
</screen>

<!--
      <para>If you fail to specify either the
        <option>- -message</option> or <option>- -file</option> option,
        Subversion will automatically launch your favorite editor
        (see the information on <literal>editor-cmd</literal> in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for composing a log
        message.</para>
-->
      <para>Sollten Sie vergessen, entweder die Option
        <option>--message</option> oder die
        <option>--file</option>-Option anzugeben, startet Subversion
        automatisch Ihren Lieblingseditor (siehe die Information zu
        <literal>editor-cmd</literal> in <xref
        linkend="svn.advanced.confarea.opts.config"/>), damit Sie
        einen Protokolleintrag erstellen können.</para>

      <tip>
<!--
        <para>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete the text, save
          again, and then abort:</para>
-->
        <para>Wenn Sie gerade in Ihrem Editor einen Eintrag schreiben
          und sich entschließen, die Übergabe abzubrechen, können Sie
          einfach Ihren Editor beenden, ohne die Änderungen zu
          sichern. Falls Sie den Eintrag bereits gesichert haben
          sollten, löschen Sie einfach den Text, sichern Sie erneut
          und brechen dann ab:</para>

<!--
        <screen>
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit
a
$
</screen>
-->
        <screen>
$ svn commit

Logmeldung unverändert oder nicht angegeben
A)bbrechen, Weitermac)hen, E)ditieren:
a
$
</screen>
      </tip>

<!--
      <para>The repository doesn't know or care whether your changes make
        any sense as a whole; it checks only to make sure nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files are out of date:</para>
-->
      <para>Das Repository weiß nicht, ob Ihre Änderung im Ganzen
        einen Sinn ergeben, es ist ihm auch egal; es überprüft
        lediglich, ob nicht irgendjemand anderes irgendeine derselben Dateien
        geändert hat wie Sie, als Sie mal weggeschaut haben. Falls
        jemand das gemacht <emphasis>hat</emphasis>, wird die gesamte
        Übergabe mit einer Meldung fehlschlagen, dass eine oder
        mehrere Ihrer Dateien nicht mehr aktuell sind:</para>

<!--
      <screen>
$ svn commit -m "Add another rule"
Sending        rules.txt
svn: Commit failed (details follow):
svn: File '/sandwich.txt' is out of date
&hellip;
</screen>
-->
      <screen>
$ svn commit -m "Noch eine Regel hinzufügen"
Sende          rules.txt
svn: Übertragen schlug fehl (Details folgen):
svn: Datei »/rules.txt« ist veraltet
&hellip;
</screen>

<!--
      <para>(The exact wording of this error message depends on the
        network protocol and server you're using, but the idea is the
        same in all cases.)</para>
-->
      <para>(Der genaue Wortlaut dieser Fehlermeldung hängt vom
        verwendeten Netzwerkprotokoll und vom Server ab, doch die
        Bedeutung ist in allen Fällen gleich.)</para>

<!--
      <para>At this point, you need to run <userinput>svn
        update</userinput>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
-->
      <para>Zu diesem Zeitpunkt müssen Sie <userinput>svn
        update</userinput> aufrufen, sich um eventuelle
        Zusammenführungen oder Konflikte kümmern und die Übergabe
        erneut versuchen.</para>

<!--
      <para>That covers the basic work cycle for using Subversion.
        Subversion offers many other features that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we've discussed so far in this chapter.  We will,
        however, cover a few more commands that you'll use fairly
        often.</para>
-->
      <para>Das deckt den grundlegenden Arbeitszyklus für die
        Verwendung von Subversion ab. Subversion bietet viele andere
        Möglichkeiten, die Sie benutzen können, um Ihr Repository und
        Ihre Arbeitskopie zu verwalten, doch der größte Teil Ihrer
        täglichen Arbeit mit Subversion wird lediglich die in diesem
        Kapitel behandelten Befehle berühren. Wir werden jedoch noch
        ein paar mehr Befehle behandeln, die Sie ziemlich oft
        verwenden werden.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.history">
<!--
    <title>Examining History</title>
-->
    <title>Geschichtsforschung</title>

<!--
    <para>Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to <emphasis>peer into</emphasis> the past instead of
      <emphasis>going into</emphasis> it.</para>
-->
    <para>Ihr Subversion-Repository ist wie eine Zeitmaschine. Es legt
      einen Eintrag für jede jemals übergebene Änderung an und erlaubt
      Ihnen, diese Geschichte durch die Untersuchung sowohl ehemaliger
      Datei- und Verzeichnisversionen als auch der begleitenden
      Metadaten zu erforschen. Mit einem einzigen Subversion-Befehl
      können Sie das Repository genauso auschecken (oder eine
      bestehende Arbeitskopie wiederherstellen), wie es zu einem
      beliebigen Zeitpunkt oder einer Revisionsnummer in der
      Vergangenheit war. Allerdings möchten Sie manchmal nur in die
      Vergangenheit <emphasis>spähen</emphasis> anstatt dorthin zu
      <emphasis>gehen</emphasis>.</para>

<!--
    <para>Several commands can provide you with
      historical data from the repository:</para>
-->
    <para>Es gibt mehrere Befehle, die Sie mit historischen Daten aus dem
      Repository versorgen können:</para>

      <variablelist>

        <varlistentry>
          <term><command>svn log</command></term>
          <listitem>
<!--
            <para>Shows you broad information: log messages with date
              and author information attached to revisions and which
              paths changed in each revision</para>
-->
            <para>Zeigt Ihnen grobe Informationen: Mit Revisionen
              verknüpfte Protokolleinträge zu Datum
              und Autor und welche Pfade sich in jeder Revision
              geändert haben.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn diff</command></term>
          <listitem>
<!--
            <para>Shows line-level details of a particular change</para>
-->
            <para>Zeigt die Details einer bestimmten Änderung auf
              Zeilenebene</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn cat</command></term>
          <listitem>
<!--
            <para>Retrieves a file as it existed in a particular
              revision number and displays it on your screen</para>
-->
            <para>Holt eine Datei hervor wie sie mit einer bestimmten
              Revisionsnummer einmal ausgesehen hat und zeigt sie auf
              dem Bildschirm an</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>svn list</command></term>
          <listitem>
<!--
            <para>Displays the files in a directory for any given
              revision</para>
-->
            <para>Zeigt die Dateien in einem Verzeichnis für eine
              gewünschte Revision an</para>
          </listitem>
        </varlistentry>

      </variablelist>


    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.log">
<!--
      <title>Generating a List of Historical Changes</title>
-->
      <title>Erzeugung einer Liste der Änderungsgeschichte</title>

<!--
      <para>To find information about the history of a file or
        directory, use the <command>svn log</command>
        command. <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision,
        and&mdash;if it was provided&mdash;the log message that accompanied
        the commit:</para>
-->
      <para>Um Informationen über den Werdegang einer Datei oder eines
        Verzeichnisses zu bekommen, benutzen Sie den Befehl
        <command>svn log</command>. <command>svn log</command>
        versorgt Sie mit einem Eintrag, der Auskunft darüber gibt, wer
        Änderungen an einer Datei oder einem Verzeichnis gemacht hat,
        in welcher Revision die Änderung stattfand, zu welcher Zeit und
        welchem Datum die Revision entstand sowie &ndash; falls
        verfügbar &ndash; dem die Übergabe begleitenden
        Protokolleintrag:</para>

<!--
      <screen>
$ svn log
 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

Added include lines and corrected # of cheese slices.
 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

Added main() methods.
 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Initial import
 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
</screen>
-->
      <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

include-Zeilen hinzugefügt und Anzahl der Käsescheiben korrigiert.
------------------------------------------------------------------------
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

main()-Methoden hinzugefügt.
------------------------------------------------------------------------
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Erstimport
------------------------------------------------------------------------
</screen>
<!--
      <para>Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order or just a single revision, pass the
        <option>- -revision</option> (<option>-r</option>)
        option:</para>
-->
      <para>Beachten Sie, dass die Protokolleinträge standardmäßig in
        <emphasis>umgekehrter zeitlicher Reihenfolge</emphasis>
        ausgegeben werden. Falls Sie eine andere Folge von Revisionen
        in einer bestimmten Anordnung oder nur eine einzige Revision
        sehen möchten, übergeben Sie die Option
        <option>--revision</option> (<option>-r</option>):</para>

<!--
      <screen>
$ svn log -r 5:19    # shows logs 5 through 19 in chronological order

$ svn log -r 19:5    # shows logs 5 through 19 in reverse order

$ svn log -r 8       # shows log for revision 8
</screen>
-->
      <screen>
$ svn log -r 5:19    # zeigt Protokolleintrag 5 bis 19 in chronologischer Reihenfolge

$ svn log -r 19:5    # zeigt Protokolleintrag 5 bis 19 in umgekehrter Reihenfolge

$ svn log -r 8       # zeigt Protokolleintrag für Revision 8
</screen>

<!--
      <para>You can also examine the log history of a single file or
        directory.  For example:</para>
-->
      <para>Sie können sich auch die Protokollgeschichte einer
        einzigen Datei oder eines einzigen Verzeichnisses ansehen. Zum
        Beispiel:</para>

      <screen>
$ svn log foo.c
&hellip;
$ svn log http://foo.com/svn/trunk/code/foo.c
&hellip;
</screen>

<!--
      <para>These will display log messages <emphasis>only</emphasis>
        for those revisions in which the working file (or URL)
        changed.</para>
-->
      <para>Diese Befehle zeigen <emphasis>nur</emphasis>
        Protokolleinträge für die Revisionen, in der sich die
        Arbeitsdatei (oder URL) geändert hat.</para>

      <sidebar>

<!--
        <title>Why Does svn log Not Show Me What I
          Just Committed?</title>
-->
        <title>Warum zeigt mir svn log nicht, was ich gerade übergeben
	  habe?</title>

<!--
        <para>If you make a commit and immediately type <userinput>svn
          log</userinput> with no arguments, you may notice that your
          most recent commit doesn't show up in the list of log
          messages.  This is due to a combination of the behavior of
          <command>svn commit</command> and the default behavior of
          <command>svn log</command>.  First, when you commit changes
          to the repository, <command>svn</command> bumps only the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See
          <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/>
          for an explanation of why).  <command>svn log</command> then
          defaults to fetching the history of the directory at its
          current revision, and thus you don't see the newly committed
          changes.  The solution here is to either update your working
          copy or explicitly provide a revision number to <command>svn
          log</command> by using the <option>- -revision</option>
          (<option>-r</option>) option.</para>
-->
        <para>Wenn Sie Ihre Änderungen an das Repository übergeben und
          sofort <userinput>svn log</userinput> ohne Argumente
          eingeben, wird Ihnen vielleicht auffallen, dass Ihre letzte
          Änderung nicht in der Liste der Protokolleinträge
          auftaucht. Das liegt an der Kombination des Verhaltens von
          <command>svn commit</command> und dem Standardverhalten von
          <command>svn log</command>. Wenn Sie Änderungen an das
          Repository übergeben, erhöht <command>svn</command> zunächst
          nur die Revision der Dateien (und Verzeichnisse) die es
          übernimmt, so dass das Elternverzeichnis normalerweise auf
          der älteren Revision verbleibt (siehe <xref
          linkend="svn.basic.in-action.mixedrevs.update-commit"/> für
          die Erklärung, warum das so ist). <command>svn log</command>
          holt dann standardmäßig die Geschichte des Verzeichnisses in
          der gegenwärtigen Revision, und so kommt es, dass Sie die
          neu übergebenen Änderungen nicht sehen. Die Lösung besteht
          entweder in einer Aktualisierung Ihrer Arbeitskopie oder
          indem Sie dem Befehl <command>svn log</command> ausdrücklich
          mit der Option <option>--revision</option>
          (<option>-r</option>) eine Revisionsnummer mitgeben.</para>

      </sidebar>

<!--
      <para>If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>- -verbose</option> (<option>-v</option>) option.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem. So, in verbose mode, <command>svn
        log</command> will include a list of changed paths in a
        revision in its output:</para>
-->
      <para>Wenn Sie noch mehr Informationen über eine Datei oder ein
        Verzeichnis benötigen, können Sie <command>svn log</command>
        auch die Option <option>--verbose</option>
        (<option>-v</option>) mitgeben. Weil Ihnen Subversion erlaubt,
        Dateien und Verzeichnisse zu kopieren und zu verschieben, ist
        es wichtig, Pfadänderungen im Dateisystem
        mitzuverfolgen. Daher beinhaltet bei dieser Option die Ausgabe
        von <command>svn log</command> eine Liste veränderter Pfade in
        einer Revision:</para>

<!--
      <screen>
$ svn log -r 8 -v
 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
Changed paths:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README

Frozzled the sub-space winch.

 - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  - -  -
</screen>
-->
      <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
Geänderte Pfade:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README

Die Unterraumwinde gefrozzelt.

------------------------------------------------------------------------
</screen>

<!--
      <para>
        <command>svn log</command> also takes a <option>- -quiet</option>
        (<option>-q</option>) option, which suppresses the body of the
        log message.  When combined with <option>- -verbose</option>, it
        gives just the names of the changed files.</para>
-->
      <para>
        <command>svn log</command> akzeptiert ebenfalls die Option
        <option>--quiet</option> (<option>-q</option>), die den
        Protokolleintrag unterdrückt.  Zusammen mit der Option
        <option>--verbose</option> zeigt es nur die Namen der
        geänderten Dateien an.</para>

      <sidebar>
<!--
        <title>Why Does svn log Give Me an Empty
          Response?</title>
-->
        <title>Warum gibt mir svn log eine leere Antwort?</title>

<!--
        <para>After working with Subversion for a bit, most users will
          come across something like this:</para>
-->
        <para>Nach ein wenig Arbeit mit Subversion werden die meisten
          Benutzer so etwas begegnen:</para>

        <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>

<!--
        <para>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the topmost URL of your repository, as in <userinput>svn log -r 2
          http://svn.collab.net/repos/svn</userinput>.</para>
-->
        <para>Auf den ersten Blick sieht es aus wie ein Fehler. Aber
          seien Sie daran erinnert, dass, während Revisionen über das
          gesamte Repository zählen, <command>svn log</command> auf
          einem Pfad im Repository arbeitet. Wenn Sie keinen Pfad
          angeben, verwendet Subversion das aktuelle
          Arbeitsverzeichnis als Standardargument.  Deshalb zeigt Subversion
          Ihnen einen leeren Protokolleintrag, falls Sie in einem
          Unterverzeichnis Ihrer Arbeitskopie arbeiten und versuchen,
          sich den Protokolleintrag einer Revision anzusehen, in dem
          sich weder dieses Verzeichnis noch irgendein Unterverzeichnis
          darin geändert hat. Falls Sie sehen wollen, was sich in der
          Revision geändert hat, versuchen Sie <command>svn
          log</command> direkt auf den obersten URL Ihres Repositorys
          zeigen zu lassen, wie in <userinput>svn log -r 2
          http://svn.collab.net/repos/svn</userinput>.</para>

      </sidebar>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.diff">
<!--
      <title>Examining the Details of Historical Changes</title>
-->
      <title>Detaillierte Untersuchung der Änderungsgeschichte</title>

<!--
      <para>We've already seen <command>svn diff</command>
        before&mdash;it displays file differences in unified diff
        format; we used it to show the local modifications made to
        our working copy before committing to the repository.</para>
-->
      <para><command>svn diff</command> ist uns bereits begegnet
        &ndash; es zeigt Dateiunterschiede im unified-diff-Format; wir
        verwendeten es, um die lokalen Änderungen an unserer
        Arbeitskopie anzuzeigen, bevor wir sie dem Repository
        übergaben.</para>

<!--
      <para>In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
-->
      <para>Tatsächlich stellt sich heraus, dass es
        <emphasis>drei</emphasis> verschiedene
        Verwendungsmöglichkeiten für <command>svn diff</command>
        gibt:</para>

      <itemizedlist>

        <listitem>
<!--
          <para>Examining local changes</para>
-->
          <para>zum Untersuchen lokaler Änderungen</para>
        </listitem>

        <listitem>
<!--
          <para>Comparing your working copy to the repository</para>
-->
	  <para>zum Vergleichen Ihrer Arbeitskopie mit dem
	    Repository</para>
        </listitem>

        <listitem>
<!--
          <para>Comparing one repository to another</para>
-->
          <para>zum Vergleichen von Revisionen im Repository</para>
        </listitem>

      </itemizedlist>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.local">
<!--
        <title>Examining local changes</title>
-->
        <title>Untersuchen lokaler Änderungen</title>

<!--
        <para>As we've seen, invoking <userinput>svn diff</userinput> with
          no options will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>
-->
        <para>Wie wir gesehen haben, vergleicht der Aufruf von
          <userinput>svn diff</userinput> ohne Optionen die
          Arbeitsdateien mit den zwischengespeicherten
          <quote>ursprünglichen</quote> Kopien im
          <filename>.svn</filename>-Bereich:</para>

        <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt   (revision 3)
+++ rules.txt   (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.wcrepos">
<!--
        <title>Comparing working copy to repository</title>
-->
        <title>Vergleichen der Arbeitskopie mit dem Repository</title>

<!--
        <para>If a single <option>- -revision</option>
          (<option>-r</option>) number is passed, your
          working copy is compared to the specified revision in the
          repository:</para>
-->
        <para>Wird eine einzelne Nummer mit <option>--revision</option>
          (<option>-r</option>) übergeben, wird die Arbeitskopie mit
          der angegebenen Revision im Repository verglichen:</para>

        <screen>
$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt   (revision 3)
+++ rules.txt   (working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.diff.reposrepos">
<!--
        <title>Comparing repository to repository</title>
-->
        <title>Vergleichen von Repository mit Repository</title>

<!--
        <para>If two revision numbers, separated by a colon, are
          passed via <option>- -revision</option>
          (<option>-r</option>), the two revisions are directly
          compared:</para>
-->
        <para>Werden zwei Revisionsnummern durch einen Doppelpunkt
          getrennt mit <option>--revision</option>
          (<option>-r</option>) übergeben, werden die beiden
          Revisionen direkt miteinander verglichen:</para>

        <screen>
$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt   (revision 2)
+++ rules.txt   (revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>

<!--
        <para>A more convenient way of comparing one revision to the
          previous revision is to use the <option>- -change</option>
          (<option>-c</option>) option:</para>
-->
        <para>Eine bequemere Möglichkeit, eine Revision mit der
          Vorgänger-Revision zu vergleichen, bietet die Verwendung der
          Option <option>--change</option>
          (<option>-c</option>):</para>

        <screen>
$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt   (revision 2)
+++ rules.txt   (revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>

<!--
        <para>Lastly, you can compare repository revisions even when
          you don't have a working copy on your local machine, just by
          including the appropriate URL on the command line:</para>
-->
        <para>Zu guter Letzt können Sie Revisionen im Repository auch
          dann vergleichen, falls Sie gar keine Arbeitskopie auf Ihrem
          lokalen Rechner haben, indem Sie einfach den entsprechenden
          URL auf der Kommandozeile angeben:</para>

        <screen>
$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
&hellip;
$
</screen>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.browsing">
<!--
      <title>Browsing the Repository</title>
-->
      <title>Stöbern im Repository</title>

<!--
      <para>Using <command>svn cat</command> and <command>svn
        list</command>, you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don't even need a working copy to
        use either one.</para>
-->
      <para>Wenn Sie <command>svn cat</command> und <command>svn
        list</command> verwenden, können Sie sich verschiedene
        Revisionen von Dateien und Verzeichnissen ansehen, ohne die
        Revision Ihrer Arbeitskopie ändern zu müssen. Tatsächlich
        brauchen Sie dafür nicht einmal eine Arbeitskopie.</para>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.cat">
         <title>svn cat</title>

<!--
        <para>If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
          <command>svn cat</command>:</para>
-->
        <para>Falls Sie eine frühere Version einer Datei untersuchen
          möchten und nicht notwendigerweise die Unterschiede zwischen
          zwei Dateien, können Sie <command>svn cat</command>
          verwenden:</para>

        <screen>
$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>

<!--
        <para>You can also redirect the output directly into a
          file:</para>
-->
        <para>Sie können die Ausgabe auch direkt in eine Datei
          umleiten:</para>

        <screen>
$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
</screen>

      </sect3>

      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <sect3 id="svn.tour.history.browsing.list">
        <title>svn list</title>

<!--
        <para>The <command>svn list</command> command shows you what
          files are in a repository directory without actually
          downloading the files to your local machine:</para>
-->
        <para>Der Befehl <command>svn list</command> zeigt Ihnen,
          welche Dateien sich in einem Repository-Verzeichnis
          befinden, ohne die Dateien auf Ihren lokalen Rechner
          herunterladen zu müssen:</para>

        <screen>
$ svn list http://svn.collab.net/repos/svn
README
branches/
clients/
tags/
trunk/
</screen>

<!--
        <para>If you want a more detailed listing, pass the
          <option>- -verbose</option> (<option>-v</option>) flag to get
          output like this:</para>
-->
        <para>Falls Sie eine detailliertere Auflistung wünschen,
          übergeben Sie die Option <option>--verbose</option>
          (<option>-v</option>), um eine Ausgabe ähnlich der folgenden
          zu bekommen:</para>

        <screen>
$ svn list -v http://svn.collab.net/repos/svn
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  21282 sally                 Aug 27 09:41 developer-resources/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
</screen>

<!--
        <para>The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the date it was last modified, and the item's
          name.</para>
-->
        <para>Die Spalten zeigen Ihnen die Revision, in der die Datei
          zuletzt geändert wurde, den Benutzer, der sie änderte, die
          Größe, falls es sich um eine Datei handelt, sowie den Namen
          des Objektes.</para>

        <warning>
<!--
          <para>The <userinput>svn list</userinput> command with no arguments
          defaults to the <emphasis>repository URL</emphasis> of the
          current working directory, <emphasis>not</emphasis> the
          local working copy directory.  After all, if you want a
          listing of your local directory, you could use just plain
          <command>ls</command> (or any reasonable non-Unixy
          equivalent).</para>
-->
          <para>Der Befehl <userinput>svn list</userinput> ohne
          Argumente verwendet standardmäßig den
          <emphasis>Repository-URL</emphasis> des aktuellen
          Arbeitsverzeichnisses und <emphasis>nicht</emphasis> das
          Verzeichnis der lokalen Arbeitskopie. Schließlich können
          Sie, falls Sie eine Auflistung des lokalen Verzeichnisses
          möchten, das einfache <command>ls</command> (oder irgendein
          vernünftiges nicht-unixartiges Äquivalent) benutzen.</para>
        </warning>

      </sect3>

    </sect2>

    <!-- =============================================================== -->
    <sect2 id="svn.tour.history.snapshots">

<!--
      <title>Fetching Older Repository Snapshots</title>
-->
      <title>Bereitstellung älterer Repository-Schnappschüsse</title>

<!--
      <para>In addition to all of the previous commands, you can use
        <command>svn update</command> and <command>svn
        checkout</command> with the <option>- -revision</option> option
        to take an entire working copy <quote>back in time</quote>:
        <footnote>
          <para>See?  We told you that Subversion was a time machine.</para>
        </footnote>
        </para>
-->
      <para>Zusätzlich zu den obigen Befehlen können Sie <command>svn
        update</command> und <command>svn checkout</command> mit der
        Option <option>--revision</option> verwenden, um eine
        vollständige Arbeitskopie <quote>zeitlich
        zurückzusetzen</quote>:
        <footnote>
          <para>Sehen Sie? Wir haben Ihnen gesagt, dass Subversion
            eine Zeitmaschine sei.</para>
        </footnote>
        </para>

<!--
      <screen>
$ svn checkout -r 1729 # Checks out a new working copy at r1729
&hellip;
$ svn update -r 1729 # Updates an existing working copy to r1729
&hellip;
</screen>
-->
      <screen>
$ svn checkout -r 1729 # Checkt eine neue Arbeitskopie von r1729 aus
&hellip;
$ svn update -r 1729 # Aktualisiert eine bestehende Arbeitskopie auf r1729
&hellip;
</screen>

      <tip>
<!--
        <para>Many Subversion newcomers attempt to use the preceding
          <command>svn update</command> example to <quote>undo</quote>
          committed changes, but this won't work as you can't commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> for a
          description of how to <quote>undo</quote> a commit.</para>
-->
        <para>Viele Subversion-Neulinge versuchen das vorangehende
          <command>svn update</command>-Beispiel zu verwenden, um
          übergebene Änderungen <quote>rückgängig</quote> zu machen,
          was allerdings nicht funktioniert, da Sie keine Änderungen
          übergeben können, die Sie durch das zeitliche Zurücksetzen
          einer Arbeitskopie erhalten haben, falls die geänderten
          Dateien neuere Revisionen haben. Siehe <xref
          linkend="svn.branchmerge.basicmerging.resurrect"/> für eine
          Beschreibung, wie eine Übergabe <quote>rückgängig</quote>
          gemacht wird.</para>
      </tip>

<!--
      <para>Lastly, if you're building a release and wish to bundle up
        your files from Subversion but don't want those
        pesky <filename>.svn</filename> directories in the way,
        you can use <command>svn export</command> to create a local
        copy of all or part of your repository
        sans <filename>.svn</filename> directories.  As
        with <command>svn update</command> and
        <command>svn checkout</command>, you can also pass the
        <option>- -revision</option> option to <command>svn
        export</command>:</para>
-->
      <para>Wenn Sie am Ende ein Release bauen und die Dateien aus
        Subversion zu einem Bündel schnüren möchten, ohne allerdings
        diese verdammten <filename>.svn</filename>-Verzeichnisse dabei
        zu haben, können Sie <command>svn export</command> verwenden,
        um eine lokale Kopie des gesamten oder teilweisen Repositorys
        ohne <filename>.svn</filename>-Verzeichnisse zu erhalten. Wie
        bei <command>svn update</command> und <command>svn
        checkout</command> können Sie auch hier die Option
        <option>--revision</option> an <command>svn export</command>
        übergeben:</para>

<!--
      <screen>
$ svn export http://svn.example.com/svn/repos1 # Exports latest revision
&hellip;
$ svn export http://svn.example.com/svn/repos1 -r 1729
# Exports revision r1729
&hellip;
</screen>
-->
      <screen>
$ svn export http://svn.example.com/svn/repos1 # Exportiert die letzte Revision
&hellip;
$ svn export http://svn.example.com/svn/repos1 -r 1729
# Exportiert Revision r1729
&hellip;
</screen>

    </sect2>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.cleanup">
<!--
    <title>Sometimes You Just Need to Clean Up</title>
-->
    <title>Manchmal müssen Sie einfach nur aufräumen</title>

<!--
    <para>Now that we've covered the day-to-day tasks that you'll
      frequently use Subversion for, we'll review a few administrative
      tasks relating to your working copy.</para>
-->
    <para>Nachdem wir nun die täglichen Aufgaben abgehandelt haben,
      für die Sie regelmäßig Subversion verwenden, gehen wir nun ein
      paar Verwaltungsaufgaben für Ihre Arbeitskopie durch.</para>


    <sect2 id="svn.tour.cleanup.disposal">
<!--
      <title>Disposing of a Working Copy</title>
-->
      <title>Entsorgen einer Arbeitskopie</title>

<!--
      <para>Subversion doesn't track either the state or the existence of
        working copies on the server, so there's no server overhead to
        keeping working copies around.  Likewise, there's no need to
        let the server know that you're going to delete a working
        copy.</para>
-->
      <para>Subversion merkt sich weder den Zustand noch das
        Vorhandensein einer Arbeitskopie auf dem Server, so dass
        serverseitig kein Aufwand für Arbeitskopien
        anfällt. Dementsprechend besteht keine Notwendigkeit, dem
        Server mitzuteilen, dass Sie vorhaben, eine Arbeitskopie zu
        löschen.</para>

<!--
      <para>If you're likely to use a working copy again, there's
        nothing wrong with just leaving it on disk until you're ready
        to use it again, at which point all it takes is an
        <command>svn update</command> to bring it up to date and ready
        for use.</para>
-->
      <para>Falls die Wahrscheinlichkeit besteht, dass Sie eine
        Arbeitskopie wiederverwenden möchten, ist es nicht verkehrt,
        sie einfach auf der Platte zu lassen, bis Sie sie wieder
        benutzen wollen. Zu diesem Zeitpunkt reicht lediglich ein
        <command>svn update</command> zum Aktualisieren, und sie ist
        gebrauchsfertig.</para>

<!--
      <para>However, if you're definitely not going to use a working
        copy again, you can safely delete the entire thing, but you'd
        be well served to take a look through the working copy for
        unversioned files.  To find these files, run <userinput>svn
        status</userinput> and review any files that are prefixed with a
        <literal>?</literal> to make certain that they're not of
        importance.  After you're done reviewing, you can safely
        delete your working copy.</para>
-->
      <para>Falls Sie die Arbeitskopie jedoch bestimmt nicht mehr
        verwenden möchten, können Sie sie ruhig löschen; jedoch
        sollten Sie vorher darin nach unversionierten Dateien
        suchen. Um diese Dateien zu finden, rufen Sie <userinput>svn
        status</userinput> auf und untersuchen alle Dateien, denen ein
        <literal>?</literal> voransteht, um sicherzugehen, dass sie
        nicht wichtig sind. Wenn Sie die Untersuchung abgeschlossen
        haben, können Sie Ihre Arbeitskopie ruhig löschen.</para>

    </sect2>

    <sect2 id="svn.tour.cleanup.interruption">
<!--
      <title>Recovering from an Interruption</title>
-->
      <title>Wiederherstellung nach einer Unterbrechung</title>

<!--
      <para>When Subversion modifies your working copy (or any
        information within <filename>.svn</filename>), it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion writes its intentions to a logfile.  Next, it
        executes the commands in the logfile to apply the requested
        change, holding a lock on the relevant part of the working
        copy while it works&mdash;to prevent other Subversion clients
        from accessing the working copy mid-change.  Finally,
        Subversion removes the logfile.  Architecturally, this is
        similar to a journaled filesystem.  If a Subversion operation
        is interrupted (e.g., if the process is killed or if the machine
        crashes), the logfiles remain on disk.  By
        reexecuting the logfiles, Subversion can complete the
        previously started operation, and your working copy can get
        itself back into a consistent state.</para>
-->
      <para>Wenn Subversion Ihre Arbeitskopie (oder irgendwelche
        Informationen in <filename>.svn</filename>) verändert,
        versucht es das so sicher wie möglich zu machen. Bevor die
        Arbeitskopie geändert wird, schreibt Subversion seine
        Absichten in eine Protokolldatei. Dann führt es die Befehle in
        der Protokolldatei aus, um die Änderungen anzuwenden, wobei es
        während der Arbeit den relevanten Teil der Arbeitskopie
        sperrt, um andere Clients davon abzuhalten, während der
        Änderung auf die Arbeitskopie zuzugreifen. Zuletzt entfernt
        Subversion die Protokolldatei. Architektonisch ist dies
        ähnlich wie bei einem Dateisystem mit Journal. Falls eine
        Subversion-Operation unterbrochen wird (z.B. wenn der Prozess
        abgeschossen wird oder der Rechner abstürzt), bleibt die
        Protokolldatei auf der Platte. Durch das erneute Ausführen der
        Protokolldatei kann Subversion die vorher begonnene Operation
        vervollständigen und Ihre Arbeitskopie gelangt wieder in
        einen konsistenten Zustand.</para>

<!--
      <para>And this is exactly what <command>svn cleanup</command>
        does: it searches your working copy and runs any leftover
        logs, removing working copy locks in the process.
        If Subversion ever tells you that some part of your working copy
        is <quote>locked,</quote> this is the command that you
        should run.  Also, <command>svn status</command> will display
        an <literal>L</literal> next to locked items:</para>
-->
      <para>Genau das macht <command>svn cleanup</command>: Es
        durchsucht Ihre Arbeitskopie und führt etwaige übrig gebliebene
        Protokolldateien aus, wobei Sperren in der Arbeitskopie
        entfernt werden. Fall Ihnen Subversion jemals mitteilt, dass
        ein Teil Ihrer Arbeitskopie <quote>gesperrt</quote> ist,
        sollten Sie diesen Befehl aufrufen. Darüberhinaus zeigt
        <command>svn status</command> ein <literal>L</literal> neben
        gesperrten Objekten an:</para>

      <screen>
$ svn status
  L    somedir
M      somedir/foo.c

$ svn cleanup
$ svn status
M      somedir/foo.c
</screen>

<!--
      <para>Don't confuse these working copy locks with the ordinary
        locks that Subversion users create when using
        the lock-modify-unlock model of concurrent
        version control; see the sidebar
        <xref linkend="svn.advanced.locking.meanings"/> for
        clarification.</para>

      <para>Verwechseln Sie diese Sperren nicht mit den gewöhnlichen
        Sperren, die Subversion-Benutzer anlegen, wenn sie das
        sperren-ändern-freigeben-Modell der gleichzeitigen
        Versionskontrolle verwenden; zur Klärung siehe den Kasten
        <xref linkend="svn.advanced.locking.meanings"/>.</para>
-->
    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.tour.summary">
<!--
    <title>Summary</title>
-->
    <title>Zusammenfassung</title>

<!--
      <para>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref"/> to
        get an idea of all the different commands that Subversion
        has&mdash;and how you can use them to make your work
        easier.</para>
-->
      <para>Nun haben wir die meisten der Subversion-Client-Befehle
        behandelt. Erwähnenswerte Ausnahmen sind diejenigen, die sich
        mit dem Branchen und Mergen befassen (siehe <xref
        linkend="svn.branchmerge"/>) sowie mit Propertys (siehe <xref
        linkend="svn.advanced.props"/>). Jedoch möchten Sie vielleicht
        einen Augenblick damit verbringen, um durch <xref
        linkend="svn.ref"/> zu blättern, um ein Gefühl für all die
        verschiedenen Befehle zu bekommen, über die Subversion verfügt
        &ndash; und wie Sie sie verwenden können, um Ihre Arbeit zu
        erleichtern.</para>

  </sect1>

</chapter>

<!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
