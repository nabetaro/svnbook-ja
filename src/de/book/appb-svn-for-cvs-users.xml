<appendix id="svn.forcvs">
<!--
  <title>Subversion for CVS Users</title>
-->
  <title>Subversion für CVS-Benutzer</title>

<!--
  <para>This appendix is a guide for CVS users new to Subversion.
    It's essentially a list of differences between the two systems
    as <quote>viewed from 10,000 feet.</quote>  For each section, we
    provide references to relevant chapters when
    possible.</para>
-->
  <para>Dieser Anhang ist eine Anleitung für CVS-Benutzer, die in
    Subversion einsteigen möchten. Im Wesentlichen ist er eine Liste
    von Unterschieden zwischen den beiden Systemen <quote>aus der
    Vogelperspektive betrachtet</quote>. Sofern dies möglich ist,
    geben wir in jedem Abschnitt Verweise auf die entsprechenden
    Kapitel an.</para>

<!--
  <para>Although the goal of Subversion is to take over the current
    and future CVS user base, some new features and design changes
    were required to fix certain <quote>broken</quote> behaviors
    that CVS had.  This means that, as a CVS user, you may need to
    break habits&mdash;ones that you forgot were odd to begin
    with.</para>
-->
  <para>Obwohl es das Ziel von Subversion ist, den bestehenden und
    künftigen Benutzerstamm von CVS zu übernehmen, war es nötig,
    einige neue Funktionen und Änderungen im Entwurf vorzunehmen, um
    bestimmte <quote>fehlerhafte</quote> Verhaltensweisen von CVS zu
    beheben. Das bedeutet, dass Sie sich als CVS-Benutzer einige
    Angewohnheiten abgewöhnen müssen &ndash; einige, von denen Sie
    vergessen haben, dass sie vor allem merkwürdig waren.</para>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.revnums">
<!--
    <title>Revision Numbers Are Different Now</title>
-->
    <title>Revisionsnummern sind jetzt anders</title>

<!--
    <para>In CVS, revision numbers are per file.  This is because CVS
      stores its data in RCS files; each file has a corresponding RCS
      file in the repository, and the repository is roughly laid out
      according to the structure of your project tree.</para>
-->
    <para>In CVS werden Revisionsnummern pro Datei vergeben. Das liegt
      daran, dass CVS seine Daten in RCS-Dateien speichert; für jede
      Datei gibt es eine entsprechende RCS-Datei im Projektarchiv, und
      die Struktur des Projektarchivs entspricht grob der Struktur Ihres
      Projektbaums.</para>

<!--
    <para>In Subversion, the repository looks like a single
      filesystem.  Each commit results in an entirely new filesystem
      tree; in essence, the repository is an array of trees.  Each of
      these trees is labeled with a single revision number.  When
      someone talks about <quote>revision 54</quote>, he's talking
      about a particular tree (and indirectly, the way the filesystem
      looked after the 54th commit).</para>
-->
    <para>In Subversion sieht das Projektarchiv aus wie ein einzelnes
      Dateisystem. Jede Übergabe verursacht einen völlig neuen
      Dateibaum; im Wesentlichen ist das Projektarchiv eine Liste aus
      Bäumen. Jeder dieser Bäume wird mit einer einzelnen
      Revisionsnumer gekennzeichnet. Wenn jemand von <quote>Revision
      54</quote> redet, ist damit ein bestimmter Baum gemeint (und
      indirekt, wie das Dateisystem nach der 54. Übergabe
      aussah).</para>

<!--
    <para>Technically, it's not valid to talk about <quote>revision 5
      of <filename>foo.c</filename>.</quote>  Instead, one would say
      <quote><filename>foo.c</filename> as it appears in revision
      5.</quote>  Also, be careful when making assumptions about the
      evolution of a file.  In CVS, revisions 5 and 6 of
      <filename>foo.c</filename> are always different.  In Subversion,
      it's most likely that <filename>foo.c</filename> did
      <emphasis>not</emphasis> change between revisions 5 and
      6.</para>
-->
    <para>Technisch ist es nicht zulässig, von <quote>Revision 5 von
      <filename>foo.c</filename></quote> zu sprechen. Stattdessen
      sollte man sagen,  <quote><filename>foo.c</filename> wie es in
      Revision 5 aussieht</quote>. Seien Sie ebenfalls sorgfältig,
      wenn Sie Annahmen über die Entwicklung einer Datei machen. In
      CVS sind die Revisionen 5 und 6 von <filename>foo.c</filename>
      immer unterschiedlich. In Subversion ist es sehr wahrscheinlich,
      dass <filename>foo.c</filename> sich zwischen den Revisionen 5
      und 6 <emphasis>nicht</emphasis> geändert hat.</para>

<!--
    <para>Similarly, in CVS, a tag or branch is an annotation on the
      file or on the version information for that individual file,
      whereas in Subversion, a tag or branch is a copy of an entire
      tree (by convention, into the <filename>/branches</filename>
      or <filename>/tags</filename> directories that appear at the top
      level of the repository, beside <filename>/trunk</filename>). In
      the repository as a whole, many versions of each file may be
      visible: the latest version on each branch, every tagged
      version, and of course the latest version on the trunk
      itself. So, to refine the terms even further, one would often
      say <quote><filename>foo.c</filename> as it appears in
      <filename>/branches/REL1</filename> in revision
      5.</quote></para>
-->
    <para>Auf ähnliche Weise ist in CVS ein Tag oder ein Zweig eine
      Anmerkung zu der Datei oder zu der Versionsinformation dieser
      individuellen Datei, wohingegen ein Tag oder ein Zweig in
      Subversion eine Kopie des gesamten Baums ist (konventionell in
      die Verzeichnisse <filename>/branches</filename> oder
      <filename>/tags</filename>, die auf der obersten Ebene des
      Projektarchivs neben <filename>/trunk</filename> liegen). Im
      Projektarchiv in seiner Gesamtheit können viele Versionen einer
      Datei sichtbar sein: die letzte Version jedes Zweigs, jede mit
      einem Tag versehene Version und natürlich die letzte Version auf
      dem Stamm. Um den Ausdruck also noch weiter zu präzisieren,
      würde man sagen <quote><filename>foo.c</filename> wie es in
      <filename>/branches/REL1</filename> in Revision
      5</quote> aussieht.</para>

    <para>Für weitere Einzelheiten zu diesem Thema, siehe <xref
      linkend="svn.basic.in-action.revs" />.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.directories">
<!--
    <title>Directory Versions</title>
-->
    <title>Verzeichnisversionen</title>
    
<!--
    <para>Subversion tracks tree structures, not just file contents.
      It's one of the biggest reasons Subversion was written to
      replace CVS.</para>
-->
    <para>Subversion verfolgt Baumstrukturen, nicht nur
      Dateiinhalte. Dies ist einer der Hauptgründe, warum Subversion
      geschrieben wurde, um CVS zu ersetzen.</para>

<!--
    <para>Here's what this means to you, as a former CVS user:</para>
-->
    <para>Für Sie als ehemaligen CVS-Benutzer bedeutet das:</para>

    <itemizedlist>
      <listitem>
<!--
        <para>The <command>svn add</command> and <command>svn
          delete</command> commands work on directories now, just as
          they work on files.  So do <command>svn copy</command> and
          <command>svn move</command>.  However, these commands do
          <emphasis>not</emphasis> cause any kind of immediate change
          in the repository.  Instead, the working items are simply
          <quote>scheduled</quote> for addition or deletion.  No
          repository changes happen until you run <userinput>svn
          commit</userinput>.</para>
-->
        <para>Die Befehle <command>svn add</command> und <command>svn
          delete</command> arbeiten nun auf Verzeichnissen wie auf
          Dateien; ebenso <command>svn copy</command> und <command>svn
          move</command>. Jedoch bewirken diese Befehle
          <emphasis>keine</emphasis> sofortige Änderung im Projektarchiv.
          Stattdessen werden die Objekte einfach zum Hinzufügen oder
          Löschen <quote>vorgemerkt</quote>. Es findet keine Änderung
          im Projektarchiv statt, bevor Sie <userinput>svn
          commit</userinput> aufrufen.</para>
      </listitem>
      <listitem>
<!--
        <para>Directories aren't dumb containers anymore; they have
          revision numbers like files.  (Or more properly, it's
          correct to talk about <quote>directory
          <filename>foo/</filename> in revision 5.</quote>)</para>
-->
        <para>Verzeichnisse sind nicht mehr dumme Behälter, sondern
          sie haben Versionsnummern wie Dateien. (Obwohl es genauer
          ist, von <quote>Verzeichnis <filename>foo/</filename> in
          Revision 5</quote> zu sprechen.)</para>
      </listitem>
    </itemizedlist>

<!--
    <para>Let's talk more about that last point.  Directory versioning
      is a hard problem; because we want to allow mixed-revision
      working copies, there are some limitations on how far we can
      abuse this model.</para>
-->
    <para>Lassen Sie uns den letzten Punkt etwas genauer erörtern. Die
      Versionierung von Verzeichnissen ist ein ernstes Problem; da wir
      Arbeitskopien aus gemischten Revisionen zulassen möchten, gibt
      es einige Einschränkungen beim Ausreizen dieses Modells.</para>
<!--
    <para>From a theoretical point of view, we define <quote>revision
      5 of directory <filename>foo</filename></quote> to mean a
      specific collection of directory entries and properties.  Now
      suppose we start adding and removing files from
      <filename>foo</filename>, and then commit.  It would be a lie
      to say that we still have revision 5 of
      <filename>foo</filename>.  However, if we bumped
      <filename>foo</filename>'s revision number after the commit,
      that would be a lie too; there may be other changes to
      <filename>foo</filename> we haven't yet received, because we
      haven't updated yet.</para>
-->
    <para>Vom theoretischen Standpunkt definieren wir <quote>Revision
      5 des Verzeichnisses <filename>foo</filename></quote> als eine
      bestimmte Ansammlung von Verzeichniseinträgen und Propertys.
      Angenommen, wir beginnen nun damit, Dateien dem Verzeichnis
      <filename>foo</filename> hinzuzufügen und wegzunehmen und diese
      Änderungen dann zu übergeben. Es wäre eine Lüge, zu behaupten,
      dass wir immer noch Revision 5 von <filename>foo</filename>
      hätten. Wenn wir allerdings die Revisionsnummer von
      <filename>foo</filename> nach der Übergabe erhöht hätten, wäre
      das auch eine Lüge; es könnten noch weitere Änderungen an
      <filename>foo</filename> vorliegen, die wir aber nicht
      mitbekommen haben, da wir noch nicht aktualisiert haben.</para>

<!--
    <para>Subversion deals with this problem by quietly tracking
      committed adds and deletes in the <filename>.svn</filename>
      area.  When you eventually run <userinput>svn update</userinput>,
      all accounts are settled with the repository, and the
      directory's new revision number is set correctly.
      <emphasis>Therefore, only after an update is it truly safe to
      say that you have a <quote>perfect</quote> revision of a
      directory.</emphasis> Most of the time, your working copy will
      contain <quote>imperfect</quote> directory revisions.</para>
-->
    <para>Subversion behandelt dieses Problem, indem es
      stillschweigend übergebene Hinzufügungen sowie Löschungen im
      <filename>.svn</filename>-Bereich mitverfolgt. Wenn Sie
      schließlich <userinput>svn update</userinput> aufrufen, wird
      alles in Bezug auf das Projektarchiv glattgezogen und die neue
      Revisionsnummer des Verzeichnisses korrekt vergeben.
      <emphasis>Daher kann erst nach einer Aktualisierung gesagt
      werden, dass es eine <quote>vollständige</quote>
      Verzeichnisrevision gibt.</emphasis> Meist wird Ihre
      Arbeitskopie <quote>unvollständige</quote> Verzeichnisrevisionen
      enthalten.</para>

<!--
    <para>Similarly, a problem arises if you attempt to commit
      property changes on a directory.  Normally, the commit would
      bump the working directory's local revision number.  But again,
      that would be a lie, as there may be adds or deletes that
      the directory doesn't yet have, because no update has happened.
      <emphasis>Therefore, you are not allowed to commit
      property changes on a directory unless the directory is
      up to date.</emphasis></para>
-->
    <para>Auf ähnliche Art ergibt sich ein Problem, wenn Sie
      versuchen, Property-Änderungen an einem Verzeichnis zu
      übergeben. Normalerweise würde die Übergabe die lokale
      Revisionsnummer erhöhen, was jedoch eine Lüge wäre, da
      Hinzufügungen oder Löschungen vorhanden sein könnten, die das
      Verzeichnis noch nicht mitbekommen hat, da es nicht aktualisiert
      worden ist. <emphasis>Deshalb dürfen Sie Änderungen an
      Verzeichnis-Propertys nicht übergeben, bevor Sie das Verzeichnis
      aktualisiert haben.</emphasis></para>

<!--
    <para>For more discussion about the limitations of directory
      versioning, see <xref linkend="svn.basic.in-action.mixedrevs"/>.</para>
-->
    <para>Für eine weitergehende Erörterung der Einschränkungen der
      Verzeichnisversionierung, siehe <xref
      linkend="svn.basic.in-action.mixedrevs"/>.</para>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.disconnected">
<!--
    <title>More Disconnected Operations</title>
-->
    <title>Mehr Operationen ohne Verbindung</title>

<!--
    <para>In recent years, disk space has become outrageously cheap
      and abundant, but network bandwidth has not.  Therefore, the
      Subversion working copy has been optimized around the scarcer
      resource.</para>
-->
    <para>Während der letzten Jahre ist Plattenplatz saubillig und im
      Überfluss verfügbar geworden, die Bandbreite des Netzes jedoch
      nicht. Deshalb wurde die Arbeitskopie von Subversion
      hinsichtlich der knapperen Ressource optimiert.</para>

<!--
    <para>The <filename>.svn</filename> administrative directory
      serves the same purpose as the <filename>CVS</filename>
      directory, except that it also stores read-only,
      <quote>pristine</quote> copies of your files.  This allows you
      to do many things offline:</para>
-->
    <para>Das Verwaltungsverzeichnis <filename>.svn</filename> dient
      demselben Zweck wie das Verzeichnis <filename>CVS</filename>,
      außer dass es zusätzlich schreibgeschützte
      <quote>unveränderte</quote> Kopien Ihrer Dateien speichert. Das
      erlaubt es Ihnen, viele Dinge ohne Verbindung zu erledigen:
    </para>

    <variablelist>
      
      <varlistentry>
        <term><command>svn status</command></term>
        <listitem>
<!--
          <para>Shows you any local changes you've made (see <xref
            linkend="svn.tour.cycle.examine.status"/>)</para>
-->
          <para>Zeigt Ihnen alle lokalen Änderungen, die Sie
            vorgenommen haben (siehe <xref
            linkend="svn.tour.cycle.examine.status"/>)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command>svn diff</command></term>
        <listitem>
<!--
          <para>Shows you the details of your changes (see <xref
            linkend="svn.tour.cycle.examine.diff"/>)</para>
-->
          <para>Zeigt Ihnen die Details Ihrer Änderungen (siehe <xref
            linkend="svn.tour.cycle.examine.diff"/>)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command>svn revert</command></term>
        <listitem>
<!--
          <para>Removes your local changes (see <xref
            linkend="svn.tour.cycle.revert"/>)</para>
-->
          <para>Macht Ihre lokalen Änderungen rückgängig (siehe <xref
            linkend="svn.tour.cycle.revert"/>)</para>
        </listitem>
      </varlistentry>

    </variablelist>

<!--
    <para>Also, the cached pristine files allow the Subversion client
      to send differences when committing, which CVS cannot do.</para>
-->
    <para>Desweiteren erlauben die zwischengespeicherten unveränderten
      Dateien dem Subversion-Client bei der Übergabe Unterschiede zu
      senden, wass CVS nicht kann.</para>

<!--
    <para>The last subcommand in the list&mdash;<command>svn
      revert</command>&mdash;is new.  It will not only remove local
      changes, but also unschedule operations such as adds and
      deletes.  Although deleting the file and then running <userinput>svn
      update</userinput> will still work, doing so distorts the true
      purpose of updating.  And, while we're on this subject&hellip;
-->
    <para>Der letzte Unterbefehl in der Liste &ndash; <command>svn
      revert</command> &ndash; ist neu. Er entfernt nicht nur lokale
      Änderungen, sondern beseitigt auch vorgemerkte Operationen wie
      Hinzufügungen und Löschungen. Auch wenn das Löschen einer Datei
      und der folgende Aufruf von <userinput>svn update</userinput>
      immer noch funktioniert, verzerrt dies den wahren Zweck einer
      Aktualisierung. Und, wo wir gerade beim Thema sind&hellip;

    </para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.status-vs-update">
<!--
    <title>Distinction Between Status and Update</title>
-->
    <title>Unterscheidung zwischen Status und Update</title>

<!--
    <para>Subversion attempts to erase a lot of the confusion
      between the <command>cvs status</command> and
      <command>cvs update</command> commands.</para>
-->
    <para>Subversion versucht, einen großen Teil der Verwirrung zu
      beseitigen, die hinsichtlich der Befehle <command>cvs
      status</command> und <command>cvs update</command>
      besteht.</para>

<!--
    <para>The <command>cvs status</command> command has two purposes:
      first, to show the user any local modifications in the working
      copy, and second, to show the user which files are out of date.
      Unfortunately, because of CVS's hard-to-read status output, many
      CVS users don't take advantage of this command at all.  Instead,
      they've developed a habit of running <userinput>cvs
      update</userinput> or <userinput>cvs -n update</userinput> to quickly
      see their changes.  If users forget to use
      the <option>-n</option> option, this has the side effect of
      merging repository changes they may not be ready to deal
      with.</para>
-->
    <para>Der Befehl <command>cvs status</command> erfüllt zwei
      Zwecke: dem Benutzer alle lokalen Änderungen in der Arbeitskopie
      zu zeigen und welche Dateien nicht mehr aktuell sind. Bedingt
      durch die schwer lesbare Ausgabe des CVS-Befehls status,
      verzichten viele CVS-Benutzer ganz auf die Vorteile dieses
      Befehls. Stattdessen haben sie sich angewöhnt, <userinput>cvs
      update</userinput> oder <userinput>cvs -n update</userinput>
      aufzurufen, um schnell ihre Änderungen zu sehen. Falls Benutzer
      die Option <option>-n</option> vergessen, hat das den
      Nebeneffekt, dass Projektarchiv-Änderungen hineingebracht werden
      könnten, um die sie sich momentan noch nicht kümmern
      können.</para>

<!--
    <para>Subversion removes this muddle by making the output of
      <command>svn status</command> easy to read for both humans and
      parsers.  Also, <command>svn update</command> prints only
      information about files that are updated,
      <emphasis>not</emphasis> local modifications.</para>
-->
    <para>Subversion räumt mit diesem Durcheinander auf, indem es die
      Ausgabe von <command>svn status</command> leicht lesbar für
      Menschen und Parser macht. Außerdem gibt <command>svn
      update</command> nur Informationen über Dateien aus, die
      aktualisiert werden, jedoch <emphasis>nicht</emphasis> über
      lokale Änderungen.</para>

    <sect2 id="svn.forcvs.status-vs-update.status">
      <title>Status</title>

<!--
      <para><command>svn status</command> prints all files that have
        local modifications.  By default, the repository is not
        contacted.  While this subcommand accepts a fair number of
        options, the following are the most commonly used ones:</para>
-->
      <para><command>svn status</command> gibt alle Dateien aus, an
        denen lokale Änderungen vorgenommen wurden. Standardmäßig wird
        kein Kontakt zum Projektarchiv hergestellt. Obwohl dieser
        Unterbefehl eine stattliche Anzahl an Optionen versteht, sind
        die folgenden die meistbenutzten:</para>

      <variablelist>
        <varlistentry>
          <term><option>-u</option></term>
          <listitem>
<!--
            <para>Contact the repository to determine, and then display,
              out-of-dateness information.</para>
-->
            <para>Verbindung zum Projektarchiv aufnehmen, um
              Informationen über nicht mehr Aktuelles zu ermitteln und
              dann anzuzeigen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v</option></term>
          <listitem>
<!--
            <para>Show <emphasis>all</emphasis> entries under
              version control.</para>
-->
            <para><emphasis>Alle</emphasis> versionskontrollierten
              Einträge anzeigen.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-N</option></term>
          <listitem>
<!--
            <para>Run nonrecursively (do not descend into
              subdirectories).</para>
-->
            <para>Nicht rekursiv ausführen (nicht in
              Unterverzeichnisse gehen).</para>
          </listitem>
        </varlistentry>
      </variablelist>

<!--
      <para>The <command>svn status</command> command has two output
        formats.  In the default <quote>short</quote> format, local
        modifications look like this:</para>
-->
      <para>Der Befehl <command>svn status</command> besitzt zwei
        Ausgabeformate. Im standardmäßigen <quote>Kurzformat</quote>
        sehen lokale Änderungen so aus:</para>

      <screen>
$ svn status
M      foo.c
M      bar/baz.c
</screen>

<!--
      <para>If you specify the <option>- -show-updates</option>
        (<option>-u</option>) option, a longer output format is
        used:</para>
-->
      <para>Falls Sie die Option <option>--show-updates</option>
        (<option>-u</option>) angeben, wird ein umfangreicheres
        Ausgabeformat verwendet:</para>

<!--
      <screen>
$ svn status -u
M            1047   foo.c
       *     1045   faces.html
       *            bloo.png
M            1050   bar/baz.c
Status against Revision:   1066
</screen>
-->
      <screen>
$ svn status -u
M            1047   foo.c
       *     1045   faces.html
       *            bloo.png
M            1050   bar/baz.c
Status bezogen auf Revision:   1066
</screen>

<!--
      <para>In this case, two new columns appear.  The second column
        contains an asterisk if the file or directory is out of date.
        The third column shows the working copy's revision number of the
        item.  In the previous example, the asterisk indicates that
        <filename>faces.html</filename> would be patched if we updated,
        and that <filename>bloo.png</filename> is a newly added file in
        the repository.  (The absence of any revision number next to
        <filename>bloo.png</filename> means that it doesn't yet exist in
        the working copy.)</para>
-->
      <para>In diesem Fall tauchen zwei neue Spalten auf. Die zweite
        Spalte beinhaltet ein Sternchen, falls die Datei oder das
        Verzeichnis nicht mehr aktuell ist. Die dritte Spalte zeigt
        die Revisionsnummer des Objektes in der Arbeitskopie an. Im
        vorangegangenen Beispiel zeigt das Sternchen an, dass das
        Objekt <filename>faces.html</filename> beim Aktualisieren
        verändert würde, und dass <filename>bloo.png</filename> eine
        dem Projektarchiv hinzugefügte neue Datei ist. (Die Abwesenheit
        einer Revisionsnummer neben <filename>bloo.png</filename>
        bedeutet, dass die Datei noch nicht in der Arbeitskopie
        vorhanden ist.)</para>

      <!-- ###TODO describe -v here as well as -uv. -u and -v use
           different <quote>long</quote> formats and need to be
           documented separately.  Moreover, as you can combine -u and
           -v, it needs to be explained what each of them does.  As -u is
           much more important than -v, and the example following that
           paragraph *is* about -u, not -v, my patch concentrated on
           that. -->

<!--
      <para>At this point, you should take a quick look at the list of
        all possible status codes in
        <xref linkend="svn.ref.svn.c.status"/>.  Here are a few of the
        more common status codes you'll see:</para>
-->
      <para>An dieser Stelle sollten Sie einen kurzen Blick auf die
        Liste aller möglichen Zustandscodes in <xref
        linkend="svn.ref.svn.c.status"/> werfen. Hier sind einige der
        häufiger vorkommenden:</para>

<!--
      <screen>
A    Resource is scheduled for Addition
D    Resource is scheduled for Deletion
M    Resource has local Modifications
C    Resource has Conflicts (changes have not been completely merged
       between the repository and working copy version)
X    Resource is eXternal to this working copy (may come from another
       repository).  See <xref linkend="svn.advanced.externals" />
?    Resource is not under version control
!    Resource is missing or incomplete (removed by a tool other than
       Subversion)
</screen>
-->
      <screen>
A    Ressource ist zum Hinzufügen vorgemerkt (Add)
D    Ressource ist zum Löschen vorgemerkt (Delete)
M    Ressource hat lokale Änderungen (Modified)
C    Ressource hat Konflikte (Änderungen sind nicht vollständig
     aus der Version im Repository und der Version der Arbeitskopie
     zusammengeführt worden) (Conflict)
X    Ressource ist eXtern in Bezug auf diese Arbeitskopie (könnte aus
     einem anderen Repository kommen).  Siehe <xref
     linkend="svn.advanced.externals" />
?    Ressource ist nicht versionskontrolliert
!    Ressource fehlt oder ist unvollständig (durch ein anderes
     Werkzeug als Subversion entfernt)
</screen>

<!--
      <para>For a more detailed discussion of <command>svn
        status</command>, see <xref linkend="svn.tour.cycle.examine.status" />.</para>
-->
      <para>Für eine tiefergehende Erörterung von <command>svn
        status</command>, siehe <xref
        linkend="svn.tour.cycle.examine.status" />.</para>

    </sect2>

    <sect2 id="svn.forcvs.status-vs-update.update">
      <title>Update</title>

<!--
      <para><command>svn update</command> updates your working copy,
        and prints only information about files that it updates.</para>
-->
      <para><command>svn update</command> aktualisiert Ihre
        Arbeitskopie und gibt nur Informationen über Dateien aus, die
        aktualisiert werden.</para>

<!--
      <para>Subversion has combined CVS's <literal>P</literal> and
        <literal>U</literal> codes into just <literal>U</literal>.  When
        a merge or conflict occurs, Subversion simply prints
        <literal>G</literal> or <literal>C</literal>, rather than a
        whole sentence about it.</para>
-->
      <para>Subversion hat den Code <literal>P</literal> und
        <literal>U</literal> von CVS zu <literal>U</literal>
        vereinfacht. Wenn eine Zusammenführung stattfindet oder ein
        Konflikt auftritt, gibt Subversion einfach
        <literal>G</literal> oder <literal>C</literal> aus, statt
        einen ganzen Satz darüber zu verlieren.</para>

<!--
      <para>For a more detailed discussion of <command>svn
        update</command>, see <xref linkend="svn.tour.cycle.update" />.</para>
-->
      <para>Für eine detailliertere Erörteung von <command>svn
        update</command>, siehe <xref linkend="svn.tour.cycle.update" />.</para>

    </sect2>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.branches-and-tags">
<!--
    <title>Branches and Tags</title>
-->
    <title>Zweige und Tags</title>

<!--
    <para>Subversion doesn't distinguish between filesystem space and
      <quote>branch</quote> space; branches and tags are ordinary
      directories within the filesystem.  This is probably the single
      biggest mental hurdle that a CVS user will need to cross.  Read
      all about it in <xref linkend="svn.branchmerge"/>.</para>
-->
    <para>Subversion unterscheidet nicht zwischen Dateisystem- und 
      <quote>Zweig</quote>-Raum; Zweige und Tags sind gewöhnliche
      Verzeichnisse im Dateisystem. Das ist wahrscheinlich die
      einzige, größte mentale Hürde, die ein CVS-Benutzer überwinden
      muss. Lesen Sie alles hierüber in <xref
      linkend="svn.branchmerge"/>.</para>

    <warning>

<!--
      <para>Since Subversion treats branches and tags as ordinary
        directories, your project's various lines of development
        probably live in subdirectories of the main project directory.
        So remember to check out using the URL of the subdirectory
        that contains the particular line of development you want, not
        the project's root URL.  If you make the mistake of checking
        out the root of the project, you may very well wind up with a
        working copy that contains a complete copy of your project's
        content for each and every one of its branches and tags.
        <footnote>
          <para>That is, providing you don't run out of disk space
            before your checkout finishes.</para>
        </footnote>
      </para>
    </warning>
-->
      <para>Da Subversion Zweige und Tags wie normale Verzeichnisse
        behandelt, befinden sich die verschiedenen Entwicklungsstränge
        Ihres Projektes wahrscheinlich in Unterverzeichnissen des
        Projekthauptverzeichnisses. Denken Sie also daran, beim
        Auschecken den URL des Unterverzeichnisses anzugeben, das den
        bestimmten Entwicklungsstrang enthält, den Sie benötigen,
        nicht den URL des Projektwurzelverzeichnisses. Falls Sie den
        Fehler begehen, das Projektwurzelverzeichnis auszuchecken,
        kann es passieren, dass dabei eine Arbeitskopie entsteht, die
        eine vollständige Kopie Ihres Projektinhaltes von allen
        Zweigen und Tags enthält.
        <footnote>
          <para>Dass heißt, wenn Ihnen vor Abschluss des Checkouts
            nicht der Plattenplatz zu Ende geht.</para>
        </footnote>
      </para>
    </warning>

  </sect1>


  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.properties">
<!--
    <title>Metadata Properties</title>
-->
    <title>Property-Metadaten</title>

<!--
    <para>A new feature of Subversion is that you can attach arbitrary
      metadata (or <quote>properties</quote>) to files and
      directories.  Properties are arbitrary name/value pairs
      associated with files and directories in your working
      copy.</para>
-->
    <para>Ein neues Merkmal von Subversion ist es, dass nun beliebige
      Metadaten (oder <quote>Propertys</quote>) an Dateien und
      Verzeichnisse geheftet werden können. Propertys sind beliebige
      Name-Wert-Paare, die mit Dateien und Verzeichnissen in Ihrer
      Arbeitskopie verbunden sind.</para>

<!--
    <para>To set or get a property name, use the <command>svn
      propset</command> and <command>svn propget</command>
      subcommands.  To list all properties on an object, use
      <command>svn proplist</command>.</para>
-->
    <para>Verwenden Sie zum Setzen oder Abfragen eines Property-Namens
      die Unterbefehle <command>svn propset</command> und <command>svn
      propget</command>. Um eine Liste aller Propertys eines Objektes
      zu erhalten, rufen Sie <command>svn proplist</command> auf.
    </para>

<!--
    <para>For more information, see <xref linkend="svn.advanced.props"/>.</para>
-->
    <para>Für weitere Informationen siehe <xref
      linkend="svn.advanced.props"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.conflicts">
<!--
    <title>Conflict Resolution</title>
-->
    <title>Konfliktauflösung</title>

<!--
    <para>CVS marks conflicts with inline <quote>conflict
      markers,</quote> and then prints a <literal>C</literal> during
      an update or merge operation.  Historically, this has caused
      problems, because CVS isn't doing enough.  Many users forget
      about (or don't see) the <literal>C</literal> after it whizzes
      by on their terminal.  They often forget that the conflict
      markers are even present, and then accidentally commit files
      containing those conflict markers.</para>
-->
    <para>CVS markiert Konflikte mit
      <quote>Konfliktmarkierungen</quote> im Text und gibt
      anschließend während einer Aktualisierung oder einer
      Zusammenführung ein <literal>C</literal> aus. Historisch hat das
      zu Problemen geführt, da CVS nicht genug macht. Viele Benutzer
      vergessen das <literal>C</literal> nachdem es über ihr Terminal
      geschossen ist (oder sehen es nicht). Oftmals vergessen sie,
      dass überhaupt Konfliktmarkierungen vorhanden sind und übergeben
      versehentlich Dateien, die diese Konfliktmarkierungen
      enthalten.</para>

<!--
    <para>Subversion solves this problem in a pair of ways.  First,
      when a conflict occurs in a file, Subversion records the fact
      that the file is in a state of conflict, and won't allow you to
      commit changes to that file until you explicitly resolve the
      conflict.  Second, Subversion 1.5 provides interactive
      conflict resolution, which allows you to resolve conflicts as
      they happen instead of having to go back and do so after the
      update or merge operation completes.  See <xref
      linkend="svn.tour.cycle.resolve" /> for more about conflict
      resolution in Subversion.</para>
-->
    <para>Subversion löst dieses Problem mit einem Maßnahmenpaar.
      Zunächst merkt sich Subversion beim Auftreten eines Konfliktes
      in einer Datei den Konfliktzustand und erlaubt Ihnen die
      Übergabe der Datei erst dann, wenn Sie explizit die Konflikte
      aufgelöst haben. Desweiteren bietet Subversion 1.5 eine
      interaktive Konfliktauflösung an, so dass Sie Konflikte lösen
      können sobald sie auftreten, anstatt später nach Abschluss der
      Aktualisierung oder Übergabe zurückgehen zu müssen. Mehr zur
      Konfliktauflösung in Subversion lesen Sie in <xref
      linkend="svn.tour.cycle.resolve" />.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.binary-and-trans">
<!--
    <title>Binary Files and Translation</title>
-->
    <title>Binärdateien und Umwandlung</title>

<!--
    <para>In the most general sense, Subversion handles binary files
      more gracefully than CVS does.  Because CVS uses RCS, it can
      only store successive full copies of a changing binary file.
      Subversion, however, expresses differences between files using a
      binary differencing algorithm, regardless of whether they
      contain textual or binary data.  That means all files are
      stored differentially (compressed) in the repository.</para>
-->
    <para>Im Großen und Ganzen geht Subversion mit Binärdateien
      eleganter um als CVS. Da CVS RCS verwendet, kann es nur
      aufeinanderfolgende vollständige Kopien einer sich ändernden
      Binärdatei abspeichern. Subversion jedoch stellt Unterschiede
      zwischen Dateien mithilfe eines binären Differenzalgorithmus
      dar. Das bedeutet, dass alle Dateien als (komprimierte)
      Differenzen im Projektarchiv abgespeichert werden.</para>

<!--
    <para>CVS users have to mark binary files with
      <option>-kb</option> flags to prevent data from being
      garbled (due to keyword expansion and line-ending translations).
      They sometimes forget to do this.</para>
-->
    <para>Benutzer von CVS müssen binäre Dateien mit der Option
      <option>-kb</option> kennzeichnen, um zu verhindern, dass die
      Daten verfälscht werden (aufgrund von Schlüsselwortersetzung und
      der Umwandlung von Zeilenenden). Manchmal vergessen sie
      es.</para>

<!--
    <para>Subversion takes the more paranoid route.  First, it never
      performs any kind of keyword or line-ending translation unless
      you explicitly ask it to do so (see <xref
      linkend="svn.advanced.props.special.keywords"/> and <xref
      linkend="svn.advanced.props.special.eol-style"/> for more details).  By default,
      Subversion treats all file data as literal byte strings, and
      files are always stored in the repository in an untranslated
      state.</para>
-->
    <para>Subversion schlägt den paranoideren Weg ein. Erstens
      macht es keinerlei Schlüsselwortersetzung oder
      Zeilenendenumwandlung, es sei denn, Sie fordern es ausdrücklich
      dazu auf (Einzelheiten unter <xref
      linkend="svn.advanced.props.special.keywords"/> und <xref
      linkend="svn.advanced.props.special.eol-style"/>). Standardmäßig
      behandelt Subversion alle Dateiinhalte als Byteketten, und
      Dateien werden stets ohne Umwandlung im Projektarchiv
      gespeichert.</para>

<!--
    <para>Second, Subversion maintains an internal notion of whether a
      file is <quote>text</quote> or <quote>binary</quote> data, but
      this notion is <emphasis>only</emphasis> extant in the working
      copy.  During an <command>svn update</command>, Subversion will
      perform contextual merges on locally modified text files, but
      will not attempt to do so for binary files.</para>
-->
    <para>Zweitens besitzt Subversion eine interne Auffassung, ob eine
      Datei <quote>textuellen</quote> oder <quote>binären</quote>
      Inhalt hat, doch besteht diese Auffassung
      <emphasis>nur</emphasis> in der Arbeitskopie. Während eines
      <command>svn update</command> unternimmt Subversion für lokal
      veränderte Textdateien eine kontextabhängige Zusammenführung,
      versucht das allerdings nicht bei Binärdateien.</para>

<!--
    <para>To determine whether a contextual merge is possible,
      Subversion examines the <literal>svn:mime-type</literal>
      property.  If the file has no <literal>svn:mime-type</literal>
      property, or has a MIME type that is textual (e.g.,
      <literal>text/*</literal>),
      Subversion assumes it is text.  Otherwise, Subversion assumes
      the file is binary.  Subversion also helps users by running a
      binary-detection algorithm in the <command>svn import</command>
      and <command>svn add</command> commands.  These commands will
      make a good guess and then (possibly) set a binary
      <literal>svn:mime-type</literal> property on the file being
      added.  (If Subversion guesses wrong, the user can always remove
      or hand-edit the property.)</para>
-->
    <para>Um festzustellen, ob eine kontextabhängige Zusammenführung
      möglich ist, überprüft Subversion das Property
      <literal>svn:mime-type</literal>. Falls die Datei kein Property
      <literal>svn:mime-type</literal> besitzt, oder ein textueller
      MIME-Typ ist (z.B. <literal>text/*</literal>), nimmt Subversion
      an, dass es sich um eine Textdatei handelt. Anderenfalls nimmt
      Subversion an, dass die Datei binär ist. Subversion hilft
      Benutzern auch, indem es einen Algorithmus zur Erkennung von
      Binärdaten bei den Befehlen <command>svn import</command> und
      <command>svn add</command> ausführt. Diese Befehle werden eine
      gute Schätzung machen und (möglicherweise) ein binäres
      <literal>svn:mime-type</literal> Property auf die hinzuzufügende
      Datei setzen. (Falls sich Subversion verschätzt, kann der
      Benutzer stets das Property entfernen oder manuell
      bearbeiten.)</para>
    </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.modules">

<!--
    <title>Versioned Modules</title>
-->
    <title>Versionierte Module</title>

<!--
    <para>Unlike CVS, a Subversion working copy is aware that it has
      checked out a module.  That means if somebody changes the
      definition of a module (e.g., adds or removes components), a
      call to <command>svn update</command> will update the working
      copy appropriately, adding and removing components.</para>
-->
    <para>Anders als bei CVS weiss eine Arbeitskopie von Subversion,
      dass hier ein Modul ausgecheckt ist. Das heisst, dass, falls
      jemand die Definition eines Moduls ändert (z.B. Komponenten
      hinzufügt oder entfernt), ein Aufruf von <command>svn
      update</command> die Arbeitskopie entsprechend aktualisiert,
      indem Komponenten hinzugefügt oder entfernt werden.</para>

<!--
    <para>Subversion defines modules as a list of directories within a
      directory property; see <xref linkend="svn.advanced.externals"/>.</para>
-->
    <para>Subversion definiert Module als eine Liste von
      Verzeichnissen innerhalb eines Verzeichnis-Propertys; siehe
      <xref linkend="svn.advanced.externals"/>.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.auth">

<!--
    <title>Authentication</title>
-->
    <title>Authentifizierung</title>

<!--
    <para>With CVS's pserver, you are required to log in to the server
      (using the <command>cvs login</command> command) before
      performing any read or write operation&mdash;you sometimes even
      have to log in for anonymous operations.  With a Subversion
      repository using Apache <command>httpd</command> or
      <command>svnserve</command> as the server, you don't provide any
      authentication credentials at the outset&mdash;if an operation
      that you perform requires authentication, the server will
      challenge you for your credentials (whether those credentials
      are username and password, a client certificate, or even both).
      So if your repository is world-readable, you will not be
      required to authenticate at all for read operations.</para>
-->
    <para>Bei Verwendung des pservers von CVS müssen Sie sich beim
      Server anmelden (mit dem Befehl <command>cvs login</command>),
      bevor Sie irgendeine Lese- oder Schreiboperation vornehmen
      &ndash; manchmal müssen Sie sich sogar für anonyme Vorgänge
      anmelden. Mit einem Subversion-Projektarchiv, das Apache
      <command>httpd</command> oder <command>svnserve</command> als
      Server verwendet, übergeben Sie Zugangsdaten nicht von
      vornherein &ndash; falls eine von Ihnen durchgeführte Tätigkeit
      eine Authentifizierung notwendig macht, fordert der Server Ihre
      Zugangsdaten an (egal, ob es sich um Benutzernamen und Passwort,
      ein Client-Zertifikat oder beides handelt). Falls Ihr Projektarchiv
      also der ganzen Welt Lesezugriff einräumt, brauchen Sie sich für
      Lesevorgänge überhaupt nicht zu legitimieren.</para>

<!--
    <para>As with CVS, Subversion still caches your credentials on
      disk (in your <filename>~/.subversion/auth/</filename>
      directory) unless you tell it not to by using the
      <option>- -no-auth-cache</option> option.</para>
-->
    <para>Wie bei CVS speichert Subversion Ihre Zugangsdaten immer
      noch auf Platte (in Ihrem Verzeichnis
      <filename>~/.subversion/auth/</filename>), es sei denn, Sie
      untersagen es ihm mit der Option
      <option>--no-auth-cache</option>.</para>

<!--
    <para>The exception to this behavior, however, is in the case of
      accessing an <command>svnserve</command> server over an SSH
      tunnel, using the <literal>svn+ssh://</literal> URL scheme.  In
      that case, the <command>ssh</command> program unconditionally
      demands authentication just to start the tunnel.</para>
-->
    <para>Eine Ausnahme für dieses Verhalten gibt es jedoch beim
      Zugriff auf einen <command>svnserve</command>-Server über einen
      SSH-Tunnel bei Verwendung des URL-Schemas
      <literal>svn+ssh://</literal>. In diesem Fall verlangt das
      Programm <command>ssh</command> unbedingt eine
      Authentifizierung, allein um den Tunnel zu starten.</para>

  </sect1>

  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <!-- ================================================================= -->
  <sect1 id="svn.forcvs.convert">

<!--
    <title>Converting a Repository from CVS to Subversion</title>
-->
    <title>Ein Projektarchiv von CVS nach Subversion überführen</title>

<!--
    <para>Perhaps the most important way to familiarize CVS users with
      Subversion is to let them continue to work on their projects
      using the new system.  And while that can be somewhat
      accomplished using a flat import into a Subversion repository of
      an exported CVS repository, the more thorough solution involves
      transferring not just the latest snapshot of their data, but all
      the history behind it as well, from one system to another.  This
      is an extremely difficult problem to solve; it involves
      deducing changesets in the absence of atomicity and translating
      between the systems' completely orthogonal branching policies,
      among other complications.  Still, a handful of tools claim
      to at least partially support the ability to convert
      existing CVS repositories into Subversion ones.</para>
-->
    <para>Die vielleicht wichtigste Methode, CVS-Benutzer mit
      Subversion vertraut zu machen, ist es, sie ihre Arbeit an den
      Projekten mit dem neuen System fortführen zu lassen. Obwohl sich
      das mit einem flachen Import eines exportierten CVS-Projektarchivs
      in ein Subversion-Projektarchiv bewerkstelligen lässt, umfasst die
      gründlichere Lösung nicht nur die Übertragung einer
      Momentaufnahme des aktuellen Datenbestands, sondern der gesamten
      Historie, die sich dahinter verbirgt. Dabei gilt es, ein äußerst
      schwieriges Problem zu lösen: neben anderen Komplikationen
      bedingt dies, dass Änderungsmengen aufgrund der fehlenden
      Atomizität hergeleitet werden und die vollständig orthogonalen
      Verzweigungsstrategien übertragen werden müssen.  Trotzdem
      behaupten eine handvoll Werkzeuge, dass sie zumindest teilweise
      die Fähigkeit mitbringen, bestehende CVS- in
      Subversion-Projektarchivs umwandeln zu können.</para>

<!--
    <para>The most popular (and mature) conversion tool is
      cvs2svn (<ulink url="http://cvs2svn.tigris.org/"/>), a Python
      program originally created by members of Subversion's own
      development community.  This tool is meant to run exactly once:
      it scans your CVS repository multiple times and attempts to
      deduce commits, branches, and tags as best it can.  When it
      finishes, the result is either a Subversion repository or a
      portable Subversion dump file representing your code's history.
      See the web site for detailed instructions and caveats.</para>
-->
    <para>Das meistverbreitete (und ausgereifteste) Werkzeug zur
      Umwandlung ist cvs2svn (<ulink
      url="http://cvs2svn.tigris.org/"/>), ein Python-Programm, das
      ursprünglich von Mitgliedern der Subversion-Entwicklergemeinde
      erstellt wurde. Dieses Werkzeug soll genau einmal aufgerufen
      werden: es durchsucht mehrfach Ihr CVS-Projektarchiv und versucht
      so gut es eben geht, Übergaben, Zweige und Tags herzuleiten.
      Wenn es fertig ist, liegt als Ergebnis entweder ein
      Subversion-Projektarchiv oder eine portable Subversion-Auszugsdatei
      vor, die die Historie Ihres Codes repräsentiert. Auf der
      Web-Präsenz finden Sie detaillierte Anleitungen und Warnungen.
    </para>

  </sect1>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
